define([], (function load__dart_sdk() {
  'use strict';
  const _library = Object.create(null);
  const dart = Object.create(_library);
  dart.library = _library;
  var _debugger = Object.create(dart.library);
  var _foreign_helper = Object.create(dart.library);
  var _interceptors = Object.create(dart.library);
  var _internal = Object.create(dart.library);
  var _isolate_helper = Object.create(dart.library);
  var _js_helper = Object.create(dart.library);
  var _js_primitives = Object.create(dart.library);
  var _metadata = Object.create(dart.library);
  var _native_typed_data = Object.create(dart.library);
  var async = Object.create(dart.library);
  var collection = Object.create(dart.library);
  var convert = Object.create(dart.library);
  var developer = Object.create(dart.library);
  var io = Object.create(dart.library);
  var isolate$ = Object.create(dart.library);
  var js = Object.create(dart.library);
  var js_util = Object.create(dart.library);
  var math = Object.create(dart.library);
  var typed_data = Object.create(dart.library);
  var indexed_db = Object.create(dart.library);
  var html$ = Object.create(dart.library);
  var html_common = Object.create(dart.library);
  var svg$ = Object.create(dart.library);
  var web_audio = Object.create(dart.library);
  var web_gl = Object.create(dart.library);
  var web_sql = Object.create(dart.library);
  var core = Object.create(dart.library);
  var ui = Object.create(dart.library);
  var _engine = Object.create(dart.library);
  var _http = Object.create(dart.library);
  var _js_annotations = Object.create(dart.library);
  var dartx = Object.create(dart.library);
  const _privateNames = Symbol("_privateNames");
  dart.privateName = function(library, name) {
    let names = library[_privateNames];
    if (names == null) names = library[_privateNames] = new Map();
    let symbol = names.get(name);
    if (symbol == null) names.set(name, symbol = Symbol(name));
    return symbol;
  };
  var $hashCode = dartx.hashCode = Symbol("dartx.hashCode");
  var $isNotEmpty = dartx.isNotEmpty = Symbol("dartx.isNotEmpty");
  var $where = dartx.where = Symbol("dartx.where");
  var $join = dartx.join = Symbol("dartx.join");
  var $length = dartx.length = Symbol("dartx.length");
  var $_equals = dartx._equals = Symbol("dartx._equals");
  var $toString = dartx.toString = Symbol("dartx.toString");
  var $noSuchMethod = dartx.noSuchMethod = Symbol("dartx.noSuchMethod");
  var $cast = dartx.cast = Symbol("dartx.cast");
  var $addAll = dartx.addAll = Symbol("dartx.addAll");
  var $_set = dartx._set = Symbol("dartx._set");
  var $_get = dartx._get = Symbol("dartx._get");
  var $clear = dartx.clear = Symbol("dartx.clear");
  var $contains = dartx.contains = Symbol("dartx.contains");
  var $indexOf = dartx.indexOf = Symbol("dartx.indexOf");
  var $add = dartx.add = Symbol("dartx.add");
  var $isEmpty = dartx.isEmpty = Symbol("dartx.isEmpty");
  var $map = dartx.map = Symbol("dartx.map");
  var $toList = dartx.toList = Symbol("dartx.toList");
  var $sublist = dartx.sublist = Symbol("dartx.sublist");
  var $substring = dartx.substring = Symbol("dartx.substring");
  var $split = dartx.split = Symbol("dartx.split");
  var $trim = dartx.trim = Symbol("dartx.trim");
  var $runtimeType = dartx.runtimeType = Symbol("dartx.runtimeType");
  var $containsKey = dartx.containsKey = Symbol("dartx.containsKey");
  var $any = dartx.any = Symbol("dartx.any");
  var $keys = dartx.keys = Symbol("dartx.keys");
  var $remove = dartx.remove = Symbol("dartx.remove");
  var $values = dartx.values = Symbol("dartx.values");
  var $entries = dartx.entries = Symbol("dartx.entries");
  var $dartStack = dartx.dartStack = Symbol("dartx.dartStack");
  var $truncate = dartx.truncate = Symbol("dartx.truncate");
  var $toInt = dartx.toInt = Symbol("dartx.toInt");
  var $skip = dartx.skip = Symbol("dartx.skip");
  var $take = dartx.take = Symbol("dartx.take");
  var $asMap = dartx.asMap = Symbol("dartx.asMap");
  var $forEach = dartx.forEach = Symbol("dartx.forEach");
  var $elementAt = dartx.elementAt = Symbol("dartx.elementAt");
  var $last = dartx.last = Symbol("dartx.last");
  var $firstWhere = dartx.firstWhere = Symbol("dartx.firstWhere");
  var $replaceFirst = dartx.replaceFirst = Symbol("dartx.replaceFirst");
  var $startsWith = dartx.startsWith = Symbol("dartx.startsWith");
  var $compareTo = dartx.compareTo = Symbol("dartx.compareTo");
  var $sort = dartx.sort = Symbol("dartx.sort");
  var $putIfAbsent = dartx.putIfAbsent = Symbol("dartx.putIfAbsent");
  var $round = dartx.round = Symbol("dartx.round");
  var $bitAnd = dartx['&'] = Symbol("dartx.&");
  var $bitOr = dartx['|'] = Symbol("dartx.|");
  var $bitXor = dartx['^'] = Symbol("dartx.^");
  var $stackTrace = dartx.stackTrace = Symbol("dartx.stackTrace");
  var $invalidValue = dartx.invalidValue = Symbol("dartx.invalidValue");
  var $name = dartx.name = Symbol("dartx.name");
  var $message = dartx.message = Symbol("dartx.message");
  var $checkMutable = dartx.checkMutable = Symbol("dartx.checkMutable");
  var $checkGrowable = dartx.checkGrowable = Symbol("dartx.checkGrowable");
  var $removeAt = dartx.removeAt = Symbol("dartx.removeAt");
  var $insert = dartx.insert = Symbol("dartx.insert");
  var $setRange = dartx.setRange = Symbol("dartx.setRange");
  var $insertAll = dartx.insertAll = Symbol("dartx.insertAll");
  var $setAll = dartx.setAll = Symbol("dartx.setAll");
  var $removeLast = dartx.removeLast = Symbol("dartx.removeLast");
  var $removeWhere = dartx.removeWhere = Symbol("dartx.removeWhere");
  var $retainWhere = dartx.retainWhere = Symbol("dartx.retainWhere");
  var $expand = dartx.expand = Symbol("dartx.expand");
  var $takeWhile = dartx.takeWhile = Symbol("dartx.takeWhile");
  var $skipWhile = dartx.skipWhile = Symbol("dartx.skipWhile");
  var $reduce = dartx.reduce = Symbol("dartx.reduce");
  var $fold = dartx.fold = Symbol("dartx.fold");
  var $lastWhere = dartx.lastWhere = Symbol("dartx.lastWhere");
  var $singleWhere = dartx.singleWhere = Symbol("dartx.singleWhere");
  var $getRange = dartx.getRange = Symbol("dartx.getRange");
  var $first = dartx.first = Symbol("dartx.first");
  var $single = dartx.single = Symbol("dartx.single");
  var $removeRange = dartx.removeRange = Symbol("dartx.removeRange");
  var $fillRange = dartx.fillRange = Symbol("dartx.fillRange");
  var $replaceRange = dartx.replaceRange = Symbol("dartx.replaceRange");
  var $every = dartx.every = Symbol("dartx.every");
  var $reversed = dartx.reversed = Symbol("dartx.reversed");
  var $shuffle = dartx.shuffle = Symbol("dartx.shuffle");
  var $lastIndexOf = dartx.lastIndexOf = Symbol("dartx.lastIndexOf");
  var $toSet = dartx.toSet = Symbol("dartx.toSet");
  var $iterator = dartx.iterator = Symbol("dartx.iterator");
  var $followedBy = dartx.followedBy = Symbol("dartx.followedBy");
  var $whereType = dartx.whereType = Symbol("dartx.whereType");
  var $plus = dartx['+'] = Symbol("dartx.+");
  var $indexWhere = dartx.indexWhere = Symbol("dartx.indexWhere");
  var $lastIndexWhere = dartx.lastIndexWhere = Symbol("dartx.lastIndexWhere");
  var $isNegative = dartx.isNegative = Symbol("dartx.isNegative");
  var $isNaN = dartx.isNaN = Symbol("dartx.isNaN");
  var $isInfinite = dartx.isInfinite = Symbol("dartx.isInfinite");
  var $isFinite = dartx.isFinite = Symbol("dartx.isFinite");
  var $remainder = dartx.remainder = Symbol("dartx.remainder");
  var $abs = dartx.abs = Symbol("dartx.abs");
  var $sign = dartx.sign = Symbol("dartx.sign");
  var $truncateToDouble = dartx.truncateToDouble = Symbol("dartx.truncateToDouble");
  var $ceilToDouble = dartx.ceilToDouble = Symbol("dartx.ceilToDouble");
  var $ceil = dartx.ceil = Symbol("dartx.ceil");
  var $floorToDouble = dartx.floorToDouble = Symbol("dartx.floorToDouble");
  var $floor = dartx.floor = Symbol("dartx.floor");
  var $roundToDouble = dartx.roundToDouble = Symbol("dartx.roundToDouble");
  var $clamp = dartx.clamp = Symbol("dartx.clamp");
  var $toDouble = dartx.toDouble = Symbol("dartx.toDouble");
  var $toStringAsFixed = dartx.toStringAsFixed = Symbol("dartx.toStringAsFixed");
  var $toStringAsExponential = dartx.toStringAsExponential = Symbol("dartx.toStringAsExponential");
  var $toStringAsPrecision = dartx.toStringAsPrecision = Symbol("dartx.toStringAsPrecision");
  var $codeUnitAt = dartx.codeUnitAt = Symbol("dartx.codeUnitAt");
  var $toRadixString = dartx.toRadixString = Symbol("dartx.toRadixString");
  var $times = dartx['*'] = Symbol("dartx.*");
  var $_negate = dartx._negate = Symbol("dartx._negate");
  var $minus = dartx['-'] = Symbol("dartx.-");
  var $divide = dartx['/'] = Symbol("dartx./");
  var $modulo = dartx['%'] = Symbol("dartx.%");
  var $floorDivide = dartx['~/'] = Symbol("dartx.~/");
  var $leftShift = dartx['<<'] = Symbol("dartx.<<");
  var $rightShift = dartx['>>'] = Symbol("dartx.>>");
  var $lessThan = dartx['<'] = Symbol("dartx.<");
  var $greaterThan = dartx['>'] = Symbol("dartx.>");
  var $lessOrEquals = dartx['<='] = Symbol("dartx.<=");
  var $greaterOrEquals = dartx['>='] = Symbol("dartx.>=");
  var $isEven = dartx.isEven = Symbol("dartx.isEven");
  var $isOdd = dartx.isOdd = Symbol("dartx.isOdd");
  var $toUnsigned = dartx.toUnsigned = Symbol("dartx.toUnsigned");
  var $toSigned = dartx.toSigned = Symbol("dartx.toSigned");
  var $bitLength = dartx.bitLength = Symbol("dartx.bitLength");
  var $modPow = dartx.modPow = Symbol("dartx.modPow");
  var $modInverse = dartx.modInverse = Symbol("dartx.modInverse");
  var $gcd = dartx.gcd = Symbol("dartx.gcd");
  var $bitNot = dartx['~'] = Symbol("dartx.~");
  var $allMatches = dartx.allMatches = Symbol("dartx.allMatches");
  var $matchAsPrefix = dartx.matchAsPrefix = Symbol("dartx.matchAsPrefix");
  var $endsWith = dartx.endsWith = Symbol("dartx.endsWith");
  var $replaceAll = dartx.replaceAll = Symbol("dartx.replaceAll");
  var $splitMapJoin = dartx.splitMapJoin = Symbol("dartx.splitMapJoin");
  var $replaceAllMapped = dartx.replaceAllMapped = Symbol("dartx.replaceAllMapped");
  var $replaceFirstMapped = dartx.replaceFirstMapped = Symbol("dartx.replaceFirstMapped");
  var $toLowerCase = dartx.toLowerCase = Symbol("dartx.toLowerCase");
  var $toUpperCase = dartx.toUpperCase = Symbol("dartx.toUpperCase");
  var $trimLeft = dartx.trimLeft = Symbol("dartx.trimLeft");
  var $trimRight = dartx.trimRight = Symbol("dartx.trimRight");
  var $padLeft = dartx.padLeft = Symbol("dartx.padLeft");
  var $padRight = dartx.padRight = Symbol("dartx.padRight");
  var $codeUnits = dartx.codeUnits = Symbol("dartx.codeUnits");
  var $runes = dartx.runes = Symbol("dartx.runes");
  var $buffer = dartx.buffer = Symbol("dartx.buffer");
  var $offsetInBytes = dartx.offsetInBytes = Symbol("dartx.offsetInBytes");
  var $containsValue = dartx.containsValue = Symbol("dartx.containsValue");
  var $update = dartx.update = Symbol("dartx.update");
  var $updateAll = dartx.updateAll = Symbol("dartx.updateAll");
  var $addEntries = dartx.addEntries = Symbol("dartx.addEntries");
  var $lengthInBytes = dartx.lengthInBytes = Symbol("dartx.lengthInBytes");
  var $asUint8List = dartx.asUint8List = Symbol("dartx.asUint8List");
  var $asInt8List = dartx.asInt8List = Symbol("dartx.asInt8List");
  var $asUint8ClampedList = dartx.asUint8ClampedList = Symbol("dartx.asUint8ClampedList");
  var $asUint16List = dartx.asUint16List = Symbol("dartx.asUint16List");
  var $asInt16List = dartx.asInt16List = Symbol("dartx.asInt16List");
  var $asUint32List = dartx.asUint32List = Symbol("dartx.asUint32List");
  var $asInt32List = dartx.asInt32List = Symbol("dartx.asInt32List");
  var $asUint64List = dartx.asUint64List = Symbol("dartx.asUint64List");
  var $asInt64List = dartx.asInt64List = Symbol("dartx.asInt64List");
  var $asInt32x4List = dartx.asInt32x4List = Symbol("dartx.asInt32x4List");
  var $asFloat32List = dartx.asFloat32List = Symbol("dartx.asFloat32List");
  var $asFloat64List = dartx.asFloat64List = Symbol("dartx.asFloat64List");
  var $asFloat32x4List = dartx.asFloat32x4List = Symbol("dartx.asFloat32x4List");
  var $asFloat64x2List = dartx.asFloat64x2List = Symbol("dartx.asFloat64x2List");
  var $asByteData = dartx.asByteData = Symbol("dartx.asByteData");
  var $elementSizeInBytes = dartx.elementSizeInBytes = Symbol("dartx.elementSizeInBytes");
  var $getFloat32 = dartx.getFloat32 = Symbol("dartx.getFloat32");
  var $getFloat64 = dartx.getFloat64 = Symbol("dartx.getFloat64");
  var $getInt16 = dartx.getInt16 = Symbol("dartx.getInt16");
  var $getInt32 = dartx.getInt32 = Symbol("dartx.getInt32");
  var $getInt64 = dartx.getInt64 = Symbol("dartx.getInt64");
  var $getInt8 = dartx.getInt8 = Symbol("dartx.getInt8");
  var $getUint16 = dartx.getUint16 = Symbol("dartx.getUint16");
  var $getUint32 = dartx.getUint32 = Symbol("dartx.getUint32");
  var $getUint64 = dartx.getUint64 = Symbol("dartx.getUint64");
  var $getUint8 = dartx.getUint8 = Symbol("dartx.getUint8");
  var $setFloat32 = dartx.setFloat32 = Symbol("dartx.setFloat32");
  var $setFloat64 = dartx.setFloat64 = Symbol("dartx.setFloat64");
  var $setInt16 = dartx.setInt16 = Symbol("dartx.setInt16");
  var $setInt32 = dartx.setInt32 = Symbol("dartx.setInt32");
  var $setInt64 = dartx.setInt64 = Symbol("dartx.setInt64");
  var $setInt8 = dartx.setInt8 = Symbol("dartx.setInt8");
  var $setUint16 = dartx.setUint16 = Symbol("dartx.setUint16");
  var $setUint32 = dartx.setUint32 = Symbol("dartx.setUint32");
  var $setUint64 = dartx.setUint64 = Symbol("dartx.setUint64");
  var $setUint8 = dartx.setUint8 = Symbol("dartx.setUint8");
  var $left = dartx.left = Symbol("dartx.left");
  var $width = dartx.width = Symbol("dartx.width");
  var $top = dartx.top = Symbol("dartx.top");
  var $height = dartx.height = Symbol("dartx.height");
  var $right = dartx.right = Symbol("dartx.right");
  var $bottom = dartx.bottom = Symbol("dartx.bottom");
  var $intersection = dartx.intersection = Symbol("dartx.intersection");
  var $intersects = dartx.intersects = Symbol("dartx.intersects");
  var $boundingBox = dartx.boundingBox = Symbol("dartx.boundingBox");
  var $containsRectangle = dartx.containsRectangle = Symbol("dartx.containsRectangle");
  var $containsPoint = dartx.containsPoint = Symbol("dartx.containsPoint");
  var $topLeft = dartx.topLeft = Symbol("dartx.topLeft");
  var $topRight = dartx.topRight = Symbol("dartx.topRight");
  var $bottomRight = dartx.bottomRight = Symbol("dartx.bottomRight");
  var $bottomLeft = dartx.bottomLeft = Symbol("dartx.bottomLeft");
  var T$ = {
    ObjectN: () => (T$.ObjectN = dart.constFn(dart.nullable(core.Object)))(),
    ListOfObjectN: () => (T$.ListOfObjectN = dart.constFn(core.List$(T$.ObjectN())))(),
    boolN: () => (T$.boolN = dart.constFn(dart.nullable(core.bool)))(),
    JSArrayOfString: () => (T$.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    IdentityMapOfString$ObjectN: () => (T$.IdentityMapOfString$ObjectN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ObjectN())))(),
    ListOfString: () => (T$.ListOfString = dart.constFn(core.List$(core.String)))(),
    ListNOfString: () => (T$.ListNOfString = dart.constFn(dart.nullable(T$.ListOfString())))(),
    IdentityMapOfString$ListNOfString: () => (T$.IdentityMapOfString$ListNOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListNOfString())))(),
    JSArrayOfTypeVariable: () => (T$.JSArrayOfTypeVariable = dart.constFn(_interceptors.JSArray$(dart.TypeVariable)))(),
    ExpandoOfFunction: () => (T$.ExpandoOfFunction = dart.constFn(core.Expando$(core.Function)))(),
    IdentityMapOfString$Object: () => (T$.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    ListOfObject: () => (T$.ListOfObject = dart.constFn(core.List$(core.Object)))(),
    IdentityMapOfTypeVariable$int: () => (T$.IdentityMapOfTypeVariable$int = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.int)))(),
    IdentityMapOfTypeVariable$Object: () => (T$.IdentityMapOfTypeVariable$Object = dart.constFn(_js_helper.IdentityMap$(dart.TypeVariable, core.Object)))(),
    LinkedHashMapOfTypeVariable$TypeConstraint: () => (T$.LinkedHashMapOfTypeVariable$TypeConstraint = dart.constFn(collection.LinkedHashMap$(dart.TypeVariable, dart.TypeConstraint)))(),
    JSArrayOfObject: () => (T$.JSArrayOfObject = dart.constFn(_interceptors.JSArray$(core.Object)))(),
    ListOfType: () => (T$.ListOfType = dart.constFn(core.List$(core.Type)))(),
    SymbolL: () => (T$.SymbolL = dart.constFn(dart.legacy(core.Symbol)))(),
    MapOfSymbol$dynamic: () => (T$.MapOfSymbol$dynamic = dart.constFn(core.Map$(core.Symbol, dart.dynamic)))(),
    TypeL: () => (T$.TypeL = dart.constFn(dart.legacy(core.Type)))(),
    JSArrayOfNameValuePair: () => (T$.JSArrayOfNameValuePair = dart.constFn(_interceptors.JSArray$(_debugger.NameValuePair)))(),
    intAnddynamicTovoid: () => (T$.intAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.int, dart.dynamic])))(),
    JSArrayOfFormatter: () => (T$.JSArrayOfFormatter = dart.constFn(_interceptors.JSArray$(_debugger.Formatter)))(),
    _HashSetOfNameValuePair: () => (T$._HashSetOfNameValuePair = dart.constFn(collection._HashSet$(_debugger.NameValuePair)))(),
    IdentityMapOfString$String: () => (T$.IdentityMapOfString$String = dart.constFn(_js_helper.IdentityMap$(core.String, core.String)))(),
    dynamicAnddynamicToNull: () => (T$.dynamicAnddynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, dart.dynamic])))(),
    dynamicAnddynamicTovoid: () => (T$.dynamicAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, dart.dynamic])))(),
    dynamicToString: () => (T$.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    ListOfNameValuePair: () => (T$.ListOfNameValuePair = dart.constFn(core.List$(_debugger.NameValuePair)))(),
    StringTobool: () => (T$.StringTobool = dart.constFn(dart.fnType(core.bool, [core.String])))(),
    VoidToString: () => (T$.VoidToString = dart.constFn(dart.fnType(core.String, [])))(),
    StringToNameValuePair: () => (T$.StringToNameValuePair = dart.constFn(dart.fnType(_debugger.NameValuePair, [core.String])))(),
    NameValuePairAndNameValuePairToint: () => (T$.NameValuePairAndNameValuePairToint = dart.constFn(dart.fnType(core.int, [_debugger.NameValuePair, _debugger.NameValuePair])))(),
    LinkedHashMapOfdynamic$ObjectN: () => (T$.LinkedHashMapOfdynamic$ObjectN = dart.constFn(collection.LinkedHashMap$(dart.dynamic, T$.ObjectN())))(),
    dynamicTodynamic: () => (T$.dynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic])))(),
    dynamicToObjectN: () => (T$.dynamicToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [dart.dynamic])))(),
    IdentityMapOfString$_MethodStats: () => (T$.IdentityMapOfString$_MethodStats = dart.constFn(_js_helper.IdentityMap$(core.String, _debugger._MethodStats)))(),
    StringToString: () => (T$.StringToString = dart.constFn(dart.fnType(core.String, [core.String])))(),
    VoidTo_MethodStats: () => (T$.VoidTo_MethodStats = dart.constFn(dart.fnType(_debugger._MethodStats, [])))(),
    StringAndStringToint: () => (T$.StringAndStringToint = dart.constFn(dart.fnType(core.int, [core.String, core.String])))(),
    JSArrayOfListOfObject: () => (T$.JSArrayOfListOfObject = dart.constFn(_interceptors.JSArray$(T$.ListOfObject())))(),
    JSArrayOf_CallMethodRecord: () => (T$.JSArrayOf_CallMethodRecord = dart.constFn(_interceptors.JSArray$(_debugger._CallMethodRecord)))(),
    ListN: () => (T$.ListN = dart.constFn(dart.nullable(core.List)))(),
    InvocationN: () => (T$.InvocationN = dart.constFn(dart.nullable(core.Invocation)))(),
    MapNOfSymbol$dynamic: () => (T$.MapNOfSymbol$dynamic = dart.constFn(dart.nullable(T$.MapOfSymbol$dynamic())))(),
    ObjectNAndObjectNToint: () => (T$.ObjectNAndObjectNToint = dart.constFn(dart.fnType(core.int, [T$.ObjectN(), T$.ObjectN()])))(),
    dynamicAnddynamicToint: () => (T$.dynamicAnddynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic, dart.dynamic])))(),
    ObjectAndStackTraceTovoid: () => (T$.ObjectAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [core.Object, core.StackTrace])))(),
    dynamicTovoid: () => (T$.dynamicTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic])))(),
    _FutureOfNull: () => (T$._FutureOfNull = dart.constFn(async._Future$(core.Null)))(),
    VoidTo_FutureOfNull: () => (T$.VoidTo_FutureOfNull = dart.constFn(dart.fnType(T$._FutureOfNull(), [])))(),
    VoidTovoid: () => (T$.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    FutureOfNull: () => (T$.FutureOfNull = dart.constFn(async.Future$(core.Null)))(),
    FutureNOfNull: () => (T$.FutureNOfNull = dart.constFn(dart.nullable(T$.FutureOfNull())))(),
    dynamicToFuture: () => (T$.dynamicToFuture = dart.constFn(dart.fnType(async.Future, [dart.dynamic])))(),
    _FutureOfString: () => (T$._FutureOfString = dart.constFn(async._Future$(core.String)))(),
    _FutureOfbool: () => (T$._FutureOfbool = dart.constFn(async._Future$(core.bool)))(),
    VoidTobool: () => (T$.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))(),
    boolToNull: () => (T$.boolToNull = dart.constFn(dart.fnType(core.Null, [core.bool])))(),
    voidToNull: () => (T$.voidToNull = dart.constFn(dart.fnType(core.Null, [dart.void])))(),
    _FutureOfint: () => (T$._FutureOfint = dart.constFn(async._Future$(core.int)))(),
    ObjectAndStackTraceToNull: () => (T$.ObjectAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [core.Object, core.StackTrace])))(),
    FutureOfvoid: () => (T$.FutureOfvoid = dart.constFn(async.Future$(dart.void)))(),
    VoidToFutureOfvoid: () => (T$.VoidToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [])))(),
    ObjectTovoid: () => (T$.ObjectTovoid = dart.constFn(dart.fnType(dart.void, [core.Object])))(),
    EventSinkTo_ConverterStreamEventSink: () => (T$.EventSinkTo_ConverterStreamEventSink = dart.constFn(dart.fnType(convert._ConverterStreamEventSink, [async.EventSink])))(),
    JSArrayOfUint8List: () => (T$.JSArrayOfUint8List = dart.constFn(_interceptors.JSArray$(typed_data.Uint8List)))(),
    ObjectNAndObjectNTovoid: () => (T$.ObjectNAndObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN(), T$.ObjectN()])))(),
    ObjectNToObjectN: () => (T$.ObjectNToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [T$.ObjectN()])))(),
    EmptyIteratorOfNeverL: () => (T$.EmptyIteratorOfNeverL = dart.constFn(_internal.EmptyIterator$(dart.legacy(dart.Never))))(),
    doubleL: () => (T$.doubleL = dart.constFn(dart.legacy(core.double)))(),
    VoidToFutureOfNull: () => (T$.VoidToFutureOfNull = dart.constFn(dart.fnType(T$.FutureOfNull(), [])))(),
    VoidToNull: () => (T$.VoidToNull = dart.constFn(dart.fnType(core.Null, [])))(),
    VoidToint: () => (T$.VoidToint = dart.constFn(dart.fnType(core.int, [])))(),
    JSArrayOfint: () => (T$.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))(),
    StringN: () => (T$.StringN = dart.constFn(dart.nullable(core.String)))(),
    JSArrayOfStringN: () => (T$.JSArrayOfStringN = dart.constFn(_interceptors.JSArray$(T$.StringN())))(),
    SubListIterableOfString: () => (T$.SubListIterableOfString = dart.constFn(_internal.SubListIterable$(core.String)))(),
    EmptyIterableOfString: () => (T$.EmptyIterableOfString = dart.constFn(_internal.EmptyIterable$(core.String)))(),
    ObjectNTovoid: () => (T$.ObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.ObjectN()])))(),
    MatchToString: () => (T$.MatchToString = dart.constFn(dart.fnType(core.String, [core.Match])))(),
    IterableOfdouble: () => (T$.IterableOfdouble = dart.constFn(core.Iterable$(core.double)))(),
    IterableOfint: () => (T$.IterableOfint = dart.constFn(core.Iterable$(core.int)))(),
    intN: () => (T$.intN = dart.constFn(dart.nullable(core.int)))(),
    ObjectNTovoid$1: () => (T$.ObjectNTovoid$1 = dart.constFn(dart.fnType(dart.void, [], [T$.ObjectN()])))(),
    _FutureOfObjectN: () => (T$._FutureOfObjectN = dart.constFn(async._Future$(T$.ObjectN())))(),
    dynamicToNull: () => (T$.dynamicToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic])))(),
    _FutureOfvoid: () => (T$._FutureOfvoid = dart.constFn(async._Future$(dart.void)))(),
    VoidToObject: () => (T$.VoidToObject = dart.constFn(dart.fnType(core.Object, [])))(),
    ObjectTodynamic: () => (T$.ObjectTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object])))(),
    VoidToStackTrace: () => (T$.VoidToStackTrace = dart.constFn(dart.fnType(core.StackTrace, [])))(),
    StackTraceTodynamic: () => (T$.StackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.StackTrace])))(),
    ObjectNTobool: () => (T$.ObjectNTobool = dart.constFn(dart.fnType(core.bool, [T$.ObjectN()])))(),
    FutureOrOfbool: () => (T$.FutureOrOfbool = dart.constFn(async.FutureOr$(core.bool)))(),
    VoidToFutureOrOfbool: () => (T$.VoidToFutureOrOfbool = dart.constFn(dart.fnType(T$.FutureOrOfbool(), [])))(),
    boolTovoid: () => (T$.boolTovoid = dart.constFn(dart.fnType(dart.void, [core.bool])))(),
    VoidToFn: () => (T$.VoidToFn = dart.constFn(dart.fnType(T$.boolTovoid(), [])))(),
    FnTodynamic: () => (T$.FnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.boolTovoid()])))(),
    FutureOfbool: () => (T$.FutureOfbool = dart.constFn(async.Future$(core.bool)))(),
    ObjectTobool: () => (T$.ObjectTobool = dart.constFn(dart.fnType(core.bool, [core.Object])))(),
    VoidTodynamic: () => (T$.VoidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [])))(),
    ObjectAndStackTraceTodynamic: () => (T$.ObjectAndStackTraceTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Object, core.StackTrace])))(),
    _FutureListenerOfObject$Object: () => (T$._FutureListenerOfObject$Object = dart.constFn(async._FutureListener$(core.Object, core.Object)))(),
    _FutureListenerNOfObject$Object: () => (T$._FutureListenerNOfObject$Object = dart.constFn(dart.nullable(T$._FutureListenerOfObject$Object())))(),
    JSArrayOfFunction: () => (T$.JSArrayOfFunction = dart.constFn(_interceptors.JSArray$(core.Function)))(),
    _FutureListenerN: () => (T$._FutureListenerN = dart.constFn(dart.nullable(async._FutureListener)))(),
    dynamicTo_Future: () => (T$.dynamicTo_Future = dart.constFn(dart.fnType(async._Future, [dart.dynamic])))(),
    _StreamControllerAddStreamStateOfObjectN: () => (T$._StreamControllerAddStreamStateOfObjectN = dart.constFn(async._StreamControllerAddStreamState$(T$.ObjectN())))(),
    FunctionN: () => (T$.FunctionN = dart.constFn(dart.nullable(core.Function)))(),
    AsyncErrorN: () => (T$.AsyncErrorN = dart.constFn(dart.nullable(async.AsyncError)))(),
    StackTraceN: () => (T$.StackTraceN = dart.constFn(dart.nullable(core.StackTrace)))(),
    ZoneAndZoneDelegateAndZone__ToAsyncErrorN: () => (T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(dart.fnType(T$.AsyncErrorN(), [async.Zone, async.ZoneDelegate, async.Zone, core.Object, T$.StackTraceN()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToAsyncErrorN = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN())))(),
    ZoneAndZoneDelegateAndZone__Tovoid: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, T$.VoidTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid())))(),
    ZoneAndZoneDelegateAndZone__ToTimer: () => (T$.ZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, T$.VoidTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToTimer())))(),
    TimerTovoid: () => (T$.TimerTovoid = dart.constFn(dart.fnType(dart.void, [async.Timer])))(),
    ZoneAndZoneDelegateAndZone__ToTimer$1: () => (T$.ZoneAndZoneDelegateAndZone__ToTimer$1 = dart.constFn(dart.fnType(async.Timer, [async.Zone, async.ZoneDelegate, async.Zone, core.Duration, T$.TimerTovoid()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$1: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToTimer$1 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToTimer$1())))(),
    ZoneAndZoneDelegateAndZone__Tovoid$1: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.String])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$1: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$1 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid$1())))(),
    ZoneSpecificationN: () => (T$.ZoneSpecificationN = dart.constFn(dart.nullable(async.ZoneSpecification)))(),
    MapOfObjectN$ObjectN: () => (T$.MapOfObjectN$ObjectN = dart.constFn(core.Map$(T$.ObjectN(), T$.ObjectN())))(),
    MapNOfObjectN$ObjectN: () => (T$.MapNOfObjectN$ObjectN = dart.constFn(dart.nullable(T$.MapOfObjectN$ObjectN())))(),
    ZoneAndZoneDelegateAndZone__ToZone: () => (T$.ZoneAndZoneDelegateAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [async.Zone, async.ZoneDelegate, async.Zone, T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__ToZone = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__ToZone())))(),
    ZoneAndZoneDelegateAndZone__Tovoid$2: () => (T$.ZoneAndZoneDelegateAndZone__Tovoid$2 = dart.constFn(dart.fnType(dart.void, [async.Zone, async.ZoneDelegate, async.Zone, core.Object, core.StackTrace])))(),
    _ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$2: () => (T$._ZoneFunctionOfZoneAndZoneDelegateAndZone__Tovoid$2 = dart.constFn(async._ZoneFunction$(T$.ZoneAndZoneDelegateAndZone__Tovoid$2())))(),
    ZoneN: () => (T$.ZoneN = dart.constFn(dart.nullable(async.Zone)))(),
    ZoneDelegateN: () => (T$.ZoneDelegateN = dart.constFn(dart.nullable(async.ZoneDelegate)))(),
    ZoneNAndZoneDelegateNAndZone__ToR: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR = dart.constFn(dart.gFnType(R => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [])]], R => [T$.ObjectN()])))(),
    ZoneNAndZoneDelegateNAndZone__ToR$1: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR$1 = dart.constFn(dart.gFnType((R, T) => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [T]), T]], (R, T) => [T$.ObjectN(), T$.ObjectN()])))(),
    ZoneNAndZoneDelegateNAndZone__ToR$2: () => (T$.ZoneNAndZoneDelegateNAndZone__ToR$2 = dart.constFn(dart.gFnType((R, T1, T2) => [R, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, dart.fnType(R, [T1, T2]), T1, T2]], (R, T1, T2) => [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn: () => (T$.ZoneAndZoneDelegateAndZone__ToFn = dart.constFn(dart.gFnType(R => [dart.fnType(R, []), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [])]], R => [T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn$1: () => (T$.ZoneAndZoneDelegateAndZone__ToFn$1 = dart.constFn(dart.gFnType((R, T) => [dart.fnType(R, [T]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T])]], (R, T) => [T$.ObjectN(), T$.ObjectN()])))(),
    ZoneAndZoneDelegateAndZone__ToFn$2: () => (T$.ZoneAndZoneDelegateAndZone__ToFn$2 = dart.constFn(dart.gFnType((R, T1, T2) => [dart.fnType(R, [T1, T2]), [async.Zone, async.ZoneDelegate, async.Zone, dart.fnType(R, [T1, T2])]], (R, T1, T2) => [T$.ObjectN(), T$.ObjectN(), T$.ObjectN()])))(),
    ZoneL: () => (T$.ZoneL = dart.constFn(dart.legacy(async.Zone)))(),
    ZoneDelegateL: () => (T$.ZoneDelegateL = dart.constFn(dart.legacy(async.ZoneDelegate)))(),
    ObjectL: () => (T$.ObjectL = dart.constFn(dart.legacy(core.Object)))(),
    ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN = dart.constFn(dart.fnType(T$.AsyncErrorN(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ObjectL(), T$.StackTraceN()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToAsyncErrorN())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN())))(),
    VoidToLvoid: () => (T$.VoidToLvoid = dart.constFn(dart.legacy(T$.VoidTovoid())))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.VoidToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid())))(),
    ZoneNAndZoneDelegateNAndZone__Tovoid: () => (T$.ZoneNAndZoneDelegateNAndZone__Tovoid = dart.constFn(dart.fnType(dart.void, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, T$.VoidTovoid()])))(),
    TimerL: () => (T$.TimerL = dart.constFn(dart.legacy(async.Timer)))(),
    DurationL: () => (T$.DurationL = dart.constFn(dart.legacy(core.Duration)))(),
    ZoneLAndZoneDelegateLAndZoneL__ToTimerL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL = dart.constFn(dart.fnType(T$.TimerL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.DurationL(), T$.VoidToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLTimerL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL())))(),
    TimerLTovoid: () => (T$.TimerLTovoid = dart.constFn(dart.fnType(dart.void, [T$.TimerL()])))(),
    TimerLToLvoid: () => (T$.TimerLToLvoid = dart.constFn(dart.legacy(T$.TimerLTovoid())))(),
    ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1 = dart.constFn(dart.fnType(T$.TimerL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.DurationL(), T$.TimerLToLvoid()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToTimerL$1())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1())))(),
    StringL: () => (T$.StringL = dart.constFn(dart.legacy(core.String)))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.StringL()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$1())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$1())))(),
    ZoneLAndZoneDelegateLAndZoneL__ToZoneL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToZoneL = dart.constFn(dart.fnType(T$.ZoneL(), [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLZoneL: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__ToZoneL())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLZoneL())))(),
    ZoneNAndZoneDelegateNAndZone__ToZone: () => (T$.ZoneNAndZoneDelegateNAndZone__ToZone = dart.constFn(dart.fnType(async.Zone, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, T$.ZoneSpecificationN(), T$.MapNOfObjectN$ObjectN()])))(),
    StackTraceL: () => (T$.StackTraceL = dart.constFn(dart.legacy(core.StackTrace)))(),
    ZoneLAndZoneDelegateLAndZoneL__Tovoid$2: () => (T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$2 = dart.constFn(dart.fnType(dart.void, [T$.ZoneL(), T$.ZoneDelegateL(), T$.ZoneL(), T$.ObjectL(), T$.StackTraceL()])))(),
    ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2: () => (T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2 = dart.constFn(dart.legacy(T$.ZoneLAndZoneDelegateLAndZoneL__Tovoid$2())))(),
    _ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2: () => (T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2 = dart.constFn(async._ZoneFunction$(T$.ZoneLAndZoneDelegateLAndZoneL__ToLvoid$2())))(),
    ZoneNAndZoneDelegateNAndZone__Tovoid$1: () => (T$.ZoneNAndZoneDelegateNAndZone__Tovoid$1 = dart.constFn(dart.fnType(dart.void, [T$.ZoneN(), T$.ZoneDelegateN(), async.Zone, core.Object, core.StackTrace])))(),
    NeverAndNeverTodynamic: () => (T$.NeverAndNeverTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.Never, dart.Never])))(),
    StringTovoid: () => (T$.StringTovoid = dart.constFn(dart.fnType(dart.void, [core.String])))(),
    HashMapOfObjectN$ObjectN: () => (T$.HashMapOfObjectN$ObjectN = dart.constFn(collection.HashMap$(T$.ObjectN(), T$.ObjectN())))(),
    JSArrayOfObjectN: () => (T$.JSArrayOfObjectN = dart.constFn(_interceptors.JSArray$(T$.ObjectN())))(),
    ObjectNToint: () => (T$.ObjectNToint = dart.constFn(dart.fnType(core.int, [T$.ObjectN()])))(),
    ObjectNAndObjectNTobool: () => (T$.ObjectNAndObjectNTobool = dart.constFn(dart.fnType(core.bool, [T$.ObjectN(), T$.ObjectN()])))(),
    LinkedListEntryOfLinkedListEntry: () => (T$.LinkedListEntryOfLinkedListEntry = dart.constFn(collection.LinkedListEntry$(collection.LinkedListEntry)))()
  };
  var T$0 = {
    dynamicTobool: () => (T$0.dynamicTobool = dart.constFn(dart.fnType(core.bool, [dart.dynamic])))(),
    ComparableAndComparableToint: () => (T$0.ComparableAndComparableToint = dart.constFn(dart.fnType(core.int, [core.Comparable, core.Comparable])))(),
    MappedIterableOfString$dynamic: () => (T$0.MappedIterableOfString$dynamic = dart.constFn(_internal.MappedIterable$(core.String, dart.dynamic)))(),
    ObjectNTodynamic: () => (T$0.ObjectNTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$.ObjectN()])))(),
    MapOfString$dynamic: () => (T$0.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    StringAnddynamicTovoid: () => (T$0.StringAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.String, dart.dynamic])))(),
    IdentityMapOfString$dynamic: () => (T$0.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    ListOfint: () => (T$0.ListOfint = dart.constFn(core.List$(core.int)))(),
    StringBufferAndStringToStringBuffer: () => (T$0.StringBufferAndStringToStringBuffer = dart.constFn(dart.fnType(core.StringBuffer, [core.StringBuffer, core.String])))(),
    StringBufferToString: () => (T$0.StringBufferToString = dart.constFn(dart.fnType(core.String, [core.StringBuffer])))(),
    IdentityMapOfString$Encoding: () => (T$0.IdentityMapOfString$Encoding = dart.constFn(_js_helper.IdentityMap$(core.String, convert.Encoding)))(),
    SinkOfListOfint: () => (T$0.SinkOfListOfint = dart.constFn(core.Sink$(T$0.ListOfint())))(),
    StreamOfString: () => (T$0.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    StreamOfListOfint: () => (T$0.StreamOfListOfint = dart.constFn(async.Stream$(T$0.ListOfint())))(),
    SinkOfString: () => (T$0.SinkOfString = dart.constFn(core.Sink$(core.String)))(),
    intL: () => (T$0.intL = dart.constFn(dart.legacy(core.int)))(),
    StreamOfObjectN: () => (T$0.StreamOfObjectN = dart.constFn(async.Stream$(T$.ObjectN())))(),
    JSArrayOfListOfint: () => (T$0.JSArrayOfListOfint = dart.constFn(_interceptors.JSArray$(T$0.ListOfint())))(),
    Uint8ListAndintAndintTovoid: () => (T$0.Uint8ListAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.int, core.int])))(),
    SyncIterableOfString: () => (T$0.SyncIterableOfString = dart.constFn(_js_helper.SyncIterable$(core.String)))(),
    EventSinkOfString: () => (T$0.EventSinkOfString = dart.constFn(async.EventSink$(core.String)))(),
    EventSinkOfStringTo_LineSplitterEventSink: () => (T$0.EventSinkOfStringTo_LineSplitterEventSink = dart.constFn(dart.fnType(convert._LineSplitterEventSink, [T$0.EventSinkOfString()])))(),
    VoidToObjectN: () => (T$0.VoidToObjectN = dart.constFn(dart.fnType(T$.ObjectN(), [])))(),
    IdentityMapOfString$_FakeUserTag: () => (T$0.IdentityMapOfString$_FakeUserTag = dart.constFn(_js_helper.IdentityMap$(core.String, developer._FakeUserTag)))(),
    LinkedMapOfString$Metric: () => (T$0.LinkedMapOfString$Metric = dart.constFn(_js_helper.LinkedMap$(core.String, developer.Metric)))(),
    UriN: () => (T$0.UriN = dart.constFn(dart.nullable(core.Uri)))(),
    CompleterOfUriN: () => (T$0.CompleterOfUriN = dart.constFn(async.Completer$(T$0.UriN())))(),
    UriNTovoid: () => (T$0.UriNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.UriN()])))(),
    CompleterOfUri: () => (T$0.CompleterOfUri = dart.constFn(async.Completer$(core.Uri)))(),
    UriTovoid: () => (T$0.UriTovoid = dart.constFn(dart.fnType(dart.void, [core.Uri])))(),
    _SyncBlockN: () => (T$0._SyncBlockN = dart.constFn(dart.nullable(developer._SyncBlock)))(),
    JSArrayOf_SyncBlockN: () => (T$0.JSArrayOf_SyncBlockN = dart.constFn(_interceptors.JSArray$(T$0._SyncBlockN())))(),
    JSArrayOf_AsyncBlock: () => (T$0.JSArrayOf_AsyncBlock = dart.constFn(_interceptors.JSArray$(developer._AsyncBlock)))(),
    LinkedMapOfObjectN$ObjectN: () => (T$0.LinkedMapOfObjectN$ObjectN = dart.constFn(_js_helper.LinkedMap$(T$.ObjectN(), T$.ObjectN())))(),
    FutureOfServiceExtensionResponse: () => (T$0.FutureOfServiceExtensionResponse = dart.constFn(async.Future$(developer.ServiceExtensionResponse)))(),
    MapOfString$String: () => (T$0.MapOfString$String = dart.constFn(core.Map$(core.String, core.String)))(),
    StringAndMapOfString$StringToFutureOfServiceExtensionResponse: () => (T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(T$0.FutureOfServiceExtensionResponse(), [core.String, T$0.MapOfString$String()])))(),
    IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse: () => (T$0.IdentityMapOfString$StringAndMapOfString$StringToFutureOfServiceExtensionResponse = dart.constFn(_js_helper.IdentityMap$(core.String, T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse())))(),
    VoidToUint8List: () => (T$0.VoidToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [])))(),
    Uint8ListTodynamic: () => (T$0.Uint8ListTodynamic = dart.constFn(dart.fnType(dart.dynamic, [typed_data.Uint8List])))(),
    FutureOfDirectory: () => (T$0.FutureOfDirectory = dart.constFn(async.Future$(io.Directory)))(),
    DirectoryToFutureOfDirectory: () => (T$0.DirectoryToFutureOfDirectory = dart.constFn(dart.fnType(T$0.FutureOfDirectory(), [io.Directory])))(),
    FutureOrOfDirectory: () => (T$0.FutureOrOfDirectory = dart.constFn(async.FutureOr$(io.Directory)))(),
    boolToFutureOrOfDirectory: () => (T$0.boolToFutureOrOfDirectory = dart.constFn(dart.fnType(T$0.FutureOrOfDirectory(), [core.bool])))(),
    dynamicTo_Directory: () => (T$0.dynamicTo_Directory = dart.constFn(dart.fnType(io._Directory, [dart.dynamic])))(),
    dynamicToDirectory: () => (T$0.dynamicToDirectory = dart.constFn(dart.fnType(io.Directory, [dart.dynamic])))(),
    JSArrayOfFileSystemEntity: () => (T$0.JSArrayOfFileSystemEntity = dart.constFn(_interceptors.JSArray$(io.FileSystemEntity)))(),
    FutureOrOfString: () => (T$0.FutureOrOfString = dart.constFn(async.FutureOr$(core.String)))(),
    dynamicToFutureOrOfString: () => (T$0.dynamicToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [dart.dynamic])))(),
    dynamicToFutureOrOfbool: () => (T$0.dynamicToFutureOrOfbool = dart.constFn(dart.fnType(T$.FutureOrOfbool(), [dart.dynamic])))(),
    FileSystemEntityTypeTobool: () => (T$0.FileSystemEntityTypeTobool = dart.constFn(dart.fnType(core.bool, [io.FileSystemEntityType])))(),
    dynamicToFileSystemEntityType: () => (T$0.dynamicToFileSystemEntityType = dart.constFn(dart.fnType(io.FileSystemEntityType, [dart.dynamic])))(),
    StreamControllerOfFileSystemEntity: () => (T$0.StreamControllerOfFileSystemEntity = dart.constFn(async.StreamController$(io.FileSystemEntity)))(),
    StreamControllerOfUint8List: () => (T$0.StreamControllerOfUint8List = dart.constFn(async.StreamController$(typed_data.Uint8List)))(),
    VoidToFuture: () => (T$0.VoidToFuture = dart.constFn(dart.fnType(async.Future, [])))(),
    Uint8ListToNull: () => (T$0.Uint8ListToNull = dart.constFn(dart.fnType(core.Null, [typed_data.Uint8List])))(),
    RandomAccessFileTovoid: () => (T$0.RandomAccessFileTovoid = dart.constFn(dart.fnType(dart.void, [io.RandomAccessFile])))(),
    FutureOfRandomAccessFile: () => (T$0.FutureOfRandomAccessFile = dart.constFn(async.Future$(io.RandomAccessFile)))(),
    FileN: () => (T$0.FileN = dart.constFn(dart.nullable(io.File)))(),
    CompleterOfFileN: () => (T$0.CompleterOfFileN = dart.constFn(async.Completer$(T$0.FileN())))(),
    StreamSubscriptionOfListOfint: () => (T$0.StreamSubscriptionOfListOfint = dart.constFn(async.StreamSubscription$(T$0.ListOfint())))(),
    VoidToStreamSubscriptionOfListOfint: () => (T$0.VoidToStreamSubscriptionOfListOfint = dart.constFn(dart.fnType(T$0.StreamSubscriptionOfListOfint(), [])))(),
    StreamSubscriptionOfListOfintTodynamic: () => (T$0.StreamSubscriptionOfListOfintTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.StreamSubscriptionOfListOfint()])))(),
    dynamicAndStackTraceTovoid: () => (T$0.dynamicAndStackTraceTovoid = dart.constFn(dart.fnType(dart.void, [dart.dynamic, core.StackTrace])))(),
    ListOfintTovoid: () => (T$0.ListOfintTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ListOfint()])))(),
    RandomAccessFileToNull: () => (T$0.RandomAccessFileToNull = dart.constFn(dart.fnType(core.Null, [io.RandomAccessFile])))(),
    RandomAccessFileToFutureOfvoid: () => (T$0.RandomAccessFileToFutureOfvoid = dart.constFn(dart.fnType(T$.FutureOfvoid(), [io.RandomAccessFile])))(),
    voidToFileN: () => (T$0.voidToFileN = dart.constFn(dart.fnType(T$0.FileN(), [dart.void])))(),
    DirectoryN: () => (T$0.DirectoryN = dart.constFn(dart.nullable(io.Directory)))(),
    DirectoryNToFuture: () => (T$0.DirectoryNToFuture = dart.constFn(dart.fnType(async.Future, [T$0.DirectoryN()])))(),
    dynamicTo_File: () => (T$0.dynamicTo_File = dart.constFn(dart.fnType(io._File, [dart.dynamic])))(),
    FileSystemEntityTo_File: () => (T$0.FileSystemEntityTo_File = dart.constFn(dart.fnType(io._File, [io.FileSystemEntity])))(),
    dynamicToFile: () => (T$0.dynamicToFile = dart.constFn(dart.fnType(io.File, [dart.dynamic])))(),
    dynamicTo_RandomAccessFile: () => (T$0.dynamicTo_RandomAccessFile = dart.constFn(dart.fnType(io._RandomAccessFile, [dart.dynamic])))(),
    FutureOrOfint: () => (T$0.FutureOrOfint = dart.constFn(async.FutureOr$(core.int)))(),
    dynamicToFutureOrOfint: () => (T$0.dynamicToFutureOrOfint = dart.constFn(dart.fnType(T$0.FutureOrOfint(), [dart.dynamic])))(),
    dynamicToDateTime: () => (T$0.dynamicToDateTime = dart.constFn(dart.fnType(core.DateTime, [dart.dynamic])))(),
    CompleterOfUint8List: () => (T$0.CompleterOfUint8List = dart.constFn(async.Completer$(typed_data.Uint8List)))(),
    FutureOfUint8List: () => (T$0.FutureOfUint8List = dart.constFn(async.Future$(typed_data.Uint8List)))(),
    RandomAccessFileToFutureOfUint8List: () => (T$0.RandomAccessFileToFutureOfUint8List = dart.constFn(dart.fnType(T$0.FutureOfUint8List(), [io.RandomAccessFile])))(),
    intToFutureOfUint8List: () => (T$0.intToFutureOfUint8List = dart.constFn(dart.fnType(T$0.FutureOfUint8List(), [core.int])))(),
    FutureOfString: () => (T$0.FutureOfString = dart.constFn(async.Future$(core.String)))(),
    Uint8ListToFutureOrOfString: () => (T$0.Uint8ListToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [typed_data.Uint8List])))(),
    RandomAccessFileTo_File: () => (T$0.RandomAccessFileTo_File = dart.constFn(dart.fnType(io._File, [io.RandomAccessFile])))(),
    FutureOrOfFile: () => (T$0.FutureOrOfFile = dart.constFn(async.FutureOr$(io.File)))(),
    RandomAccessFileToFutureOrOfFile: () => (T$0.RandomAccessFileToFutureOrOfFile = dart.constFn(dart.fnType(T$0.FutureOrOfFile(), [io.RandomAccessFile])))(),
    FutureOfFile: () => (T$0.FutureOfFile = dart.constFn(async.Future$(io.File)))(),
    RandomAccessFileToFutureOfFile: () => (T$0.RandomAccessFileToFutureOfFile = dart.constFn(dart.fnType(T$0.FutureOfFile(), [io.RandomAccessFile])))(),
    dynamicAnddynamicToFutureOfServiceExtensionResponse: () => (T$0.dynamicAnddynamicToFutureOfServiceExtensionResponse = dart.constFn(dart.fnType(T$0.FutureOfServiceExtensionResponse(), [dart.dynamic, dart.dynamic])))(),
    dynamicToUint8List: () => (T$0.dynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic])))(),
    FutureOfint: () => (T$0.FutureOfint = dart.constFn(async.Future$(core.int)))(),
    dynamicToint: () => (T$0.dynamicToint = dart.constFn(dart.fnType(core.int, [dart.dynamic])))(),
    FileSystemEntityTypeL: () => (T$0.FileSystemEntityTypeL = dart.constFn(dart.legacy(io.FileSystemEntityType)))(),
    dynamicToFileStat: () => (T$0.dynamicToFileStat = dart.constFn(dart.fnType(io.FileStat, [dart.dynamic])))(),
    ListOfMapOfString$dynamic: () => (T$0.ListOfMapOfString$dynamic = dart.constFn(core.List$(T$0.MapOfString$dynamic())))(),
    _FileResourceInfoToMapOfString$dynamic: () => (T$0._FileResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._FileResourceInfo])))(),
    IdentityMapOfint$_FileResourceInfo: () => (T$0.IdentityMapOfint$_FileResourceInfo = dart.constFn(_js_helper.IdentityMap$(core.int, io._FileResourceInfo)))(),
    _SpawnedProcessResourceInfoToMapOfString$dynamic: () => (T$0._SpawnedProcessResourceInfoToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._SpawnedProcessResourceInfo])))(),
    LinkedMapOfint$_SpawnedProcessResourceInfo: () => (T$0.LinkedMapOfint$_SpawnedProcessResourceInfo = dart.constFn(_js_helper.LinkedMap$(core.int, io._SpawnedProcessResourceInfo)))(),
    dynamicTo_Link: () => (T$0.dynamicTo_Link = dart.constFn(dart.fnType(io._Link, [dart.dynamic])))(),
    FutureOfLink: () => (T$0.FutureOfLink = dart.constFn(async.Future$(io.Link)))(),
    FileSystemEntityToFutureOfLink: () => (T$0.FileSystemEntityToFutureOfLink = dart.constFn(dart.fnType(T$0.FutureOfLink(), [io.FileSystemEntity])))(),
    FileSystemEntityTo_Link: () => (T$0.FileSystemEntityTo_Link = dart.constFn(dart.fnType(io._Link, [io.FileSystemEntity])))(),
    dynamicToLink: () => (T$0.dynamicToLink = dart.constFn(dart.fnType(io.Link, [dart.dynamic])))(),
    _SocketStatisticToMapOfString$dynamic: () => (T$0._SocketStatisticToMapOfString$dynamic = dart.constFn(dart.fnType(T$0.MapOfString$dynamic(), [io._SocketStatistic])))(),
    IdentityMapOfint$_SocketStatistic: () => (T$0.IdentityMapOfint$_SocketStatistic = dart.constFn(_js_helper.IdentityMap$(core.int, io._SocketStatistic)))(),
    _SocketProfileTypeL: () => (T$0._SocketProfileTypeL = dart.constFn(dart.legacy(io._SocketProfileType)))(),
    IOOverridesN: () => (T$0.IOOverridesN = dart.constFn(dart.nullable(io.IOOverrides)))(),
    _CaseInsensitiveStringMapOfString: () => (T$0._CaseInsensitiveStringMapOfString = dart.constFn(io._CaseInsensitiveStringMap$(core.String)))(),
    LinkedMapOfString$String: () => (T$0.LinkedMapOfString$String = dart.constFn(_js_helper.LinkedMap$(core.String, core.String)))(),
    UnmodifiableMapViewOfString$String: () => (T$0.UnmodifiableMapViewOfString$String = dart.constFn(collection.UnmodifiableMapView$(core.String, core.String)))(),
    ProcessStartModeL: () => (T$0.ProcessStartModeL = dart.constFn(dart.legacy(io.ProcessStartMode)))(),
    RawSecureServerSocketToSecureServerSocket: () => (T$0.RawSecureServerSocketToSecureServerSocket = dart.constFn(dart.fnType(io.SecureServerSocket, [io.RawSecureServerSocket])))(),
    RawSecureSocketToSecureSocket: () => (T$0.RawSecureSocketToSecureSocket = dart.constFn(dart.fnType(io.SecureSocket, [io.RawSecureSocket])))(),
    ConnectionTaskOfSecureSocket: () => (T$0.ConnectionTaskOfSecureSocket = dart.constFn(io.ConnectionTask$(io.SecureSocket)))(),
    ConnectionTaskOfRawSecureSocket: () => (T$0.ConnectionTaskOfRawSecureSocket = dart.constFn(io.ConnectionTask$(io.RawSecureSocket)))(),
    ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket: () => (T$0.ConnectionTaskOfRawSecureSocketToConnectionTaskOfSecureSocket = dart.constFn(dart.fnType(T$0.ConnectionTaskOfSecureSocket(), [T$0.ConnectionTaskOfRawSecureSocket()])))(),
    StreamSubscriptionOfRawSocketEvent: () => (T$0.StreamSubscriptionOfRawSocketEvent = dart.constFn(async.StreamSubscription$(io.RawSocketEvent)))(),
    StreamSubscriptionNOfRawSocketEvent: () => (T$0.StreamSubscriptionNOfRawSocketEvent = dart.constFn(dart.nullable(T$0.StreamSubscriptionOfRawSocketEvent())))(),
    FutureOfRawSecureSocket: () => (T$0.FutureOfRawSecureSocket = dart.constFn(async.Future$(io.RawSecureSocket)))(),
    dynamicToFutureOfRawSecureSocket: () => (T$0.dynamicToFutureOfRawSecureSocket = dart.constFn(dart.fnType(T$0.FutureOfRawSecureSocket(), [dart.dynamic])))(),
    StreamControllerOfRawSecureSocket: () => (T$0.StreamControllerOfRawSecureSocket = dart.constFn(async.StreamController$(io.RawSecureSocket)))(),
    RawServerSocketToRawSecureServerSocket: () => (T$0.RawServerSocketToRawSecureServerSocket = dart.constFn(dart.fnType(io.RawSecureServerSocket, [io.RawServerSocket])))(),
    RawSecureSocketToNull: () => (T$0.RawSecureSocketToNull = dart.constFn(dart.fnType(core.Null, [io.RawSecureSocket])))(),
    RawSocketToFutureOfRawSecureSocket: () => (T$0.RawSocketToFutureOfRawSecureSocket = dart.constFn(dart.fnType(T$0.FutureOfRawSecureSocket(), [io.RawSocket])))(),
    ConnectionTaskOfRawSocket: () => (T$0.ConnectionTaskOfRawSocket = dart.constFn(io.ConnectionTask$(io.RawSocket)))(),
    ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket: () => (T$0.ConnectionTaskOfRawSocketToConnectionTaskOfRawSecureSocket = dart.constFn(dart.fnType(T$0.ConnectionTaskOfRawSecureSocket(), [T$0.ConnectionTaskOfRawSocket()])))(),
    CompleterOf_RawSecureSocket: () => (T$0.CompleterOf_RawSecureSocket = dart.constFn(async.Completer$(io._RawSecureSocket)))(),
    StreamControllerOfRawSocketEvent: () => (T$0.StreamControllerOfRawSocketEvent = dart.constFn(async.StreamController$(io.RawSocketEvent)))(),
    CompleterOfRawSecureSocket: () => (T$0.CompleterOfRawSecureSocket = dart.constFn(async.Completer$(io.RawSecureSocket)))(),
    intToint: () => (T$0.intToint = dart.constFn(dart.fnType(core.int, [core.int])))(),
    ListOfintAndStringTovoid: () => (T$0.ListOfintAndStringTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ListOfint(), core.String])))(),
    _RawSocketOptionsL: () => (T$0._RawSocketOptionsL = dart.constFn(dart.legacy(io._RawSocketOptions)))(),
    JSArrayOf_DomainNetworkPolicy: () => (T$0.JSArrayOf_DomainNetworkPolicy = dart.constFn(_interceptors.JSArray$(io._DomainNetworkPolicy)))(),
    StdoutN: () => (T$0.StdoutN = dart.constFn(dart.nullable(io.Stdout)))(),
    Fn__ToR: () => (T$0.Fn__ToR = dart.constFn(dart.gFnType(R => [R, [dart.fnType(R, [])], {onError: T$.FunctionN(), zoneSpecification: T$.ZoneSpecificationN(), zoneValues: T$.MapNOfObjectN$ObjectN()}, {}], R => [T$.ObjectN()])))(),
    LinkedMapOfSymbol$dynamic: () => (T$0.LinkedMapOfSymbol$dynamic = dart.constFn(_js_helper.LinkedMap$(core.Symbol, dart.dynamic)))(),
    ObjectToObject: () => (T$0.ObjectToObject = dart.constFn(dart.fnType(core.Object, [core.Object])))(),
    ObjectTo_DartObject: () => (T$0.ObjectTo_DartObject = dart.constFn(dart.fnType(js._DartObject, [core.Object])))(),
    ObjectToJsObject: () => (T$0.ObjectToJsObject = dart.constFn(dart.fnType(js.JsObject, [core.Object])))(),
    PointOfnum: () => (T$0.PointOfnum = dart.constFn(math.Point$(core.num)))(),
    RectangleOfnum: () => (T$0.RectangleOfnum = dart.constFn(math.Rectangle$(core.num)))(),
    EventL: () => (T$0.EventL = dart.constFn(dart.legacy(html$.Event)))(),
    EventStreamProviderOfEventL: () => (T$0.EventStreamProviderOfEventL = dart.constFn(html$.EventStreamProvider$(T$0.EventL())))(),
    VersionChangeEventL: () => (T$0.VersionChangeEventL = dart.constFn(dart.legacy(indexed_db.VersionChangeEvent)))(),
    EventStreamProviderOfVersionChangeEventL: () => (T$0.EventStreamProviderOfVersionChangeEventL = dart.constFn(html$.EventStreamProvider$(T$0.VersionChangeEventL())))(),
    FutureOfDatabase: () => (T$0.FutureOfDatabase = dart.constFn(async.Future$(indexed_db.Database)))(),
    CompleterOfIdbFactory: () => (T$0.CompleterOfIdbFactory = dart.constFn(async.Completer$(indexed_db.IdbFactory)))(),
    EventTovoid: () => (T$0.EventTovoid = dart.constFn(dart.fnType(dart.void, [html$.Event])))(),
    FutureOfIdbFactory: () => (T$0.FutureOfIdbFactory = dart.constFn(async.Future$(indexed_db.IdbFactory)))(),
    ObserverChangesTovoid: () => (T$0.ObserverChangesTovoid = dart.constFn(dart.fnType(dart.void, [indexed_db.ObserverChanges])))(),
    CompleterOfDatabase: () => (T$0.CompleterOfDatabase = dart.constFn(async.Completer$(indexed_db.Database)))(),
    EventToNull: () => (T$0.EventToNull = dart.constFn(dart.fnType(core.Null, [html$.Event])))(),
    ElementN: () => (T$0.ElementN = dart.constFn(dart.nullable(html$.Element)))(),
    JSArrayOfEventTarget: () => (T$0.JSArrayOfEventTarget = dart.constFn(_interceptors.JSArray$(html$.EventTarget)))(),
    NodeTobool: () => (T$0.NodeTobool = dart.constFn(dart.fnType(core.bool, [html$.Node])))(),
    CompleterOfScrollState: () => (T$0.CompleterOfScrollState = dart.constFn(async.Completer$(html$.ScrollState)))(),
    ScrollStateTovoid: () => (T$0.ScrollStateTovoid = dart.constFn(dart.fnType(dart.void, [html$.ScrollState])))(),
    MapOfString$dynamicTobool: () => (T$0.MapOfString$dynamicTobool = dart.constFn(dart.fnType(core.bool, [T$0.MapOfString$dynamic()])))(),
    MapN: () => (T$0.MapN = dart.constFn(dart.nullable(core.Map)))(),
    ObjectNToNvoid: () => (T$0.ObjectNToNvoid = dart.constFn(dart.nullable(T$.ObjectNTovoid())))(),
    MapNAndFnTodynamic: () => (T$0.MapNAndFnTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$0.MapN()], [T$0.ObjectNToNvoid()])))(),
    WheelEventL: () => (T$0.WheelEventL = dart.constFn(dart.legacy(html$.WheelEvent)))(),
    _CustomEventStreamProviderOfWheelEventL: () => (T$0._CustomEventStreamProviderOfWheelEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.WheelEventL())))(),
    EventTargetToString: () => (T$0.EventTargetToString = dart.constFn(dart.fnType(core.String, [html$.EventTarget])))(),
    TransitionEventL: () => (T$0.TransitionEventL = dart.constFn(dart.legacy(html$.TransitionEvent)))(),
    _CustomEventStreamProviderOfTransitionEventL: () => (T$0._CustomEventStreamProviderOfTransitionEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.TransitionEventL())))(),
    MouseEventL: () => (T$0.MouseEventL = dart.constFn(dart.legacy(html$.MouseEvent)))(),
    EventStreamProviderOfMouseEventL: () => (T$0.EventStreamProviderOfMouseEventL = dart.constFn(html$.EventStreamProvider$(T$0.MouseEventL())))(),
    ClipboardEventL: () => (T$0.ClipboardEventL = dart.constFn(dart.legacy(html$.ClipboardEvent)))(),
    EventStreamProviderOfClipboardEventL: () => (T$0.EventStreamProviderOfClipboardEventL = dart.constFn(html$.EventStreamProvider$(T$0.ClipboardEventL())))(),
    KeyboardEventL: () => (T$0.KeyboardEventL = dart.constFn(dart.legacy(html$.KeyboardEvent)))(),
    EventStreamProviderOfKeyboardEventL: () => (T$0.EventStreamProviderOfKeyboardEventL = dart.constFn(html$.EventStreamProvider$(T$0.KeyboardEventL())))(),
    TouchEventL: () => (T$0.TouchEventL = dart.constFn(dart.legacy(html$.TouchEvent)))(),
    EventStreamProviderOfTouchEventL: () => (T$0.EventStreamProviderOfTouchEventL = dart.constFn(html$.EventStreamProvider$(T$0.TouchEventL())))(),
    EventStreamProviderOfWheelEventL: () => (T$0.EventStreamProviderOfWheelEventL = dart.constFn(html$.EventStreamProvider$(T$0.WheelEventL())))(),
    ProgressEventL: () => (T$0.ProgressEventL = dart.constFn(dart.legacy(html$.ProgressEvent)))(),
    EventStreamProviderOfProgressEventL: () => (T$0.EventStreamProviderOfProgressEventL = dart.constFn(html$.EventStreamProvider$(T$0.ProgressEventL())))(),
    MessageEventL: () => (T$0.MessageEventL = dart.constFn(dart.legacy(html$.MessageEvent)))(),
    EventStreamProviderOfMessageEventL: () => (T$0.EventStreamProviderOfMessageEventL = dart.constFn(html$.EventStreamProvider$(T$0.MessageEventL())))(),
    PopStateEventL: () => (T$0.PopStateEventL = dart.constFn(dart.legacy(html$.PopStateEvent)))(),
    EventStreamProviderOfPopStateEventL: () => (T$0.EventStreamProviderOfPopStateEventL = dart.constFn(html$.EventStreamProvider$(T$0.PopStateEventL())))(),
    StorageEventL: () => (T$0.StorageEventL = dart.constFn(dart.legacy(html$.StorageEvent)))(),
    EventStreamProviderOfStorageEventL: () => (T$0.EventStreamProviderOfStorageEventL = dart.constFn(html$.EventStreamProvider$(T$0.StorageEventL())))(),
    CompleterOfBlob: () => (T$0.CompleterOfBlob = dart.constFn(async.Completer$(html$.Blob)))(),
    BlobN: () => (T$0.BlobN = dart.constFn(dart.nullable(html$.Blob)))(),
    BlobNTovoid: () => (T$0.BlobNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.BlobN()])))(),
    ContextEventL: () => (T$0.ContextEventL = dart.constFn(dart.legacy(web_gl.ContextEvent)))(),
    EventStreamProviderOfContextEventL: () => (T$0.EventStreamProviderOfContextEventL = dart.constFn(html$.EventStreamProvider$(T$0.ContextEventL())))(),
    JSArrayOfnum: () => (T$0.JSArrayOfnum = dart.constFn(_interceptors.JSArray$(core.num)))(),
    dynamicToCssStyleDeclaration: () => (T$0.dynamicToCssStyleDeclaration = dart.constFn(dart.fnType(html$.CssStyleDeclaration, [dart.dynamic])))(),
    CssStyleDeclarationTovoid: () => (T$0.CssStyleDeclarationTovoid = dart.constFn(dart.fnType(dart.void, [html$.CssStyleDeclaration])))(),
    ListOfCssTransformComponent: () => (T$0.ListOfCssTransformComponent = dart.constFn(core.List$(html$.CssTransformComponent)))(),
    CompleterOfEntry: () => (T$0.CompleterOfEntry = dart.constFn(async.Completer$(html$.Entry)))(),
    EntryTovoid: () => (T$0.EntryTovoid = dart.constFn(dart.fnType(dart.void, [html$.Entry])))(),
    DomExceptionTovoid: () => (T$0.DomExceptionTovoid = dart.constFn(dart.fnType(dart.void, [html$.DomException])))(),
    CompleterOfMetadata: () => (T$0.CompleterOfMetadata = dart.constFn(async.Completer$(html$.Metadata)))(),
    MetadataTovoid: () => (T$0.MetadataTovoid = dart.constFn(dart.fnType(dart.void, [html$.Metadata])))(),
    ListOfEntry: () => (T$0.ListOfEntry = dart.constFn(core.List$(html$.Entry)))(),
    CompleterOfListOfEntry: () => (T$0.CompleterOfListOfEntry = dart.constFn(async.Completer$(T$0.ListOfEntry())))(),
    ListTovoid: () => (T$0.ListTovoid = dart.constFn(dart.fnType(dart.void, [core.List])))(),
    SecurityPolicyViolationEventL: () => (T$0.SecurityPolicyViolationEventL = dart.constFn(dart.legacy(html$.SecurityPolicyViolationEvent)))(),
    EventStreamProviderOfSecurityPolicyViolationEventL: () => (T$0.EventStreamProviderOfSecurityPolicyViolationEventL = dart.constFn(html$.EventStreamProvider$(T$0.SecurityPolicyViolationEventL())))(),
    IterableOfElement: () => (T$0.IterableOfElement = dart.constFn(core.Iterable$(html$.Element)))(),
    ListOfElement: () => (T$0.ListOfElement = dart.constFn(core.List$(html$.Element)))(),
    ElementTobool: () => (T$0.ElementTobool = dart.constFn(dart.fnType(core.bool, [html$.Element])))(),
    _EventStreamOfEvent: () => (T$0._EventStreamOfEvent = dart.constFn(html$._EventStream$(html$.Event)))(),
    _ElementEventStreamImplOfEvent: () => (T$0._ElementEventStreamImplOfEvent = dart.constFn(html$._ElementEventStreamImpl$(html$.Event)))(),
    CompleterOfFileWriter: () => (T$0.CompleterOfFileWriter = dart.constFn(async.Completer$(html$.FileWriter)))(),
    FileWriterTovoid: () => (T$0.FileWriterTovoid = dart.constFn(dart.fnType(dart.void, [html$.FileWriter])))(),
    CompleterOfFile: () => (T$0.CompleterOfFile = dart.constFn(async.Completer$(html$.File)))(),
    FileN$1: () => (T$0.FileN$1 = dart.constFn(dart.nullable(html$.File)))(),
    FileNTovoid: () => (T$0.FileNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.FileN$1()])))(),
    FontFaceSetLoadEventL: () => (T$0.FontFaceSetLoadEventL = dart.constFn(dart.legacy(html$.FontFaceSetLoadEvent)))(),
    EventStreamProviderOfFontFaceSetLoadEventL: () => (T$0.EventStreamProviderOfFontFaceSetLoadEventL = dart.constFn(html$.EventStreamProvider$(T$0.FontFaceSetLoadEventL())))(),
    CompleterOfGeoposition: () => (T$0.CompleterOfGeoposition = dart.constFn(async.Completer$(html$.Geoposition)))(),
    GeopositionTovoid: () => (T$0.GeopositionTovoid = dart.constFn(dart.fnType(dart.void, [html$.Geoposition])))(),
    PositionErrorTovoid: () => (T$0.PositionErrorTovoid = dart.constFn(dart.fnType(dart.void, [html$.PositionError])))(),
    StreamControllerOfGeoposition: () => (T$0.StreamControllerOfGeoposition = dart.constFn(async.StreamController$(html$.Geoposition)))(),
    _CustomEventStreamProviderOfEventL: () => (T$0._CustomEventStreamProviderOfEventL = dart.constFn(html$._CustomEventStreamProvider$(T$0.EventL())))(),
    HttpRequestToString: () => (T$0.HttpRequestToString = dart.constFn(dart.fnType(core.String, [html$.HttpRequest])))(),
    StringAndStringTovoid: () => (T$0.StringAndStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.String])))(),
    CompleterOfHttpRequest: () => (T$0.CompleterOfHttpRequest = dart.constFn(async.Completer$(html$.HttpRequest)))(),
    ProgressEventTovoid: () => (T$0.ProgressEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.ProgressEvent])))(),
    CompleterOfString: () => (T$0.CompleterOfString = dart.constFn(async.Completer$(core.String)))(),
    FutureOrNOfString: () => (T$0.FutureOrNOfString = dart.constFn(dart.nullable(T$0.FutureOrOfString())))(),
    ListAndIntersectionObserverTovoid: () => (T$0.ListAndIntersectionObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.IntersectionObserver])))(),
    ListOfMediaStreamTrack: () => (T$0.ListOfMediaStreamTrack = dart.constFn(core.List$(html$.MediaStreamTrack)))(),
    MessagePortL: () => (T$0.MessagePortL = dart.constFn(dart.legacy(html$.MessagePort)))(),
    MidiMessageEventL: () => (T$0.MidiMessageEventL = dart.constFn(dart.legacy(html$.MidiMessageEvent)))(),
    EventStreamProviderOfMidiMessageEventL: () => (T$0.EventStreamProviderOfMidiMessageEventL = dart.constFn(html$.EventStreamProvider$(T$0.MidiMessageEventL())))(),
    MapTobool: () => (T$0.MapTobool = dart.constFn(dart.fnType(core.bool, [core.Map])))(),
    JSArrayOfMap: () => (T$0.JSArrayOfMap = dart.constFn(_interceptors.JSArray$(core.Map)))(),
    ListAndMutationObserverTovoid: () => (T$0.ListAndMutationObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.MutationObserver])))(),
    ListAndMutationObserverToNvoid: () => (T$0.ListAndMutationObserverToNvoid = dart.constFn(dart.nullable(T$0.ListAndMutationObserverTovoid())))(),
    boolL: () => (T$0.boolL = dart.constFn(dart.legacy(core.bool)))(),
    CompleterOfMediaStream: () => (T$0.CompleterOfMediaStream = dart.constFn(async.Completer$(html$.MediaStream)))(),
    MediaStreamTovoid: () => (T$0.MediaStreamTovoid = dart.constFn(dart.fnType(dart.void, [html$.MediaStream])))(),
    NavigatorUserMediaErrorTovoid: () => (T$0.NavigatorUserMediaErrorTovoid = dart.constFn(dart.fnType(dart.void, [html$.NavigatorUserMediaError])))(),
    IterableOfNode: () => (T$0.IterableOfNode = dart.constFn(core.Iterable$(html$.Node)))(),
    NodeN$1: () => (T$0.NodeN$1 = dart.constFn(dart.nullable(html$.Node)))(),
    PerformanceObserverEntryListAndPerformanceObserverTovoid: () => (T$0.PerformanceObserverEntryListAndPerformanceObserverTovoid = dart.constFn(dart.fnType(dart.void, [html$.PerformanceObserverEntryList, html$.PerformanceObserver])))(),
    ListAndReportingObserverTovoid: () => (T$0.ListAndReportingObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.ReportingObserver])))(),
    ListAndResizeObserverTovoid: () => (T$0.ListAndResizeObserverTovoid = dart.constFn(dart.fnType(dart.void, [core.List, html$.ResizeObserver])))(),
    RtcDtmfToneChangeEventL: () => (T$0.RtcDtmfToneChangeEventL = dart.constFn(dart.legacy(html$.RtcDtmfToneChangeEvent)))(),
    EventStreamProviderOfRtcDtmfToneChangeEventL: () => (T$0.EventStreamProviderOfRtcDtmfToneChangeEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcDtmfToneChangeEventL())))(),
    JSArrayOfMapOfString$String: () => (T$0.JSArrayOfMapOfString$String = dart.constFn(_interceptors.JSArray$(T$0.MapOfString$String())))(),
    CompleterOfRtcStatsResponse: () => (T$0.CompleterOfRtcStatsResponse = dart.constFn(async.Completer$(html$.RtcStatsResponse)))(),
    RtcStatsResponseTovoid: () => (T$0.RtcStatsResponseTovoid = dart.constFn(dart.fnType(dart.void, [html$.RtcStatsResponse])))(),
    MediaStreamEventL: () => (T$0.MediaStreamEventL = dart.constFn(dart.legacy(html$.MediaStreamEvent)))(),
    EventStreamProviderOfMediaStreamEventL: () => (T$0.EventStreamProviderOfMediaStreamEventL = dart.constFn(html$.EventStreamProvider$(T$0.MediaStreamEventL())))(),
    RtcDataChannelEventL: () => (T$0.RtcDataChannelEventL = dart.constFn(dart.legacy(html$.RtcDataChannelEvent)))(),
    EventStreamProviderOfRtcDataChannelEventL: () => (T$0.EventStreamProviderOfRtcDataChannelEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcDataChannelEventL())))(),
    RtcPeerConnectionIceEventL: () => (T$0.RtcPeerConnectionIceEventL = dart.constFn(dart.legacy(html$.RtcPeerConnectionIceEvent)))(),
    EventStreamProviderOfRtcPeerConnectionIceEventL: () => (T$0.EventStreamProviderOfRtcPeerConnectionIceEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcPeerConnectionIceEventL())))(),
    RtcTrackEventL: () => (T$0.RtcTrackEventL = dart.constFn(dart.legacy(html$.RtcTrackEvent)))(),
    EventStreamProviderOfRtcTrackEventL: () => (T$0.EventStreamProviderOfRtcTrackEventL = dart.constFn(html$.EventStreamProvider$(T$0.RtcTrackEventL())))(),
    UnmodifiableListViewOfOptionElement: () => (T$0.UnmodifiableListViewOfOptionElement = dart.constFn(collection.UnmodifiableListView$(html$.OptionElement)))(),
    IterableOfOptionElement: () => (T$0.IterableOfOptionElement = dart.constFn(core.Iterable$(html$.OptionElement)))(),
    OptionElementTobool: () => (T$0.OptionElementTobool = dart.constFn(dart.fnType(core.bool, [html$.OptionElement])))(),
    JSArrayOfOptionElement: () => (T$0.JSArrayOfOptionElement = dart.constFn(_interceptors.JSArray$(html$.OptionElement)))(),
    ForeignFetchEventL: () => (T$0.ForeignFetchEventL = dart.constFn(dart.legacy(html$.ForeignFetchEvent)))(),
    EventStreamProviderOfForeignFetchEventL: () => (T$0.EventStreamProviderOfForeignFetchEventL = dart.constFn(html$.EventStreamProvider$(T$0.ForeignFetchEventL())))(),
    SpeechRecognitionErrorL: () => (T$0.SpeechRecognitionErrorL = dart.constFn(dart.legacy(html$.SpeechRecognitionError)))(),
    EventStreamProviderOfSpeechRecognitionErrorL: () => (T$0.EventStreamProviderOfSpeechRecognitionErrorL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechRecognitionErrorL())))(),
    SpeechRecognitionEventL: () => (T$0.SpeechRecognitionEventL = dart.constFn(dart.legacy(html$.SpeechRecognitionEvent)))(),
    EventStreamProviderOfSpeechRecognitionEventL: () => (T$0.EventStreamProviderOfSpeechRecognitionEventL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechRecognitionEventL())))(),
    SpeechSynthesisEventL: () => (T$0.SpeechSynthesisEventL = dart.constFn(dart.legacy(html$.SpeechSynthesisEvent)))(),
    EventStreamProviderOfSpeechSynthesisEventL: () => (T$0.EventStreamProviderOfSpeechSynthesisEventL = dart.constFn(html$.EventStreamProvider$(T$0.SpeechSynthesisEventL())))(),
    _WrappedListOfTableSectionElement: () => (T$0._WrappedListOfTableSectionElement = dart.constFn(html$._WrappedList$(html$.TableSectionElement)))(),
    _WrappedListOfTableRowElement: () => (T$0._WrappedListOfTableRowElement = dart.constFn(html$._WrappedList$(html$.TableRowElement)))(),
    _WrappedListOfTableCellElement: () => (T$0._WrappedListOfTableCellElement = dart.constFn(html$._WrappedList$(html$.TableCellElement)))(),
    TrackEventL: () => (T$0.TrackEventL = dart.constFn(dart.legacy(html$.TrackEvent)))(),
    EventStreamProviderOfTrackEventL: () => (T$0.EventStreamProviderOfTrackEventL = dart.constFn(html$.EventStreamProvider$(T$0.TrackEventL())))(),
    CloseEventL: () => (T$0.CloseEventL = dart.constFn(dart.legacy(html$.CloseEvent)))(),
    EventStreamProviderOfCloseEventL: () => (T$0.EventStreamProviderOfCloseEventL = dart.constFn(html$.EventStreamProvider$(T$0.CloseEventL())))(),
    CompleterOfnum: () => (T$0.CompleterOfnum = dart.constFn(async.Completer$(core.num)))(),
    numTovoid: () => (T$0.numTovoid = dart.constFn(dart.fnType(dart.void, [core.num])))(),
    IdleDeadlineTovoid: () => (T$0.IdleDeadlineTovoid = dart.constFn(dart.fnType(dart.void, [html$.IdleDeadline])))(),
    CompleterOfFileSystem: () => (T$0.CompleterOfFileSystem = dart.constFn(async.Completer$(html$.FileSystem)))(),
    FileSystemTovoid: () => (T$0.FileSystemTovoid = dart.constFn(dart.fnType(dart.void, [html$.FileSystem])))(),
    DeviceMotionEventL: () => (T$0.DeviceMotionEventL = dart.constFn(dart.legacy(html$.DeviceMotionEvent)))(),
    EventStreamProviderOfDeviceMotionEventL: () => (T$0.EventStreamProviderOfDeviceMotionEventL = dart.constFn(html$.EventStreamProvider$(T$0.DeviceMotionEventL())))(),
    DeviceOrientationEventL: () => (T$0.DeviceOrientationEventL = dart.constFn(dart.legacy(html$.DeviceOrientationEvent)))(),
    EventStreamProviderOfDeviceOrientationEventL: () => (T$0.EventStreamProviderOfDeviceOrientationEventL = dart.constFn(html$.EventStreamProvider$(T$0.DeviceOrientationEventL())))(),
    AnimationEventL: () => (T$0.AnimationEventL = dart.constFn(dart.legacy(html$.AnimationEvent)))(),
    EventStreamProviderOfAnimationEventL: () => (T$0.EventStreamProviderOfAnimationEventL = dart.constFn(html$.EventStreamProvider$(T$0.AnimationEventL())))(),
    ListOfNode: () => (T$0.ListOfNode = dart.constFn(core.List$(html$.Node)))(),
    _EventStreamOfBeforeUnloadEvent: () => (T$0._EventStreamOfBeforeUnloadEvent = dart.constFn(html$._EventStream$(html$.BeforeUnloadEvent)))(),
    StreamControllerOfBeforeUnloadEvent: () => (T$0.StreamControllerOfBeforeUnloadEvent = dart.constFn(async.StreamController$(html$.BeforeUnloadEvent)))(),
    BeforeUnloadEventTovoid: () => (T$0.BeforeUnloadEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.BeforeUnloadEvent])))(),
    _ElementEventStreamImplOfBeforeUnloadEvent: () => (T$0._ElementEventStreamImplOfBeforeUnloadEvent = dart.constFn(html$._ElementEventStreamImpl$(html$.BeforeUnloadEvent)))(),
    _ElementListEventStreamImplOfBeforeUnloadEvent: () => (T$0._ElementListEventStreamImplOfBeforeUnloadEvent = dart.constFn(html$._ElementListEventStreamImpl$(html$.BeforeUnloadEvent)))(),
    GamepadN: () => (T$0.GamepadN = dart.constFn(dart.nullable(html$.Gamepad)))(),
    ElementTovoid: () => (T$0.ElementTovoid = dart.constFn(dart.fnType(dart.void, [html$.Element])))(),
    ListOfCssClassSetImpl: () => (T$0.ListOfCssClassSetImpl = dart.constFn(core.List$(html_common.CssClassSetImpl)))(),
    ElementToCssClassSet: () => (T$0.ElementToCssClassSet = dart.constFn(dart.fnType(html$.CssClassSet, [html$.Element])))(),
    _IdentityHashSetOfString: () => (T$0._IdentityHashSetOfString = dart.constFn(collection._IdentityHashSet$(core.String)))(),
    CssClassSetImplTovoid: () => (T$0.CssClassSetImplTovoid = dart.constFn(dart.fnType(dart.void, [html_common.CssClassSetImpl])))(),
    boolAndCssClassSetImplTobool: () => (T$0.boolAndCssClassSetImplTobool = dart.constFn(dart.fnType(core.bool, [core.bool, html_common.CssClassSetImpl])))(),
    StringAndStringToString: () => (T$0.StringAndStringToString = dart.constFn(dart.fnType(core.String, [core.String, core.String])))(),
    SetOfString: () => (T$0.SetOfString = dart.constFn(core.Set$(core.String)))(),
    SetOfStringTobool: () => (T$0.SetOfStringTobool = dart.constFn(dart.fnType(core.bool, [T$0.SetOfString()])))(),
    IterableOfString: () => (T$0.IterableOfString = dart.constFn(core.Iterable$(core.String)))(),
    SetOfStringTovoid: () => (T$0.SetOfStringTovoid = dart.constFn(dart.fnType(dart.void, [T$0.SetOfString()])))(),
    VoidToNString: () => (T$0.VoidToNString = dart.constFn(dart.nullable(T$.VoidToString())))(),
    EventTargetN: () => (T$0.EventTargetN = dart.constFn(dart.nullable(html$.EventTarget)))(),
    ElementAndStringAndString__Tobool: () => (T$0.ElementAndStringAndString__Tobool = dart.constFn(dart.fnType(core.bool, [html$.Element, core.String, core.String, html$._Html5NodeValidator])))(),
    LinkedHashSetOfString: () => (T$0.LinkedHashSetOfString = dart.constFn(collection.LinkedHashSet$(core.String)))(),
    IdentityMapOfString$Function: () => (T$0.IdentityMapOfString$Function = dart.constFn(_js_helper.IdentityMap$(core.String, core.Function)))(),
    JSArrayOfKeyEvent: () => (T$0.JSArrayOfKeyEvent = dart.constFn(_interceptors.JSArray$(html$.KeyEvent)))(),
    KeyEventTobool: () => (T$0.KeyEventTobool = dart.constFn(dart.fnType(core.bool, [html$.KeyEvent])))(),
    JSArrayOfNodeValidator: () => (T$0.JSArrayOfNodeValidator = dart.constFn(_interceptors.JSArray$(html$.NodeValidator)))(),
    NodeValidatorTobool: () => (T$0.NodeValidatorTobool = dart.constFn(dart.fnType(core.bool, [html$.NodeValidator])))(),
    NodeAndNodeToint: () => (T$0.NodeAndNodeToint = dart.constFn(dart.fnType(core.int, [html$.Node, html$.Node])))(),
    NodeAndNodeNTovoid: () => (T$0.NodeAndNodeNTovoid = dart.constFn(dart.fnType(dart.void, [html$.Node, T$0.NodeN$1()])))(),
    MapNOfString$dynamic: () => (T$0.MapNOfString$dynamic = dart.constFn(dart.nullable(T$0.MapOfString$dynamic())))(),
    dynamicToMapNOfString$dynamic: () => (T$0.dynamicToMapNOfString$dynamic = dart.constFn(dart.fnType(T$0.MapNOfString$dynamic(), [dart.dynamic])))(),
    TypeN: () => (T$0.TypeN = dart.constFn(dart.nullable(core.Type)))(),
    dynamicAnddynamicTodynamic: () => (T$0.dynamicAnddynamicTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])))(),
    NodeToElement: () => (T$0.NodeToElement = dart.constFn(dart.fnType(html$.Element, [html$.Node])))(),
    CompleterOfAudioBuffer: () => (T$0.CompleterOfAudioBuffer = dart.constFn(async.Completer$(web_audio.AudioBuffer)))(),
    AudioBufferTovoid: () => (T$0.AudioBufferTovoid = dart.constFn(dart.fnType(dart.void, [web_audio.AudioBuffer])))(),
    AudioProcessingEventL: () => (T$0.AudioProcessingEventL = dart.constFn(dart.legacy(web_audio.AudioProcessingEvent)))(),
    EventStreamProviderOfAudioProcessingEventL: () => (T$0.EventStreamProviderOfAudioProcessingEventL = dart.constFn(html$.EventStreamProvider$(T$0.AudioProcessingEventL())))(),
    TypedDataN: () => (T$0.TypedDataN = dart.constFn(dart.nullable(typed_data.TypedData)))(),
    CompleterOfSqlTransaction: () => (T$0.CompleterOfSqlTransaction = dart.constFn(async.Completer$(web_sql.SqlTransaction)))(),
    SqlTransactionTovoid: () => (T$0.SqlTransactionTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction])))(),
    SqlErrorTovoid: () => (T$0.SqlErrorTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlError])))(),
    CompleterOfSqlResultSet: () => (T$0.CompleterOfSqlResultSet = dart.constFn(async.Completer$(web_sql.SqlResultSet)))(),
    SqlTransactionAndSqlResultSetTovoid: () => (T$0.SqlTransactionAndSqlResultSetTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction, web_sql.SqlResultSet])))(),
    SqlTransactionAndSqlErrorTovoid: () => (T$0.SqlTransactionAndSqlErrorTovoid = dart.constFn(dart.fnType(dart.void, [web_sql.SqlTransaction, web_sql.SqlError])))(),
    intAndintToint: () => (T$0.intAndintToint = dart.constFn(dart.fnType(core.int, [core.int, core.int])))(),
    StringNToint: () => (T$0.StringNToint = dart.constFn(dart.fnType(core.int, [T$.StringN()])))(),
    intToString: () => (T$0.intToString = dart.constFn(dart.fnType(core.String, [core.int])))(),
    SymbolAnddynamicTovoid: () => (T$0.SymbolAnddynamicTovoid = dart.constFn(dart.fnType(dart.void, [core.Symbol, dart.dynamic])))(),
    MapOfSymbol$ObjectN: () => (T$0.MapOfSymbol$ObjectN = dart.constFn(core.Map$(core.Symbol, T$.ObjectN())))(),
    MapOfString$StringAndStringToMapOfString$String: () => (T$0.MapOfString$StringAndStringToMapOfString$String = dart.constFn(dart.fnType(T$0.MapOfString$String(), [T$0.MapOfString$String(), core.String])))(),
    StringAndintTovoid: () => (T$0.StringAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.int])))(),
    StringAnddynamicTovoid$1: () => (T$0.StringAnddynamicTovoid$1 = dart.constFn(dart.fnType(dart.void, [core.String], [dart.dynamic])))(),
    ListOfStringL: () => (T$0.ListOfStringL = dart.constFn(core.List$(T$.StringL())))(),
    ListLOfStringL: () => (T$0.ListLOfStringL = dart.constFn(dart.legacy(T$0.ListOfStringL())))(),
    StringAndListOfStringToListOfString: () => (T$0.StringAndListOfStringToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [core.String, T$.ListOfString()])))(),
    MapOfString$ListOfString: () => (T$0.MapOfString$ListOfString = dart.constFn(core.Map$(core.String, T$.ListOfString())))(),
    StringAndStringNTovoid: () => (T$0.StringAndStringNTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.StringN()])))(),
    IdentityMapOfString$ListOfString: () => (T$0.IdentityMapOfString$ListOfString = dart.constFn(_js_helper.IdentityMap$(core.String, T$.ListOfString())))(),
    VoidToListOfString: () => (T$0.VoidToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [])))(),
    intAndintAndintTovoid: () => (T$0.intAndintAndintTovoid = dart.constFn(dart.fnType(dart.void, [core.int, core.int, core.int])))(),
    _StringSinkConversionSinkOfStringSink: () => (T$0._StringSinkConversionSinkOfStringSink = dart.constFn(convert._StringSinkConversionSink$(core.StringSink)))(),
    ListOfUint8List: () => (T$0.ListOfUint8List = dart.constFn(core.List$(typed_data.Uint8List)))(),
    intToUint8List: () => (T$0.intToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [core.int])))(),
    dynamicAnddynamicToUint8List: () => (T$0.dynamicAnddynamicToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [dart.dynamic, dart.dynamic])))(),
    Uint8ListAndStringAndintTovoid: () => (T$0.Uint8ListAndStringAndintTovoid = dart.constFn(dart.fnType(dart.void, [typed_data.Uint8List, core.String, core.int])))(),
    intToElement: () => (T$0.intToElement = dart.constFn(dart.fnType(html$.Element, [core.int])))(),
    IdentityMapOfString$intToElement: () => (T$0.IdentityMapOfString$intToElement = dart.constFn(_js_helper.IdentityMap$(core.String, T$0.intToElement())))(),
    IdentityMapOfint$Element: () => (T$0.IdentityMapOfint$Element = dart.constFn(_js_helper.IdentityMap$(core.int, html$.Element)))(),
    PointModeL: () => (T$0.PointModeL = dart.constFn(dart.legacy(ui.PointMode)))(),
    ClipOpL: () => (T$0.ClipOpL = dart.constFn(dart.legacy(ui.ClipOp)))(),
    VertexModeL: () => (T$0.VertexModeL = dart.constFn(dart.legacy(ui.VertexMode)))(),
    PathFillTypeL: () => (T$0.PathFillTypeL = dart.constFn(dart.legacy(ui.PathFillType)))(),
    PathOperationL: () => (T$0.PathOperationL = dart.constFn(dart.legacy(ui.PathOperation)))(),
    ByteDataN: () => (T$0.ByteDataN = dart.constFn(dart.nullable(typed_data.ByteData)))(),
    ByteDataNTovoid: () => (T$0.ByteDataNTovoid = dart.constFn(dart.fnType(dart.void, [T$0.ByteDataN()])))(),
    ListQueueOf_StoredMessage: () => (T$0.ListQueueOf_StoredMessage = dart.constFn(collection.ListQueue$(ui._StoredMessage)))(),
    IdentityMapOfString$_Channel: () => (T$0.IdentityMapOfString$_Channel = dart.constFn(_js_helper.IdentityMap$(core.String, ui._Channel)))(),
    VoidTo_Channel: () => (T$0.VoidTo_Channel = dart.constFn(dart.fnType(ui._Channel, [])))(),
    StrokeCapL: () => (T$0.StrokeCapL = dart.constFn(dart.legacy(ui.StrokeCap)))(),
    StrokeJoinL: () => (T$0.StrokeJoinL = dart.constFn(dart.legacy(ui.StrokeJoin)))(),
    PaintingStyleL: () => (T$0.PaintingStyleL = dart.constFn(dart.legacy(ui.PaintingStyle)))(),
    BlendModeL: () => (T$0.BlendModeL = dart.constFn(dart.legacy(ui.BlendMode)))(),
    ClipL: () => (T$0.ClipL = dart.constFn(dart.legacy(ui.Clip)))(),
    BlurStyleL: () => (T$0.BlurStyleL = dart.constFn(dart.legacy(ui.BlurStyle)))(),
    FilterQualityL: () => (T$0.FilterQualityL = dart.constFn(dart.legacy(ui.FilterQuality)))(),
    ImageByteFormatL: () => (T$0.ImageByteFormatL = dart.constFn(dart.legacy(ui.ImageByteFormat)))(),
    PixelFormatL: () => (T$0.PixelFormatL = dart.constFn(dart.legacy(ui.PixelFormat)))(),
    JSArrayOfShadow: () => (T$0.JSArrayOfShadow = dart.constFn(_interceptors.JSArray$(ui.Shadow)))(),
    LocaleL: () => (T$0.LocaleL = dart.constFn(dart.legacy(ui.Locale)))(),
    FramePhaseL: () => (T$0.FramePhaseL = dart.constFn(dart.legacy(ui.FramePhase)))(),
    AppLifecycleStateL: () => (T$0.AppLifecycleStateL = dart.constFn(dart.legacy(ui.AppLifecycleState)))(),
    PointerChangeL: () => (T$0.PointerChangeL = dart.constFn(dart.legacy(ui.PointerChange)))(),
    PointerDeviceKindL: () => (T$0.PointerDeviceKindL = dart.constFn(dart.legacy(ui.PointerDeviceKind)))(),
    PointerSignalKindL: () => (T$0.PointerSignalKindL = dart.constFn(dart.legacy(ui.PointerSignalKind)))(),
    PointerDataL: () => (T$0.PointerDataL = dart.constFn(dart.legacy(ui.PointerData)))(),
    SemanticsActionL: () => (T$0.SemanticsActionL = dart.constFn(dart.legacy(ui.SemanticsAction)))(),
    SemanticsFlagL: () => (T$0.SemanticsFlagL = dart.constFn(dart.legacy(ui.SemanticsFlag)))(),
    JSArrayOfSemanticsNodeUpdate: () => (T$0.JSArrayOfSemanticsNodeUpdate = dart.constFn(_interceptors.JSArray$(_engine.SemanticsNodeUpdate)))(),
    FontStyleL: () => (T$0.FontStyleL = dart.constFn(dart.legacy(ui.FontStyle)))(),
    PlaceholderAlignmentL: () => (T$0.PlaceholderAlignmentL = dart.constFn(dart.legacy(ui.PlaceholderAlignment)))(),
    FontWeightL: () => (T$0.FontWeightL = dart.constFn(dart.legacy(ui.FontWeight)))(),
    TextAlignL: () => (T$0.TextAlignL = dart.constFn(dart.legacy(ui.TextAlign)))(),
    TextBaselineL: () => (T$0.TextBaselineL = dart.constFn(dart.legacy(ui.TextBaseline)))(),
    TextDecorationStyleL: () => (T$0.TextDecorationStyleL = dart.constFn(dart.legacy(ui.TextDecorationStyle)))(),
    CkPaintN: () => (T$0.CkPaintN = dart.constFn(dart.nullable(_engine.CkPaint)))(),
    TextDirectionL: () => (T$0.TextDirectionL = dart.constFn(dart.legacy(ui.TextDirection)))(),
    TextAffinityL: () => (T$0.TextAffinityL = dart.constFn(dart.legacy(ui.TextAffinity)))(),
    BoxHeightStyleL: () => (T$0.BoxHeightStyleL = dart.constFn(dart.legacy(ui.BoxHeightStyle)))(),
    BoxWidthStyleL: () => (T$0.BoxWidthStyleL = dart.constFn(dart.legacy(ui.BoxWidthStyle)))(),
    TileModeL: () => (T$0.TileModeL = dart.constFn(dart.legacy(ui.TileMode)))(),
    BrightnessL: () => (T$0.BrightnessL = dart.constFn(dart.legacy(ui.Brightness)))(),
    CodecTovoid: () => (T$0.CodecTovoid = dart.constFn(dart.fnType(dart.void, [ui.Codec])))(),
    FnToStringN: () => (T$0.FnToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$0.CodecTovoid()])))(),
    boolTodynamic: () => (T$0.boolTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.bool])))(),
    FrameInfoToNull: () => (T$0.FrameInfoToNull = dart.constFn(dart.fnType(core.Null, [ui.FrameInfo])))(),
    voidTodynamic: () => (T$0.voidTodynamic = dart.constFn(dart.fnType(dart.dynamic, [dart.void])))(),
    voidToFutureOrOfvoid: () => (T$0.voidToFutureOrOfvoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    MetaElementN: () => (T$0.MetaElementN = dart.constFn(dart.nullable(html$.MetaElement)))(),
    FutureOfByteData: () => (T$0.FutureOfByteData = dart.constFn(async.Future$(typed_data.ByteData)))(),
    JSArrayOfElement: () => (T$0.JSArrayOfElement = dart.constFn(_interceptors.JSArray$(html$.Element)))(),
    ImageElementN: () => (T$0.ImageElementN = dart.constFn(dart.nullable(html$.ImageElement)))(),
    HtmlElementTovoid: () => (T$0.HtmlElementTovoid = dart.constFn(dart.fnType(dart.void, [html$.HtmlElement])))()
  };
  var T$1 = {
    EngineColorFilterN: () => (T$1.EngineColorFilterN = dart.constFn(dart.nullable(_engine.EngineColorFilter)))(),
    BrowserEngineL: () => (T$1.BrowserEngineL = dart.constFn(dart.legacy(_engine.BrowserEngine)))(),
    OperatingSystemL: () => (T$1.OperatingSystemL = dart.constFn(dart.legacy(_engine.OperatingSystem)))(),
    _CkManagedSkImageFilterConvertibleOfObject: () => (T$1._CkManagedSkImageFilterConvertibleOfObject = dart.constFn(_engine._CkManagedSkImageFilterConvertible$(core.Object)))(),
    JSArrayOfCkPaintCommand: () => (T$1.JSArrayOfCkPaintCommand = dart.constFn(_interceptors.JSArray$(_engine.CkPaintCommand)))(),
    JSArrayOfSkDeletable: () => (T$1.JSArrayOfSkDeletable = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkDeletable"))))(),
    SkDeletableToNull: () => (T$1.SkDeletableToNull = dart.constFn(dart.fnType(core.Null, [dart.anonymousJSType("SkDeletable")])))(),
    IdentityMapOfint$CkPictureRecorder: () => (T$1.IdentityMapOfint$CkPictureRecorder = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.CkPictureRecorder)))(),
    IdentityMapOfint$EmbeddedViewParams: () => (T$1.IdentityMapOfint$EmbeddedViewParams = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.EmbeddedViewParams)))(),
    IdentityMapOfintN$Element: () => (T$1.IdentityMapOfintN$Element = dart.constFn(_js_helper.IdentityMap$(T$.intN(), html$.Element)))(),
    IdentityMapOfintN$ElementN: () => (T$1.IdentityMapOfintN$ElementN = dart.constFn(_js_helper.IdentityMap$(T$.intN(), T$0.ElementN())))(),
    IdentityMapOfint$Surface: () => (T$1.IdentityMapOfint$Surface = dart.constFn(_js_helper.IdentityMap$(core.int, _engine.Surface)))(),
    LinkedHashSetOfint: () => (T$1.LinkedHashSetOfint = dart.constFn(collection.LinkedHashSet$(core.int)))(),
    IdentityMapOfint$int: () => (T$1.IdentityMapOfint$int = dart.constFn(_js_helper.IdentityMap$(core.int, core.int)))(),
    CkCanvasN: () => (T$1.CkCanvasN = dart.constFn(dart.nullable(_engine.CkCanvas)))(),
    JSArrayOfCkCanvasN: () => (T$1.JSArrayOfCkCanvasN = dart.constFn(_interceptors.JSArray$(T$1.CkCanvasN())))(),
    JSArrayOfSurface: () => (T$1.JSArrayOfSurface = dart.constFn(_interceptors.JSArray$(_engine.Surface)))(),
    MutatorTypeL: () => (T$1.MutatorTypeL = dart.constFn(dart.legacy(_engine.MutatorType)))(),
    JSArrayOfMutator: () => (T$1.JSArrayOfMutator = dart.constFn(_interceptors.JSArray$(_engine.Mutator)))(),
    ListOfMutator: () => (T$1.ListOfMutator = dart.constFn(core.List$(_engine.Mutator)))(),
    _RegisteredFontN: () => (T$1._RegisteredFontN = dart.constFn(dart.nullable(_engine._RegisteredFont)))(),
    FutureOf_RegisteredFontN: () => (T$1.FutureOf_RegisteredFontN = dart.constFn(async.Future$(T$1._RegisteredFontN())))(),
    JSArrayOfFutureOf_RegisteredFontN: () => (T$1.JSArrayOfFutureOf_RegisteredFontN = dart.constFn(_interceptors.JSArray$(T$1.FutureOf_RegisteredFontN())))(),
    JSArrayOf_RegisteredFont: () => (T$1.JSArrayOf_RegisteredFont = dart.constFn(_interceptors.JSArray$(_engine._RegisteredFont)))(),
    ListOfSkTypeface: () => (T$1.ListOfSkTypeface = dart.constFn(core.List$(dart.anonymousJSType("SkTypeface"))))(),
    IdentityMapOfString$ListOfSkTypeface: () => (T$1.IdentityMapOfString$ListOfSkTypeface = dart.constFn(_js_helper.IdentityMap$(core.String, T$1.ListOfSkTypeface())))(),
    JSArrayOfSkTypeface: () => (T$1.JSArrayOfSkTypeface = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkTypeface"))))(),
    VoidToListOfSkTypeface: () => (T$1.VoidToListOfSkTypeface = dart.constFn(dart.fnType(T$1.ListOfSkTypeface(), [])))(),
    dynamicToByteBuffer: () => (T$1.dynamicToByteBuffer = dart.constFn(dart.fnType(typed_data.ByteBuffer, [dart.dynamic])))(),
    FutureOfByteBuffer: () => (T$1.FutureOfByteBuffer = dart.constFn(async.Future$(typed_data.ByteBuffer)))(),
    IdentityMapOfString$int: () => (T$1.IdentityMapOfString$int = dart.constFn(_js_helper.IdentityMap$(core.String, core.int)))(),
    ListOfCodeunitRange: () => (T$1.ListOfCodeunitRange = dart.constFn(core.List$(_engine.CodeunitRange)))(),
    LinkedMapOfNotoFont$ListOfCodeunitRange: () => (T$1.LinkedMapOfNotoFont$ListOfCodeunitRange = dart.constFn(_js_helper.LinkedMap$(_engine.NotoFont, T$1.ListOfCodeunitRange())))(),
    JSArrayOfCodeunitRange: () => (T$1.JSArrayOfCodeunitRange = dart.constFn(_interceptors.JSArray$(_engine.CodeunitRange)))(),
    VoidToListOfCodeunitRange: () => (T$1.VoidToListOfCodeunitRange = dart.constFn(dart.fnType(T$1.ListOfCodeunitRange(), [])))(),
    IntervalTreeOfNotoFont: () => (T$1.IntervalTreeOfNotoFont = dart.constFn(_engine.IntervalTree$(_engine.NotoFont)))(),
    CompleterOfvoid: () => (T$1.CompleterOfvoid = dart.constFn(async.Completer$(dart.void)))(),
    LinkedHashSetOf_ResolvedNotoSubset: () => (T$1.LinkedHashSetOf_ResolvedNotoSubset = dart.constFn(collection.LinkedHashSet$(_engine._ResolvedNotoSubset)))(),
    IdentityMapOfString$_ResolvedNotoSubset: () => (T$1.IdentityMapOfString$_ResolvedNotoSubset = dart.constFn(_js_helper.IdentityMap$(core.String, _engine._ResolvedNotoSubset)))(),
    IdentityMapOfString$FutureOfvoid: () => (T$1.IdentityMapOfString$FutureOfvoid = dart.constFn(_js_helper.IdentityMap$(core.String, T$.FutureOfvoid())))(),
    IdentityMapOfString$Uint8List: () => (T$1.IdentityMapOfString$Uint8List = dart.constFn(_js_helper.IdentityMap$(core.String, typed_data.Uint8List)))(),
    FutureOrOfByteBuffer: () => (T$1.FutureOrOfByteBuffer = dart.constFn(async.FutureOr$(typed_data.ByteBuffer)))(),
    dynamicToFutureOrOfByteBuffer: () => (T$1.dynamicToFutureOrOfByteBuffer = dart.constFn(dart.fnType(T$1.FutureOrOfByteBuffer(), [dart.dynamic])))(),
    FutureOfFrameInfo: () => (T$1.FutureOfFrameInfo = dart.constFn(async.Future$(ui.FrameInfo)))(),
    SkiaObjectBoxOfCkImage$SkImage: () => (T$1.SkiaObjectBoxOfCkImage$SkImage = dart.constFn(_engine.SkiaObjectBox$(_engine.CkImage, dart.anonymousJSType("SkImage"))))(),
    VoidToSkImage: () => (T$1.VoidToSkImage = dart.constFn(dart.fnType(dart.anonymousJSType("SkImage"), [])))(),
    JSArrayOfLayer: () => (T$1.JSArrayOfLayer = dart.constFn(_interceptors.JSArray$(_engine.Layer)))(),
    CkShaderN: () => (T$1.CkShaderN = dart.constFn(dart.nullable(_engine.CkShader)))(),
    _CkManagedSkImageFilterConvertibleNOfObject: () => (T$1._CkManagedSkImageFilterConvertibleNOfObject = dart.constFn(dart.nullable(T$1._CkManagedSkImageFilterConvertibleOfObject())))(),
    JSArrayOfVoidTovoid: () => (T$1.JSArrayOfVoidTovoid = dart.constFn(_interceptors.JSArray$(T$.VoidTovoid())))(),
    SkiaObjectOfObject: () => (T$1.SkiaObjectOfObject = dart.constFn(_engine.SkiaObject$(core.Object)))(),
    DoubleLinkedQueueOfSkiaObjectOfObject: () => (T$1.DoubleLinkedQueueOfSkiaObjectOfObject = dart.constFn(collection.DoubleLinkedQueue$(T$1.SkiaObjectOfObject())))(),
    DoubleLinkedQueueEntryOfSkiaObjectOfObject: () => (T$1.DoubleLinkedQueueEntryOfSkiaObjectOfObject = dart.constFn(collection.DoubleLinkedQueueEntry$(T$1.SkiaObjectOfObject())))(),
    LinkedMapOfSkiaObjectOfObject$DoubleLinkedQueueEntryOfSkiaObjectOfObject: () => (T$1.LinkedMapOfSkiaObjectOfObject$DoubleLinkedQueueEntryOfSkiaObjectOfObject = dart.constFn(_js_helper.LinkedMap$(T$1.SkiaObjectOfObject(), T$1.DoubleLinkedQueueEntryOfSkiaObjectOfObject())))(),
    ManagedSkiaObjectOfObject: () => (T$1.ManagedSkiaObjectOfObject = dart.constFn(_engine.ManagedSkiaObject$(core.Object)))(),
    JSArrayOfManagedSkiaObjectOfObject: () => (T$1.JSArrayOfManagedSkiaObjectOfObject = dart.constFn(_interceptors.JSArray$(T$1.ManagedSkiaObjectOfObject())))(),
    JSArrayOfSkiaObjectCache: () => (T$1.JSArrayOfSkiaObjectCache = dart.constFn(_interceptors.JSArray$(_engine.SkiaObjectCache)))(),
    SurfaceFrameAndCkCanvasTobool: () => (T$1.SurfaceFrameAndCkCanvasTobool = dart.constFn(dart.fnType(core.bool, [_engine.SurfaceFrame, _engine.CkCanvas])))(),
    JSArrayOfSkTextShadow: () => (T$1.JSArrayOfSkTextShadow = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkTextShadow"))))(),
    JSArrayOfSkFontFeature: () => (T$1.JSArrayOfSkFontFeature = dart.constFn(_interceptors.JSArray$(dart.anonymousJSType("SkFontFeature"))))(),
    VoidToSkTextStyle: () => (T$1.VoidToSkTextStyle = dart.constFn(dart.fnType(dart.lazyJSType(() => dart.global.SkTextStyle, "SkTextStyle"), [])))(),
    TextBoxL: () => (T$1.TextBoxL = dart.constFn(dart.legacy(ui.TextBox)))(),
    JSArrayOfTextBox: () => (T$1.JSArrayOfTextBox = dart.constFn(_interceptors.JSArray$(ui.TextBox)))(),
    JSArrayOf_ParagraphCommand: () => (T$1.JSArrayOf_ParagraphCommand = dart.constFn(_interceptors.JSArray$(_engine._ParagraphCommand)))(),
    JSArrayOfdouble: () => (T$1.JSArrayOfdouble = dart.constFn(_interceptors.JSArray$(core.double)))(),
    JSArrayOfCkTextStyle: () => (T$1.JSArrayOfCkTextStyle = dart.constFn(_interceptors.JSArray$(_engine.CkTextStyle)))(),
    ListOfbool: () => (T$1.ListOfbool = dart.constFn(core.List$(core.bool)))(),
    boolTobool: () => (T$1.boolTobool = dart.constFn(dart.fnType(core.bool, [core.bool])))(),
    intTobool: () => (T$1.intTobool = dart.constFn(dart.fnType(core.bool, [core.int])))(),
    _ParagraphCommandTypeL: () => (T$1._ParagraphCommandTypeL = dart.constFn(dart.legacy(_engine._ParagraphCommandType)))(),
    JSArrayOfCanvasElement: () => (T$1.JSArrayOfCanvasElement = dart.constFn(_interceptors.JSArray$(html$.CanvasElement)))(),
    JSArrayOf_SaveStackEntry: () => (T$1.JSArrayOf_SaveStackEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveStackEntry)))(),
    ListOf_SaveClipEntry: () => (T$1.ListOf_SaveClipEntry = dart.constFn(core.List$(_engine._SaveClipEntry)))(),
    JSArrayOf_SaveClipEntry: () => (T$1.JSArrayOf_SaveClipEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveClipEntry)))(),
    StringToNull: () => (T$1.StringToNull = dart.constFn(dart.fnType(core.Null, [core.String])))(),
    JSArrayOf_SaveElementStackEntry: () => (T$1.JSArrayOf_SaveElementStackEntry = dart.constFn(_interceptors.JSArray$(_engine._SaveElementStackEntry)))(),
    ListOfElementN: () => (T$1.ListOfElementN = dart.constFn(core.List$(T$0.ElementN())))(),
    ListNOfElementN: () => (T$1.ListNOfElementN = dart.constFn(dart.nullable(T$1.ListOfElementN())))(),
    JSArrayOfElementN: () => (T$1.JSArrayOfElementN = dart.constFn(_interceptors.JSArray$(T$0.ElementN())))(),
    CompleterOfbool: () => (T$1.CompleterOfbool = dart.constFn(async.Completer$(core.bool)))(),
    EventTodynamic: () => (T$1.EventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html$.Event])))(),
    IdentityMapOfString$bool: () => (T$1.IdentityMapOfString$bool = dart.constFn(_js_helper.IdentityMap$(core.String, core.bool)))(),
    VoidToFn$1: () => (T$1.VoidToFn$1 = dart.constFn(dart.fnType(T$.VoidTovoid(), [])))(),
    FnTodynamic$1: () => (T$1.FnTodynamic$1 = dart.constFn(dart.fnType(dart.dynamic, [T$.VoidTovoid()])))(),
    JSArrayOfPersistedSurface: () => (T$1.JSArrayOfPersistedSurface = dart.constFn(_interceptors.JSArray$(_engine.PersistedSurface)))(),
    PersistedContainerSurfaceN: () => (T$1.PersistedContainerSurfaceN = dart.constFn(dart.nullable(_engine.PersistedContainerSurface)))(),
    PersistedSurfaceN: () => (T$1.PersistedSurfaceN = dart.constFn(dart.nullable(_engine.PersistedSurface)))(),
    JSArrayOfPersistedSurfaceN: () => (T$1.JSArrayOfPersistedSurfaceN = dart.constFn(_interceptors.JSArray$(T$1.PersistedSurfaceN())))(),
    PersistedSurfaceL: () => (T$1.PersistedSurfaceL = dart.constFn(dart.legacy(_engine.PersistedSurface)))(),
    JSArrayOf_PersistedSurfaceMatch: () => (T$1.JSArrayOf_PersistedSurfaceMatch = dart.constFn(_interceptors.JSArray$(_engine._PersistedSurfaceMatch)))(),
    _PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint: () => (T$1._PersistedSurfaceMatchAnd_PersistedSurfaceMatchToint = dart.constFn(dart.fnType(core.int, [_engine._PersistedSurfaceMatch, _engine._PersistedSurfaceMatch])))(),
    LinkedMapOfPersistedSurfaceN$PersistedSurface: () => (T$1.LinkedMapOfPersistedSurfaceN$PersistedSurface = dart.constFn(_js_helper.LinkedMap$(T$1.PersistedSurfaceN(), _engine.PersistedSurface)))(),
    LinkedHashSetOfPersistedSurface: () => (T$1.LinkedHashSetOfPersistedSurface = dart.constFn(collection.LinkedHashSet$(_engine.PersistedSurface)))(),
    FrameReferenceOfPersistedSurface: () => (T$1.FrameReferenceOfPersistedSurface = dart.constFn(_engine.FrameReference$(_engine.PersistedSurface)))(),
    JSArrayOfOffset: () => (T$1.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    OffsetL: () => (T$1.OffsetL = dart.constFn(dart.legacy(ui.Offset)))(),
    JSArrayOfConic: () => (T$1.JSArrayOfConic = dart.constFn(_interceptors.JSArray$(_engine.Conic)))(),
    JSArrayOf_PathContourMeasure: () => (T$1.JSArrayOf_PathContourMeasure = dart.constFn(_interceptors.JSArray$(_engine._PathContourMeasure)))(),
    JSArrayOf_PathSegment: () => (T$1.JSArrayOf_PathSegment = dart.constFn(_interceptors.JSArray$(_engine._PathSegment)))(),
    doubleAnddoubleAnddouble__ToNull: () => (T$1.doubleAnddoubleAnddouble__ToNull = dart.constFn(dart.fnType(core.Null, [core.double, core.double, core.double, core.double])))(),
    JSArrayOfRadius: () => (T$1.JSArrayOfRadius = dart.constFn(_interceptors.JSArray$(ui.Radius)))(),
    DirChangeL: () => (T$1.DirChangeL = dart.constFn(dart.legacy(_engine.DirChange)))(),
    CrossFrameCacheOfHtmlElement: () => (T$1.CrossFrameCacheOfHtmlElement = dart.constFn(_engine.CrossFrameCache$(html$.HtmlElement)))(),
    BitmapCanvasN: () => (T$1.BitmapCanvasN = dart.constFn(dart.nullable(_engine.BitmapCanvas)))(),
    JSArrayOfPaintCommand: () => (T$1.JSArrayOfPaintCommand = dart.constFn(_interceptors.JSArray$(_engine.PaintCommand)))(),
    JSArrayOfPathCommand: () => (T$1.JSArrayOfPathCommand = dart.constFn(_interceptors.JSArray$(_engine.PathCommand)))(),
    JSArrayOfMatrix4: () => (T$1.JSArrayOfMatrix4 = dart.constFn(_interceptors.JSArray$(_engine.Matrix4)))(),
    RectN: () => (T$1.RectN = dart.constFn(dart.nullable(ui.Rect)))(),
    JSArrayOfRectN: () => (T$1.JSArrayOfRectN = dart.constFn(_interceptors.JSArray$(T$1.RectN())))(),
    _GlProgramN: () => (T$1._GlProgramN = dart.constFn(dart.nullable(_engine._GlProgram)))(),
    IdentityMapOfString$_GlProgramN: () => (T$1.IdentityMapOfString$_GlProgramN = dart.constFn(_js_helper.IdentityMap$(core.String, T$1._GlProgramN())))(),
    JSArrayOfPersistedContainerSurface: () => (T$1.JSArrayOfPersistedContainerSurface = dart.constFn(_interceptors.JSArray$(_engine.PersistedContainerSurface)))(),
    PersistedOffsetN: () => (T$1.PersistedOffsetN = dart.constFn(dart.nullable(_engine.PersistedOffset)))(),
    PersistedTransformN: () => (T$1.PersistedTransformN = dart.constFn(dart.nullable(_engine.PersistedTransform)))(),
    PersistedClipRectN: () => (T$1.PersistedClipRectN = dart.constFn(dart.nullable(_engine.PersistedClipRect)))(),
    PersistedClipPathN: () => (T$1.PersistedClipPathN = dart.constFn(dart.nullable(_engine.PersistedClipPath)))(),
    PersistedOpacityN: () => (T$1.PersistedOpacityN = dart.constFn(dart.nullable(_engine.PersistedOpacity)))(),
    PersistedColorFilterN: () => (T$1.PersistedColorFilterN = dart.constFn(dart.nullable(_engine.PersistedColorFilter)))(),
    PersistedImageFilterN: () => (T$1.PersistedImageFilterN = dart.constFn(dart.nullable(_engine.PersistedImageFilter)))(),
    PersistedBackdropFilterN: () => (T$1.PersistedBackdropFilterN = dart.constFn(dart.nullable(_engine.PersistedBackdropFilter)))(),
    PersistedPhysicalShapeN: () => (T$1.PersistedPhysicalShapeN = dart.constFn(dart.nullable(_engine.PersistedPhysicalShape)))(),
    VoidToSurfaceScene: () => (T$1.VoidToSurfaceScene = dart.constFn(dart.fnType(_engine.SurfaceScene, [])))(),
    JSArrayOfShaderDeclaration: () => (T$1.JSArrayOfShaderDeclaration = dart.constFn(_interceptors.JSArray$(_engine.ShaderDeclaration)))(),
    JSArrayOfShaderMethod: () => (T$1.JSArrayOfShaderMethod = dart.constFn(_interceptors.JSArray$(_engine.ShaderMethod)))(),
    PersistedSurfaceStateL: () => (T$1.PersistedSurfaceStateL = dart.constFn(dart.legacy(_engine.PersistedSurfaceState)))(),
    CompleterOfFrameInfo: () => (T$1.CompleterOfFrameInfo = dart.constFn(async.Completer$(ui.FrameInfo)))(),
    StreamSubscriptionOfEvent: () => (T$1.StreamSubscriptionOfEvent = dart.constFn(async.StreamSubscription$(html$.Event)))(),
    VoidToStreamSubscriptionOfEvent: () => (T$1.VoidToStreamSubscriptionOfEvent = dart.constFn(dart.fnType(T$1.StreamSubscriptionOfEvent(), [])))(),
    StreamSubscriptionOfEventTodynamic: () => (T$1.StreamSubscriptionOfEventTodynamic = dart.constFn(dart.fnType(dart.dynamic, [T$1.StreamSubscriptionOfEvent()])))(),
    FutureOfByteDataN: () => (T$1.FutureOfByteDataN = dart.constFn(async.Future$(T$0.ByteDataN())))(),
    IdentityMapOfString$Timer: () => (T$1.IdentityMapOfString$Timer = dart.constFn(_js_helper.IdentityMap$(core.String, async.Timer)))(),
    CompleterOfImage: () => (T$1.CompleterOfImage = dart.constFn(async.Completer$(ui.Image)))(),
    LinkedMapOfObject$FlutterWindow: () => (T$1.LinkedMapOfObject$FlutterWindow = dart.constFn(_js_helper.LinkedMap$(core.Object, ui.FlutterWindow)))(),
    LinkedMapOfObject$ViewConfiguration: () => (T$1.LinkedMapOfObject$ViewConfiguration = dart.constFn(_js_helper.LinkedMap$(core.Object, ui.ViewConfiguration)))(),
    ListOfFrameTiming: () => (T$1.ListOfFrameTiming = dart.constFn(core.List$(ui.FrameTiming)))(),
    ByteDataToNull: () => (T$1.ByteDataToNull = dart.constFn(dart.fnType(core.Null, [typed_data.ByteData])))(),
    JSArrayOfLocale: () => (T$1.JSArrayOfLocale = dart.constFn(_interceptors.JSArray$(ui.Locale)))(),
    StringAndFnTovoid: () => (T$1.StringAndFnTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$1.EventTodynamic()])))(),
    IdentityMapOfString$EventTodynamic: () => (T$1.IdentityMapOfString$EventTodynamic = dart.constFn(_js_helper.IdentityMap$(core.String, T$1.EventTodynamic())))(),
    JSArrayOfPointerData: () => (T$1.JSArrayOfPointerData = dart.constFn(_interceptors.JSArray$(ui.PointerData)))(),
    IdentityMapOfint$_ButtonSanitizer: () => (T$1.IdentityMapOfint$_ButtonSanitizer = dart.constFn(_js_helper.IdentityMap$(core.int, _engine._ButtonSanitizer)))(),
    VoidTo_ButtonSanitizer: () => (T$1.VoidTo_ButtonSanitizer = dart.constFn(dart.fnType(_engine._ButtonSanitizer, [])))(),
    PointerEventToNull: () => (T$1.PointerEventToNull = dart.constFn(dart.fnType(core.Null, [html$.PointerEvent])))(),
    PointerEventTo_SanitizedDetails: () => (T$1.PointerEventTo_SanitizedDetails = dart.constFn(dart.fnType(_engine._SanitizedDetails, [html$.PointerEvent])))(),
    JSArrayOfPointerEvent: () => (T$1.JSArrayOfPointerEvent = dart.constFn(_interceptors.JSArray$(html$.PointerEvent)))(),
    TouchEventToNull: () => (T$1.TouchEventToNull = dart.constFn(dart.fnType(core.Null, [html$.TouchEvent])))(),
    MouseEventToNull: () => (T$1.MouseEventToNull = dart.constFn(dart.fnType(core.Null, [html$.MouseEvent])))(),
    IdentityMapOfint$_PointerState: () => (T$1.IdentityMapOfint$_PointerState = dart.constFn(_js_helper.IdentityMap$(core.int, _engine._PointerState)))(),
    VoidTo_PointerState: () => (T$1.VoidTo_PointerState = dart.constFn(dart.fnType(_engine._PointerState, [])))(),
    StringAnddoubleTovoid: () => (T$1.StringAnddoubleTovoid = dart.constFn(dart.fnType(dart.void, [core.String, core.double])))(),
    StringAnddoubleToNvoid: () => (T$1.StringAnddoubleToNvoid = dart.constFn(dart.nullable(T$1.StringAnddoubleTovoid())))(),
    MapEntryOfString$int: () => (T$1.MapEntryOfString$int = dart.constFn(core.MapEntry$(core.String, core.int)))(),
    MapEntryOfString$intAndMapEntryOfString$intToint: () => (T$1.MapEntryOfString$intAndMapEntryOfString$intToint = dart.constFn(dart.fnType(core.int, [T$1.MapEntryOfString$int(), T$1.MapEntryOfString$int()])))(),
    _CheckableKindL: () => (T$1._CheckableKindL = dart.constFn(dart.legacy(_engine._CheckableKind)))(),
    GestureModeTovoid: () => (T$1.GestureModeTovoid = dart.constFn(dart.fnType(dart.void, [_engine.GestureMode])))(),
    RoleL: () => (T$1.RoleL = dart.constFn(dart.legacy(_engine.Role)))(),
    RoleManagerN: () => (T$1.RoleManagerN = dart.constFn(dart.nullable(_engine.RoleManager)))(),
    LinkedMapOfRole$RoleManagerN: () => (T$1.LinkedMapOfRole$RoleManagerN = dart.constFn(_js_helper.LinkedMap$(_engine.Role, T$1.RoleManagerN())))(),
    VoidToMatrix4: () => (T$1.VoidToMatrix4 = dart.constFn(dart.fnType(_engine.Matrix4, [])))(),
    Matrix4Todynamic: () => (T$1.Matrix4Todynamic = dart.constFn(dart.fnType(dart.dynamic, [_engine.Matrix4])))(),
    AccessibilityModeL: () => (T$1.AccessibilityModeL = dart.constFn(dart.legacy(_engine.AccessibilityMode)))(),
    GestureModeL: () => (T$1.GestureModeL = dart.constFn(dart.legacy(_engine.GestureMode)))(),
    SemanticsObjectN: () => (T$1.SemanticsObjectN = dart.constFn(dart.nullable(_engine.SemanticsObject)))(),
    IdentityMapOfintN$SemanticsObjectN: () => (T$1.IdentityMapOfintN$SemanticsObjectN = dart.constFn(_js_helper.IdentityMap$(T$.intN(), T$1.SemanticsObjectN())))(),
    IdentityMapOfintN$SemanticsObject: () => (T$1.IdentityMapOfintN$SemanticsObject = dart.constFn(_js_helper.IdentityMap$(T$.intN(), _engine.SemanticsObject)))(),
    JSArrayOfSemanticsObjectN: () => (T$1.JSArrayOfSemanticsObjectN = dart.constFn(_interceptors.JSArray$(T$1.SemanticsObjectN())))(),
    VoidToDateTime: () => (T$1.VoidToDateTime = dart.constFn(dart.fnType(core.DateTime, [])))(),
    GestureModeToNvoid: () => (T$1.GestureModeToNvoid = dart.constFn(dart.nullable(T$1.GestureModeTovoid())))(),
    JSArrayOfGestureModeToNvoid: () => (T$1.JSArrayOfGestureModeToNvoid = dart.constFn(_interceptors.JSArray$(T$1.GestureModeToNvoid())))(),
    intNAndSemanticsObjectNTovoid: () => (T$1.intNAndSemanticsObjectNTovoid = dart.constFn(dart.fnType(dart.void, [T$.intN(), T$1.SemanticsObjectN()])))(),
    EnabledStateL: () => (T$1.EnabledStateL = dart.constFn(dart.legacy(_engine.EnabledState)))(),
    JSArrayOfStreamSubscriptionOfEvent: () => (T$1.JSArrayOfStreamSubscriptionOfEvent = dart.constFn(_interceptors.JSArray$(T$1.StreamSubscriptionOfEvent())))(),
    MouseEventTovoid: () => (T$1.MouseEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.MouseEvent])))(),
    JSArrayOfEventTodynamic: () => (T$1.JSArrayOfEventTodynamic = dart.constFn(_interceptors.JSArray$(T$1.EventTodynamic())))(),
    JSArrayOfTestHistoryEntry: () => (T$1.JSArrayOfTestHistoryEntry = dart.constFn(_interceptors.JSArray$(_engine.TestHistoryEntry)))(),
    voidTovoid: () => (T$1.voidTovoid = dart.constFn(dart.fnType(dart.void, [dart.void])))(),
    JSArrayOfFutureOfvoid: () => (T$1.JSArrayOfFutureOfvoid = dart.constFn(_interceptors.JSArray$(T$.FutureOfvoid())))(),
    FontFaceToNull: () => (T$1.FontFaceToNull = dart.constFn(dart.fnType(core.Null, [html$.FontFace])))(),
    dynamicToNever: () => (T$1.dynamicToNever = dart.constFn(dart.fnType(dart.Never, [dart.dynamic])))(),
    DateTimeTodynamic: () => (T$1.DateTimeTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.DateTime])))(),
    IdentityMapOfString$StringN: () => (T$1.IdentityMapOfString$StringN = dart.constFn(_js_helper.IdentityMap$(core.String, T$.StringN())))(),
    JSArrayOfEngineLineMetrics: () => (T$1.JSArrayOfEngineLineMetrics = dart.constFn(_interceptors.JSArray$(_engine.EngineLineMetrics)))(),
    JSArrayOfLineSegment: () => (T$1.JSArrayOfLineSegment = dart.constFn(_interceptors.JSArray$(_engine.LineSegment)))(),
    JSArrayOfRangeBox: () => (T$1.JSArrayOfRangeBox = dart.constFn(_interceptors.JSArray$(_engine.RangeBox)))(),
    TextHeightStyleAndTextHeightRulerTovoid: () => (T$1.TextHeightStyleAndTextHeightRulerTovoid = dart.constFn(dart.fnType(dart.void, [_engine.TextHeightStyle, _engine.TextHeightRuler])))(),
    LinkedMapOfTextHeightStyle$TextHeightRuler: () => (T$1.LinkedMapOfTextHeightStyle$TextHeightRuler = dart.constFn(_js_helper.LinkedMap$(_engine.TextHeightStyle, _engine.TextHeightRuler)))(),
    LineCharPropertyL: () => (T$1.LineCharPropertyL = dart.constFn(dart.legacy(_engine.LineCharProperty)))(),
    LineBreakTypeL: () => (T$1.LineBreakTypeL = dart.constFn(dart.legacy(_engine.LineBreakType)))(),
    LinkedMapOfParagraphGeometricStyle$ParagraphRuler: () => (T$1.LinkedMapOfParagraphGeometricStyle$ParagraphRuler = dart.constFn(_js_helper.LinkedMap$(_engine.ParagraphGeometricStyle, _engine.ParagraphRuler)))(),
    ParagraphGeometricStyleAndParagraphRulerTovoid: () => (T$1.ParagraphGeometricStyleAndParagraphRulerTovoid = dart.constFn(dart.fnType(dart.void, [_engine.ParagraphGeometricStyle, _engine.ParagraphRuler])))(),
    ParagraphRulerAndParagraphRulerToint: () => (T$1.ParagraphRulerAndParagraphRulerToint = dart.constFn(dart.fnType(core.int, [_engine.ParagraphRuler, _engine.ParagraphRuler])))(),
    SurfacePaintN: () => (T$1.SurfacePaintN = dart.constFn(dart.nullable(_engine.SurfacePaint)))(),
    VoidToStopwatch: () => (T$1.VoidToStopwatch = dart.constFn(dart.fnType(core.Stopwatch, [])))(),
    StopwatchTodynamic: () => (T$1.StopwatchTodynamic = dart.constFn(dart.fnType(dart.dynamic, [core.Stopwatch])))(),
    EngineStrutStyleN: () => (T$1.EngineStrutStyleN = dart.constFn(dart.nullable(_engine.EngineStrutStyle)))(),
    VoidToHtmlElement: () => (T$1.VoidToHtmlElement = dart.constFn(dart.fnType(html$.HtmlElement, [])))(),
    HtmlElementTodynamic: () => (T$1.HtmlElementTodynamic = dart.constFn(dart.fnType(dart.dynamic, [html$.HtmlElement])))(),
    JSArrayOfParagraphSpan: () => (T$1.JSArrayOfParagraphSpan = dart.constFn(_interceptors.JSArray$(_engine.ParagraphSpan)))(),
    JSArrayOfStyleNode: () => (T$1.JSArrayOfStyleNode = dart.constFn(_interceptors.JSArray$(_engine.StyleNode)))(),
    MeasurementResultN: () => (T$1.MeasurementResultN = dart.constFn(dart.nullable(_engine.MeasurementResult)))(),
    ListOfMeasurementResultN: () => (T$1.ListOfMeasurementResultN = dart.constFn(core.List$(T$1.MeasurementResultN())))(),
    IdentityMapOfStringN$ListOfMeasurementResultN: () => (T$1.IdentityMapOfStringN$ListOfMeasurementResultN = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), T$1.ListOfMeasurementResultN())))(),
    JSArrayOfNode$1: () => (T$1.JSArrayOfNode$1 = dart.constFn(_interceptors.JSArray$(html$.Node)))(),
    JSArrayOfMeasurementResultN: () => (T$1.JSArrayOfMeasurementResultN = dart.constFn(_interceptors.JSArray$(T$1.MeasurementResultN())))(),
    _ComparisonResultL: () => (T$1._ComparisonResultL = dart.constFn(dart.legacy(_engine._ComparisonResult)))(),
    WordCharPropertyL: () => (T$1.WordCharPropertyL = dart.constFn(dart.legacy(_engine.WordCharProperty)))(),
    TextCapitalizationL: () => (T$1.TextCapitalizationL = dart.constFn(dart.legacy(_engine.TextCapitalization)))(),
    IdentityMapOfString$HtmlElement: () => (T$1.IdentityMapOfString$HtmlElement = dart.constFn(_js_helper.IdentityMap$(core.String, html$.HtmlElement)))(),
    IdentityMapOfString$AutofillInfo: () => (T$1.IdentityMapOfString$AutofillInfo = dart.constFn(_js_helper.IdentityMap$(core.String, _engine.AutofillInfo)))(),
    HtmlElementN: () => (T$1.HtmlElementN = dart.constFn(dart.nullable(html$.HtmlElement)))(),
    IdentityMapOfStringN$dynamic: () => (T$1.IdentityMapOfStringN$dynamic = dart.constFn(_js_helper.IdentityMap$(T$.StringN(), dart.dynamic)))(),
    KeyboardEventTovoid: () => (T$1.KeyboardEventTovoid = dart.constFn(dart.fnType(dart.void, [html$.KeyboardEvent])))(),
    StringAndFormElementTovoid: () => (T$1.StringAndFormElementTovoid = dart.constFn(dart.fnType(dart.void, [core.String, html$.FormElement])))(),
    EditingStateN: () => (T$1.EditingStateN = dart.constFn(dart.nullable(_engine.EditingState)))(),
    EditingStateNTovoid: () => (T$1.EditingStateNTovoid = dart.constFn(dart.fnType(dart.void, [T$1.EditingStateN()])))(),
    StringNTovoid: () => (T$1.StringNTovoid = dart.constFn(dart.fnType(dart.void, [T$.StringN()])))(),
    doubleN: () => (T$1.doubleN = dart.constFn(dart.nullable(core.double)))(),
    ListOfdouble: () => (T$1.ListOfdouble = dart.constFn(core.List$(core.double)))(),
    TransformKindL: () => (T$1.TransformKindL = dart.constFn(dart.legacy(_engine.TransformKind)))(),
    JsUrlStrategyNTovoid: () => (T$1.JsUrlStrategyNTovoid = dart.constFn(dart.fnType(dart.void, [dart.nullable(dart.anonymousJSType("JsUrlStrategy"))])))(),
    LinkedHashSetOfNotoFont: () => (T$1.LinkedHashSetOfNotoFont = dart.constFn(collection.LinkedHashSet$(_engine.NotoFont)))(),
    JSArrayOf_ResolvedNotoSubset: () => (T$1.JSArrayOf_ResolvedNotoSubset = dart.constFn(_interceptors.JSArray$(_engine._ResolvedNotoSubset)))(),
    LinkedMapOf_ResolvedNotoSubset$ListOfCodeunitRange: () => (T$1.LinkedMapOf_ResolvedNotoSubset$ListOfCodeunitRange = dart.constFn(_js_helper.LinkedMap$(_engine._ResolvedNotoSubset, T$1.ListOfCodeunitRange())))(),
    IntervalTreeOf_ResolvedNotoSubset: () => (T$1.IntervalTreeOf_ResolvedNotoSubset = dart.constFn(_engine.IntervalTree$(_engine._ResolvedNotoSubset)))(),
    StringToStringN: () => (T$1.StringToStringN = dart.constFn(dart.fnType(T$.StringN(), [core.String])))(),
    CodeunitRangeL: () => (T$1.CodeunitRangeL = dart.constFn(dart.legacy(_engine.CodeunitRange)))(),
    JSArrayOfNotoFont: () => (T$1.JSArrayOfNotoFont = dart.constFn(_interceptors.JSArray$(_engine.NotoFont)))(),
    NotoFontTobool: () => (T$1.NotoFontTobool = dart.constFn(dart.fnType(core.bool, [_engine.NotoFont])))(),
    VoidToHttpRequest: () => (T$1.VoidToHttpRequest = dart.constFn(dart.fnType(html$.HttpRequest, [])))(),
    CompleterOfCodec: () => (T$1.CompleterOfCodec = dart.constFn(async.Completer$(ui.Codec)))(),
    CanvasKitTovoid: () => (T$1.CanvasKitTovoid = dart.constFn(dart.fnType(dart.void, [dart.anonymousJSType("CanvasKit")])))(),
    _PaintRequestAnd_PaintRequestToint: () => (T$1._PaintRequestAnd_PaintRequestToint = dart.constFn(dart.fnType(core.int, [_engine._PaintRequest, _engine._PaintRequest])))(),
    JSArrayOf_PaintRequest: () => (T$1.JSArrayOf_PaintRequest = dart.constFn(_interceptors.JSArray$(_engine._PaintRequest)))(),
    JSArrayOfFrameReference: () => (T$1.JSArrayOfFrameReference = dart.constFn(_interceptors.JSArray$(_engine.FrameReference)))(),
    LinkedMapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.LinkedMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_js_helper.LinkedMap$(_engine.PersistedSurface, _engine._DebugSurfaceStats)))(),
    PersistedSurfaceStateN: () => (T$1.PersistedSurfaceStateN = dart.constFn(dart.nullable(_engine.PersistedSurfaceState)))(),
    JSArrayOfPersistedSurfaceStateN: () => (T$1.JSArrayOfPersistedSurfaceStateN = dart.constFn(_interceptors.JSArray$(T$1.PersistedSurfaceStateN())))(),
    VoidTo_DebugSurfaceStats: () => (T$1.VoidTo_DebugSurfaceStats = dart.constFn(dart.fnType(_engine._DebugSurfaceStats, [])))(),
    PersistedSurfaceTovoid: () => (T$1.PersistedSurfaceTovoid = dart.constFn(dart.fnType(dart.void, [_engine.PersistedSurface])))(),
    CanvasElementToint: () => (T$1.CanvasElementToint = dart.constFn(dart.fnType(core.int, [html$.CanvasElement])))(),
    JSArrayOfFrameTiming: () => (T$1.JSArrayOfFrameTiming = dart.constFn(_interceptors.JSArray$(ui.FrameTiming)))(),
    VoidToNever: () => (T$1.VoidToNever = dart.constFn(dart.fnType(dart.Never, [])))(),
    JSArrayOfSkFontSlant: () => (T$1.JSArrayOfSkFontSlant = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.window.flutterCanvasKit.FontSlant, "window.flutterCanvasKit.FontSlant"))))(),
    JSArrayOfSkFontWeight: () => (T$1.JSArrayOfSkFontWeight = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFontWeight, "SkFontWeight"))))(),
    JSArrayOfSkAffinity: () => (T$1.JSArrayOfSkAffinity = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkAffinity, "SkAffinity"))))(),
    JSArrayOfSkTextDirection: () => (T$1.JSArrayOfSkTextDirection = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextDirection, "SkTextDirection"))))(),
    JSArrayOfSkTextAlign: () => (T$1.JSArrayOfSkTextAlign = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextAlign, "SkTextAlign"))))(),
    JSArrayOfSkRectHeightStyle: () => (T$1.JSArrayOfSkRectHeightStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkRectHeightStyle, "SkRectHeightStyle"))))(),
    JSArrayOfSkRectWidthStyle: () => (T$1.JSArrayOfSkRectWidthStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkRectWidthStyle, "SkRectWidthStyle"))))(),
    JSArrayOfSkVertexMode: () => (T$1.JSArrayOfSkVertexMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkVertexMode, "SkVertexMode"))))(),
    JSArrayOfSkPointMode: () => (T$1.JSArrayOfSkPointMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPointMode, "SkPointMode"))))(),
    JSArrayOfSkClipOp: () => (T$1.JSArrayOfSkClipOp = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkClipOp, "SkClipOp"))))(),
    JSArrayOfSkFillType: () => (T$1.JSArrayOfSkFillType = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFillType, "SkFillType"))))(),
    JSArrayOfSkPathOp: () => (T$1.JSArrayOfSkPathOp = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPathOp, "SkPathOp"))))(),
    JSArrayOfSkBlurStyle: () => (T$1.JSArrayOfSkBlurStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkBlurStyle, "SkBlurStyle"))))(),
    JSArrayOfSkStrokeCap: () => (T$1.JSArrayOfSkStrokeCap = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkStrokeCap, "SkStrokeCap"))))(),
    JSArrayOfSkPaintStyle: () => (T$1.JSArrayOfSkPaintStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPaintStyle, "SkPaintStyle"))))(),
    JSArrayOfSkBlendMode: () => (T$1.JSArrayOfSkBlendMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkBlendMode, "SkBlendMode"))))(),
    JSArrayOfSkStrokeJoin: () => (T$1.JSArrayOfSkStrokeJoin = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkStrokeJoin, "SkStrokeJoin"))))(),
    JSArrayOfSkFilterQuality: () => (T$1.JSArrayOfSkFilterQuality = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkFilterQuality, "SkFilterQuality"))))(),
    JSArrayOfSkTileMode: () => (T$1.JSArrayOfSkTileMode = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTileMode, "SkTileMode"))))(),
    JSArrayOfSkTextDecorationStyle: () => (T$1.JSArrayOfSkTextDecorationStyle = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextDecorationStyle, "SkTextDecorationStyle"))))(),
    JSArrayOfSkTextBaseline: () => (T$1.JSArrayOfSkTextBaseline = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkTextBaseline, "SkTextBaseline"))))(),
    JSArrayOfSkPlaceholderAlignment: () => (T$1.JSArrayOfSkPlaceholderAlignment = dart.constFn(_interceptors.JSArray$(dart.lazyJSType(() => dart.global.SkPlaceholderAlignment, "SkPlaceholderAlignment"))))(),
    JSArrayOfBitmapCanvas: () => (T$1.JSArrayOfBitmapCanvas = dart.constFn(_interceptors.JSArray$(_engine.BitmapCanvas)))(),
    MapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.MapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(core.Map$(_engine.PersistedSurface, _engine._DebugSurfaceStats)))(),
    JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats: () => (T$1.JSArrayOfMapOfPersistedSurface$_DebugSurfaceStats = dart.constFn(_interceptors.JSArray$(T$1.MapOfPersistedSurface$_DebugSurfaceStats())))(),
    JSArrayOf_LogMessage: () => (T$1.JSArrayOf_LogMessage = dart.constFn(_interceptors.JSArray$(_engine._LogMessage)))(),
    SemanticsObjectToIncrementable: () => (T$1.SemanticsObjectToIncrementable = dart.constFn(dart.fnType(_engine.Incrementable, [_engine.SemanticsObject])))(),
    SemanticsObjectToScrollable: () => (T$1.SemanticsObjectToScrollable = dart.constFn(dart.fnType(_engine.Scrollable, [_engine.SemanticsObject])))(),
    SemanticsObjectToLabelAndValue: () => (T$1.SemanticsObjectToLabelAndValue = dart.constFn(dart.fnType(_engine.LabelAndValue, [_engine.SemanticsObject])))(),
    SemanticsObjectToTappable: () => (T$1.SemanticsObjectToTappable = dart.constFn(dart.fnType(_engine.Tappable, [_engine.SemanticsObject])))(),
    SemanticsObjectToTextField: () => (T$1.SemanticsObjectToTextField = dart.constFn(dart.fnType(_engine.TextField, [_engine.SemanticsObject])))(),
    SemanticsObjectToCheckable: () => (T$1.SemanticsObjectToCheckable = dart.constFn(dart.fnType(_engine.Checkable, [_engine.SemanticsObject])))(),
    SemanticsObjectToImageRoleManager: () => (T$1.SemanticsObjectToImageRoleManager = dart.constFn(dart.fnType(_engine.ImageRoleManager, [_engine.SemanticsObject])))(),
    SemanticsObjectToLiveRegion: () => (T$1.SemanticsObjectToLiveRegion = dart.constFn(dart.fnType(_engine.LiveRegion, [_engine.SemanticsObject])))(),
    SemanticsObjectToRoleManager: () => (T$1.SemanticsObjectToRoleManager = dart.constFn(dart.fnType(_engine.RoleManager, [_engine.SemanticsObject])))(),
    LinkedMapOfRole$SemanticsObjectToRoleManager: () => (T$1.LinkedMapOfRole$SemanticsObjectToRoleManager = dart.constFn(_js_helper.LinkedMap$(_engine.Role, T$1.SemanticsObjectToRoleManager())))(),
    UnicodePropertyLookupOfLineCharProperty: () => (T$1.UnicodePropertyLookupOfLineCharProperty = dart.constFn(_engine.UnicodePropertyLookup$(_engine.LineCharProperty)))(),
    UnicodePropertyLookupOfWordCharProperty: () => (T$1.UnicodePropertyLookupOfWordCharProperty = dart.constFn(_engine.UnicodePropertyLookup$(_engine.WordCharProperty)))(),
    LinkedMapOfString$FormElement: () => (T$1.LinkedMapOfString$FormElement = dart.constFn(_js_helper.LinkedMap$(core.String, html$.FormElement)))(),
    HttpClientResponseCompressionStateL: () => (T$1.HttpClientResponseCompressionStateL = dart.constFn(dart.legacy(_http.HttpClientResponseCompressionState)))(),
    StringToint: () => (T$1.StringToint = dart.constFn(dart.fnType(core.int, [core.String])))(),
    StringAndListOfStringTovoid: () => (T$1.StringAndListOfStringTovoid = dart.constFn(dart.fnType(dart.void, [core.String, T$.ListOfString()])))(),
    JSArrayOfCookie: () => (T$1.JSArrayOfCookie = dart.constFn(_interceptors.JSArray$(_http.Cookie)))(),
    HashMapOfString$StringN: () => (T$1.HashMapOfString$StringN = dart.constFn(collection.HashMap$(core.String, T$.StringN())))(),
    UnmodifiableMapViewOfString$StringN: () => (T$1.UnmodifiableMapViewOfString$StringN = dart.constFn(collection.UnmodifiableMapView$(core.String, T$.StringN())))(),
    StringNToString: () => (T$1.StringNToString = dart.constFn(dart.fnType(core.String, [T$.StringN()])))(),
    CookieTobool: () => (T$1.CookieTobool = dart.constFn(dart.fnType(core.bool, [_http.Cookie])))(),
    CookieToString: () => (T$1.CookieToString = dart.constFn(dart.fnType(core.String, [_http.Cookie])))(),
    FutureOfHttpClientResponse: () => (T$1.FutureOfHttpClientResponse = dart.constFn(async.Future$(_http.HttpClientResponse)))(),
    _HttpClientRequestToFutureOfHttpClientResponse: () => (T$1._HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [_http._HttpClientRequest])))(),
    _EmptyStreamOfUint8List: () => (T$1._EmptyStreamOfUint8List = dart.constFn(async._EmptyStream$(typed_data.Uint8List)))(),
    Uint8ListToUint8List: () => (T$1.Uint8ListToUint8List = dart.constFn(dart.fnType(typed_data.Uint8List, [typed_data.Uint8List])))(),
    dynamicToFutureOfHttpClientResponse: () => (T$1.dynamicToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [dart.dynamic])))(),
    VoidToFutureOfHttpClientResponse: () => (T$1.VoidToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [])))(),
    VoidToListNOfString: () => (T$1.VoidToListNOfString = dart.constFn(dart.fnType(T$.ListNOfString(), [])))(),
    _CredentialsN: () => (T$1._CredentialsN = dart.constFn(dart.nullable(_http._Credentials)))(),
    _AuthenticationSchemeTo_CredentialsN: () => (T$1._AuthenticationSchemeTo_CredentialsN = dart.constFn(dart.fnType(T$1._CredentialsN(), [_http._AuthenticationScheme])))(),
    _CredentialsTovoid: () => (T$1._CredentialsTovoid = dart.constFn(dart.fnType(dart.void, [_http._Credentials])))(),
    _AuthenticationSchemeAndStringNToFutureOfbool: () => (T$1._AuthenticationSchemeAndStringNToFutureOfbool = dart.constFn(dart.fnType(T$.FutureOfbool(), [_http._AuthenticationScheme, T$.StringN()])))(),
    FutureOrOfHttpClientResponse: () => (T$1.FutureOrOfHttpClientResponse = dart.constFn(async.FutureOr$(_http.HttpClientResponse)))(),
    boolToFutureOrOfHttpClientResponse: () => (T$1.boolToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOrOfHttpClientResponse(), [core.bool])))(),
    SinkOfUint8List: () => (T$1.SinkOfUint8List = dart.constFn(core.Sink$(typed_data.Uint8List)))(),
    EncodingN: () => (T$1.EncodingN = dart.constFn(dart.nullable(convert.Encoding)))(),
    ListOfintToListOfint: () => (T$1.ListOfintToListOfint = dart.constFn(dart.fnType(T$0.ListOfint(), [T$0.ListOfint()])))(),
    CookieTovoid: () => (T$1.CookieTovoid = dart.constFn(dart.fnType(dart.void, [_http.Cookie])))(),
    CompleterOfHttpClientResponse: () => (T$1.CompleterOfHttpClientResponse = dart.constFn(async.Completer$(_http.HttpClientResponse)))(),
    JSArrayOfRedirectInfo: () => (T$1.JSArrayOfRedirectInfo = dart.constFn(_interceptors.JSArray$(_http.RedirectInfo)))(),
    VoidToMap: () => (T$1.VoidToMap = dart.constFn(dart.fnType(core.Map, [])))(),
    JSArrayOfMapOfString$dynamic: () => (T$1.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T$0.MapOfString$dynamic())))(),
    VoidToListOfMapOfString$dynamic: () => (T$1.VoidToListOfMapOfString$dynamic = dart.constFn(dart.fnType(T$0.ListOfMapOfString$dynamic(), [])))(),
    HttpClientResponseToNull: () => (T$1.HttpClientResponseToNull = dart.constFn(dart.fnType(core.Null, [_http.HttpClientResponse])))(),
    JSArrayOfFuture: () => (T$1.JSArrayOfFuture = dart.constFn(_interceptors.JSArray$(async.Future)))(),
    ListToFutureOrOfHttpClientResponse: () => (T$1.ListToFutureOrOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOrOfHttpClientResponse(), [core.List])))(),
    CompleterOfSocket: () => (T$1.CompleterOfSocket = dart.constFn(async.Completer$(io.Socket)))(),
    StringToListOfString: () => (T$1.StringToListOfString = dart.constFn(dart.fnType(T$.ListOfString(), [core.String])))(),
    voidToFuture: () => (T$1.voidToFuture = dart.constFn(dart.fnType(async.Future, [dart.void])))(),
    StreamControllerOfListOfint: () => (T$1.StreamControllerOfListOfint = dart.constFn(async.StreamController$(T$0.ListOfint())))(),
    _HttpOutboundMessageN: () => (T$1._HttpOutboundMessageN = dart.constFn(dart.nullable(_http._HttpOutboundMessage)))(),
    dynamicTo_HttpOutboundMessageN: () => (T$1.dynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(T$1._HttpOutboundMessageN(), [dart.dynamic])))(),
    dynamicAnddynamicTo_HttpOutboundMessageN: () => (T$1.dynamicAnddynamicTo_HttpOutboundMessageN = dart.constFn(dart.fnType(T$1._HttpOutboundMessageN(), [dart.dynamic, dart.dynamic])))(),
    dynamicTo_HttpOutboundMessage: () => (T$1.dynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic])))(),
    dynamicAnddynamicTo_HttpOutboundMessage: () => (T$1.dynamicAnddynamicTo_HttpOutboundMessage = dart.constFn(dart.fnType(_http._HttpOutboundMessage, [dart.dynamic, dart.dynamic])))(),
    dynamicAndStackTraceToNull: () => (T$1.dynamicAndStackTraceToNull = dart.constFn(dart.fnType(core.Null, [dart.dynamic, core.StackTrace])))(),
    _HttpIncomingTovoid: () => (T$1._HttpIncomingTovoid = dart.constFn(dart.fnType(dart.void, [_http._HttpIncoming])))(),
    CompleterOf_HttpIncoming: () => (T$1.CompleterOf_HttpIncoming = dart.constFn(async.Completer$(_http._HttpIncoming)))(),
    _HttpIncomingToNull: () => (T$1._HttpIncomingToNull = dart.constFn(dart.fnType(core.Null, [_http._HttpIncoming])))(),
    SocketToSocket: () => (T$1.SocketToSocket = dart.constFn(dart.fnType(io.Socket, [io.Socket])))(),
    SocketN: () => (T$1.SocketN = dart.constFn(dart.nullable(io.Socket)))(),
    FutureOfSocketN: () => (T$1.FutureOfSocketN = dart.constFn(async.Future$(T$1.SocketN())))(),
    SocketTo_DetachedSocket: () => (T$1.SocketTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [io.Socket])))(),
    SocketTovoid: () => (T$1.SocketTovoid = dart.constFn(dart.fnType(dart.void, [io.Socket])))(),
    FutureOfSecureSocket: () => (T$1.FutureOfSecureSocket = dart.constFn(async.Future$(io.SecureSocket)))(),
    HttpClientResponseToFutureOfSecureSocket: () => (T$1.HttpClientResponseToFutureOfSecureSocket = dart.constFn(dart.fnType(T$1.FutureOfSecureSocket(), [_http.HttpClientResponse])))(),
    SecureSocketTo_HttpClientConnection: () => (T$1.SecureSocketTo_HttpClientConnection = dart.constFn(dart.fnType(_http._HttpClientConnection, [io.SecureSocket])))(),
    _HashSetOf_HttpClientConnection: () => (T$1._HashSetOf_HttpClientConnection = dart.constFn(collection._HashSet$(_http._HttpClientConnection)))(),
    _HashSetOfConnectionTask: () => (T$1._HashSetOfConnectionTask = dart.constFn(collection._HashSet$(io.ConnectionTask)))(),
    FutureOf_ConnectionInfo: () => (T$1.FutureOf_ConnectionInfo = dart.constFn(async.Future$(_http._ConnectionInfo)))(),
    CompleterOf_ConnectionInfo: () => (T$1.CompleterOf_ConnectionInfo = dart.constFn(async.Completer$(_http._ConnectionInfo)))(),
    X509CertificateTobool: () => (T$1.X509CertificateTobool = dart.constFn(dart.fnType(core.bool, [io.X509Certificate])))(),
    _HttpClientConnectionTo_ConnectionInfo: () => (T$1._HttpClientConnectionTo_ConnectionInfo = dart.constFn(dart.fnType(_http._ConnectionInfo, [_http._HttpClientConnection])))(),
    FutureOrOf_ConnectionInfo: () => (T$1.FutureOrOf_ConnectionInfo = dart.constFn(async.FutureOr$(_http._ConnectionInfo)))(),
    dynamicToFutureOrOf_ConnectionInfo: () => (T$1.dynamicToFutureOrOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOrOf_ConnectionInfo(), [dart.dynamic])))(),
    ConnectionTaskToFutureOf_ConnectionInfo: () => (T$1.ConnectionTaskToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOf_ConnectionInfo(), [io.ConnectionTask])))(),
    IdentityMapOfString$_ConnectionTarget: () => (T$1.IdentityMapOfString$_ConnectionTarget = dart.constFn(_js_helper.IdentityMap$(core.String, _http._ConnectionTarget)))(),
    JSArrayOf_Credentials: () => (T$1.JSArrayOf_Credentials = dart.constFn(_interceptors.JSArray$(_http._Credentials)))(),
    JSArrayOf_ProxyCredentials: () => (T$1.JSArrayOf_ProxyCredentials = dart.constFn(_interceptors.JSArray$(_http._ProxyCredentials)))(),
    MapNOfString$String: () => (T$1.MapNOfString$String = dart.constFn(dart.nullable(T$0.MapOfString$String())))(),
    Uri__ToString: () => (T$1.Uri__ToString = dart.constFn(dart.fnType(core.String, [core.Uri], {environment: T$1.MapNOfString$String()}, {})))(),
    _ConnectionTargetTobool: () => (T$1._ConnectionTargetTobool = dart.constFn(dart.fnType(core.bool, [_http._ConnectionTarget])))(),
    _ProxyL: () => (T$1._ProxyL = dart.constFn(dart.legacy(_http._Proxy)))(),
    FutureOf_HttpClientRequest: () => (T$1.FutureOf_HttpClientRequest = dart.constFn(async.Future$(_http._HttpClientRequest)))(),
    _ConnectionInfoTo_HttpClientRequest: () => (T$1._ConnectionInfoTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._ConnectionInfo])))(),
    FutureOrOf_HttpClientRequest: () => (T$1.FutureOrOf_HttpClientRequest = dart.constFn(async.FutureOr$(_http._HttpClientRequest)))(),
    _ConnectionInfoToFutureOrOf_HttpClientRequest: () => (T$1._ConnectionInfoToFutureOrOf_HttpClientRequest = dart.constFn(dart.fnType(T$1.FutureOrOf_HttpClientRequest(), [_http._ConnectionInfo])))(),
    _HttpClientRequestTo_HttpClientRequest: () => (T$1._HttpClientRequestTo_HttpClientRequest = dart.constFn(dart.fnType(_http._HttpClientRequest, [_http._HttpClientRequest])))(),
    VoidTo_ConnectionTarget: () => (T$1.VoidTo_ConnectionTarget = dart.constFn(dart.fnType(_http._ConnectionTarget, [])))(),
    dynamicToFutureOf_ConnectionInfo: () => (T$1.dynamicToFutureOf_ConnectionInfo = dart.constFn(dart.fnType(T$1.FutureOf_ConnectionInfo(), [dart.dynamic])))(),
    _SiteCredentialsN: () => (T$1._SiteCredentialsN = dart.constFn(dart.nullable(_http._SiteCredentials)))(),
    _SiteCredentialsNAnd_CredentialsTo_SiteCredentialsN: () => (T$1._SiteCredentialsNAnd_CredentialsTo_SiteCredentialsN = dart.constFn(dart.fnType(T$1._SiteCredentialsN(), [T$1._SiteCredentialsN(), _http._Credentials])))(),
    StringNToStringN: () => (T$1.StringNToStringN = dart.constFn(dart.fnType(T$.StringN(), [T$.StringN()])))(),
    StreamOfUint8List: () => (T$1.StreamOfUint8List = dart.constFn(async.Stream$(typed_data.Uint8List)))(),
    SocketToNull: () => (T$1.SocketToNull = dart.constFn(dart.fnType(core.Null, [io.Socket])))(),
    dynamicTo_DetachedSocket: () => (T$1.dynamicTo_DetachedSocket = dart.constFn(dart.fnType(_http._DetachedSocket, [dart.dynamic])))(),
    IdentityMapOfint$_HttpConnection: () => (T$1.IdentityMapOfint$_HttpConnection = dart.constFn(_js_helper.IdentityMap$(core.int, _http._HttpConnection)))(),
    LinkedListOf_HttpConnection: () => (T$1.LinkedListOf_HttpConnection = dart.constFn(collection.LinkedList$(_http._HttpConnection)))(),
    StreamControllerOfHttpRequest: () => (T$1.StreamControllerOfHttpRequest = dart.constFn(async.StreamController$(_http.HttpRequest)))(),
    ServerSocketTo_HttpServer: () => (T$1.ServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.ServerSocket])))(),
    SecureServerSocketTo_HttpServer: () => (T$1.SecureServerSocketTo_HttpServer = dart.constFn(dart.fnType(_http._HttpServer, [io.SecureServerSocket])))(),
    _HttpConnectionTovoid: () => (T$1._HttpConnectionTovoid = dart.constFn(dart.fnType(dart.void, [_http._HttpConnection])))(),
    _HttpConnectionToMap: () => (T$1._HttpConnectionToMap = dart.constFn(dart.fnType(core.Map, [_http._HttpConnection])))(),
    LinkedMapOfint$_HttpServer: () => (T$1.LinkedMapOfint$_HttpServer = dart.constFn(_js_helper.LinkedMap$(core.int, _http._HttpServer)))(),
    JSArrayOf_Proxy: () => (T$1.JSArrayOf_Proxy = dart.constFn(_interceptors.JSArray$(_http._Proxy)))(),
    StreamControllerOf_HttpIncoming: () => (T$1.StreamControllerOf_HttpIncoming = dart.constFn(async.StreamController$(_http._HttpIncoming)))(),
    IterableOfMapEntry: () => (T$1.IterableOfMapEntry = dart.constFn(core.Iterable$(core.MapEntry)))(),
    VoidToNdynamic: () => (T$1.VoidToNdynamic = dart.constFn(dart.nullable(T$.VoidTodynamic())))(),
    IdentityMapOfString$_HttpSession: () => (T$1.IdentityMapOfString$_HttpSession = dart.constFn(_js_helper.IdentityMap$(core.String, _http._HttpSession)))(),
    HttpOverridesN: () => (T$1.HttpOverridesN = dart.constFn(dart.nullable(_http.HttpOverrides)))(),
    EventSinkTo_WebSocketProtocolTransformer: () => (T$1.EventSinkTo_WebSocketProtocolTransformer = dart.constFn(dart.fnType(_http._WebSocketProtocolTransformer, [async.EventSink])))(),
    StreamControllerOfWebSocket: () => (T$1.StreamControllerOfWebSocket = dart.constFn(async.StreamController$(_http.WebSocket)))(),
    StreamOfHttpRequest: () => (T$1.StreamOfHttpRequest = dart.constFn(async.Stream$(_http.HttpRequest)))(),
    WebSocketTovoid: () => (T$1.WebSocketTovoid = dart.constFn(dart.fnType(dart.void, [_http.WebSocket])))(),
    HttpRequestTovoid: () => (T$1.HttpRequestTovoid = dart.constFn(dart.fnType(dart.void, [_http.HttpRequest])))(),
    FutureOfWebSocket: () => (T$1.FutureOfWebSocket = dart.constFn(async.Future$(_http.WebSocket)))(),
    SocketTo_WebSocketImpl: () => (T$1.SocketTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [io.Socket])))(),
    StringNToFutureOfWebSocket: () => (T$1.StringNToFutureOfWebSocket = dart.constFn(dart.fnType(T$1.FutureOfWebSocket(), [T$.StringN()])))(),
    VoidToFutureOrOfString: () => (T$1.VoidToFutureOrOfString = dart.constFn(dart.fnType(T$0.FutureOrOfString(), [])))(),
    EventSinkOfListOfint: () => (T$1.EventSinkOfListOfint = dart.constFn(async.EventSink$(T$0.ListOfint())))(),
    EventSinkOfListOfintTo_WebSocketOutgoingTransformer: () => (T$1.EventSinkOfListOfintTo_WebSocketOutgoingTransformer = dart.constFn(dart.fnType(_http._WebSocketOutgoingTransformer, [T$1.EventSinkOfListOfint()])))(),
    CompleterOfWebSocket: () => (T$1.CompleterOfWebSocket = dart.constFn(async.Completer$(_http.WebSocket)))(),
    dynamicTo_WebSocketImpl: () => (T$1.dynamicTo_WebSocketImpl = dart.constFn(dart.fnType(_http._WebSocketImpl, [dart.dynamic])))(),
    HttpClientRequestToFutureOfHttpClientResponse: () => (T$1.HttpClientRequestToFutureOfHttpClientResponse = dart.constFn(dart.fnType(T$1.FutureOfHttpClientResponse(), [_http.HttpClientRequest])))(),
    StringToNever: () => (T$1.StringToNever = dart.constFn(dart.fnType(dart.Never, [core.String])))(),
    HttpClientResponseToFutureOfWebSocket: () => (T$1.HttpClientResponseToFutureOfWebSocket = dart.constFn(dart.fnType(T$1.FutureOfWebSocket(), [_http.HttpClientResponse])))(),
    dynamicToMap: () => (T$1.dynamicToMap = dart.constFn(dart.fnType(core.Map, [dart.dynamic])))(),
    LinkedMapOfint$_WebSocketImpl: () => (T$1.LinkedMapOfint$_WebSocketImpl = dart.constFn(_js_helper.LinkedMap$(core.int, _http._WebSocketImpl)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T$, T$0, T$1);
  var S = {
    _delete$1: dart.privateName(indexed_db, "_delete"),
    $delete: dartx.delete = Symbol("dartx.delete"),
    _update: dart.privateName(indexed_db, "_update"),
    $next: dartx.next = Symbol("dartx.next"),
    $direction: dartx.direction = Symbol("dartx.direction"),
    $key: dartx.key = Symbol("dartx.key"),
    $primaryKey: dartx.primaryKey = Symbol("dartx.primaryKey"),
    $source: dartx.source = Symbol("dartx.source"),
    $advance: dartx.advance = Symbol("dartx.advance"),
    $continuePrimaryKey: dartx.continuePrimaryKey = Symbol("dartx.continuePrimaryKey"),
    _update_1: dart.privateName(indexed_db, "_update_1"),
    _get_value: dart.privateName(indexed_db, "_get_value"),
    $value: dartx.value = Symbol("dartx.value"),
    _createObjectStore: dart.privateName(indexed_db, "_createObjectStore"),
    $createObjectStore: dartx.createObjectStore = Symbol("dartx.createObjectStore"),
    _transaction: dart.privateName(indexed_db, "_transaction"),
    $transaction: dartx.transaction = Symbol("dartx.transaction"),
    $transactionStore: dartx.transactionStore = Symbol("dartx.transactionStore"),
    $transactionList: dartx.transactionList = Symbol("dartx.transactionList"),
    $transactionStores: dartx.transactionStores = Symbol("dartx.transactionStores"),
    $objectStoreNames: dartx.objectStoreNames = Symbol("dartx.objectStoreNames"),
    $version: dartx.version = Symbol("dartx.version"),
    $close: dartx.close = Symbol("dartx.close"),
    _createObjectStore_1: dart.privateName(indexed_db, "_createObjectStore_1"),
    _createObjectStore_2: dart.privateName(indexed_db, "_createObjectStore_2"),
    $deleteObjectStore: dartx.deleteObjectStore = Symbol("dartx.deleteObjectStore"),
    $onAbort: dartx.onAbort = Symbol("dartx.onAbort"),
    $onClose: dartx.onClose = Symbol("dartx.onClose"),
    $onError: dartx.onError = Symbol("dartx.onError"),
    $onVersionChange: dartx.onVersionChange = Symbol("dartx.onVersionChange"),
    $on: dartx.on = Symbol("dartx.on"),
    _addEventListener: dart.privateName(html$, "_addEventListener"),
    $addEventListener: dartx.addEventListener = Symbol("dartx.addEventListener"),
    _removeEventListener: dart.privateName(html$, "_removeEventListener"),
    $removeEventListener: dartx.removeEventListener = Symbol("dartx.removeEventListener"),
    $dispatchEvent: dartx.dispatchEvent = Symbol("dartx.dispatchEvent"),
    EventStreamProvider__eventType: dart.privateName(html$, "EventStreamProvider._eventType"),
    _open: dart.privateName(indexed_db, "_open"),
    $onUpgradeNeeded: dartx.onUpgradeNeeded = Symbol("dartx.onUpgradeNeeded"),
    $onBlocked: dartx.onBlocked = Symbol("dartx.onBlocked"),
    $open: dartx.open = Symbol("dartx.open"),
    _deleteDatabase: dart.privateName(indexed_db, "_deleteDatabase"),
    $onSuccess: dartx.onSuccess = Symbol("dartx.onSuccess"),
    $deleteDatabase: dartx.deleteDatabase = Symbol("dartx.deleteDatabase"),
    $supportsDatabaseNames: dartx.supportsDatabaseNames = Symbol("dartx.supportsDatabaseNames"),
    $cmp: dartx.cmp = Symbol("dartx.cmp"),
    _count$2: dart.privateName(indexed_db, "_count"),
    $count: dartx.count = Symbol("dartx.count"),
    _get: dart.privateName(indexed_db, "_get"),
    $get: dartx.get = Symbol("dartx.get"),
    _getKey: dart.privateName(indexed_db, "_getKey"),
    $getKey: dartx.getKey = Symbol("dartx.getKey"),
    _openCursor: dart.privateName(indexed_db, "_openCursor"),
    $openCursor: dartx.openCursor = Symbol("dartx.openCursor"),
    _openKeyCursor: dart.privateName(indexed_db, "_openKeyCursor"),
    $openKeyCursor: dartx.openKeyCursor = Symbol("dartx.openKeyCursor"),
    $keyPath: dartx.keyPath = Symbol("dartx.keyPath"),
    $multiEntry: dartx.multiEntry = Symbol("dartx.multiEntry"),
    $objectStore: dartx.objectStore = Symbol("dartx.objectStore"),
    $unique: dartx.unique = Symbol("dartx.unique"),
    $getAll: dartx.getAll = Symbol("dartx.getAll"),
    $getAllKeys: dartx.getAllKeys = Symbol("dartx.getAllKeys"),
    $lower: dartx.lower = Symbol("dartx.lower"),
    $lowerOpen: dartx.lowerOpen = Symbol("dartx.lowerOpen"),
    $upper: dartx.upper = Symbol("dartx.upper"),
    $upperOpen: dartx.upperOpen = Symbol("dartx.upperOpen"),
    $includes: dartx.includes = Symbol("dartx.includes"),
    _add$3: dart.privateName(indexed_db, "_add"),
    _clear$2: dart.privateName(indexed_db, "_clear"),
    _put: dart.privateName(indexed_db, "_put"),
    $put: dartx.put = Symbol("dartx.put"),
    $getObject: dartx.getObject = Symbol("dartx.getObject"),
    _createIndex: dart.privateName(indexed_db, "_createIndex"),
    $createIndex: dartx.createIndex = Symbol("dartx.createIndex"),
    $autoIncrement: dartx.autoIncrement = Symbol("dartx.autoIncrement"),
    $indexNames: dartx.indexNames = Symbol("dartx.indexNames"),
    _add_1: dart.privateName(indexed_db, "_add_1"),
    _add_2: dart.privateName(indexed_db, "_add_2"),
    _createIndex_1: dart.privateName(indexed_db, "_createIndex_1"),
    _createIndex_2: dart.privateName(indexed_db, "_createIndex_2"),
    $deleteIndex: dartx.deleteIndex = Symbol("dartx.deleteIndex"),
    $index: dartx.index = Symbol("dartx.index"),
    _put_1: dart.privateName(indexed_db, "_put_1"),
    _put_2: dart.privateName(indexed_db, "_put_2"),
    $result: dartx.result = Symbol("dartx.result"),
    $type: dartx.type = Symbol("dartx.type"),
    _observe_1: dart.privateName(indexed_db, "_observe_1"),
    $observe: dartx.observe = Symbol("dartx.observe"),
    $unobserve: dartx.unobserve = Symbol("dartx.unobserve"),
    $database: dartx.database = Symbol("dartx.database"),
    $records: dartx.records = Symbol("dartx.records"),
    $error: dartx.error = Symbol("dartx.error"),
    $readyState: dartx.readyState = Symbol("dartx.readyState"),
    _get_result: dart.privateName(indexed_db, "_get_result"),
    $onComplete: dartx.onComplete = Symbol("dartx.onComplete"),
    $completed: dartx.completed = Symbol("dartx.completed"),
    $db: dartx.db = Symbol("dartx.db"),
    $mode: dartx.mode = Symbol("dartx.mode"),
    $abort: dartx.abort = Symbol("dartx.abort"),
    $dataLoss: dartx.dataLoss = Symbol("dartx.dataLoss"),
    $dataLossMessage: dartx.dataLossMessage = Symbol("dartx.dataLossMessage"),
    $newVersion: dartx.newVersion = Symbol("dartx.newVersion"),
    $oldVersion: dartx.oldVersion = Symbol("dartx.oldVersion"),
    $target: dartx.target = Symbol("dartx.target"),
    _createEvent: dart.privateName(html$, "_createEvent"),
    _initEvent: dart.privateName(html$, "_initEvent"),
    _selector: dart.privateName(html$, "_selector"),
    $currentTarget: dartx.currentTarget = Symbol("dartx.currentTarget"),
    $matches: dartx.matches = Symbol("dartx.matches"),
    $parent: dartx.parent = Symbol("dartx.parent"),
    $matchingTarget: dartx.matchingTarget = Symbol("dartx.matchingTarget"),
    $path: dartx.path = Symbol("dartx.path"),
    $bubbles: dartx.bubbles = Symbol("dartx.bubbles"),
    $cancelable: dartx.cancelable = Symbol("dartx.cancelable"),
    $composed: dartx.composed = Symbol("dartx.composed"),
    _get_currentTarget: dart.privateName(html$, "_get_currentTarget"),
    $defaultPrevented: dartx.defaultPrevented = Symbol("dartx.defaultPrevented"),
    $eventPhase: dartx.eventPhase = Symbol("dartx.eventPhase"),
    $isTrusted: dartx.isTrusted = Symbol("dartx.isTrusted"),
    _get_target: dart.privateName(html$, "_get_target"),
    $timeStamp: dartx.timeStamp = Symbol("dartx.timeStamp"),
    $composedPath: dartx.composedPath = Symbol("dartx.composedPath"),
    $preventDefault: dartx.preventDefault = Symbol("dartx.preventDefault"),
    $stopImmediatePropagation: dartx.stopImmediatePropagation = Symbol("dartx.stopImmediatePropagation"),
    $stopPropagation: dartx.stopPropagation = Symbol("dartx.stopPropagation"),
    $nonce: dartx.nonce = Symbol("dartx.nonce"),
    $createFragment: dartx.createFragment = Symbol("dartx.createFragment"),
    $nodes: dartx.nodes = Symbol("dartx.nodes"),
    $attributes: dartx.attributes = Symbol("dartx.attributes"),
    _getAttribute: dart.privateName(html$, "_getAttribute"),
    $getAttribute: dartx.getAttribute = Symbol("dartx.getAttribute"),
    _getAttributeNS: dart.privateName(html$, "_getAttributeNS"),
    $getAttributeNS: dartx.getAttributeNS = Symbol("dartx.getAttributeNS"),
    _hasAttribute: dart.privateName(html$, "_hasAttribute"),
    $hasAttribute: dartx.hasAttribute = Symbol("dartx.hasAttribute"),
    _hasAttributeNS: dart.privateName(html$, "_hasAttributeNS"),
    $hasAttributeNS: dartx.hasAttributeNS = Symbol("dartx.hasAttributeNS"),
    _removeAttribute: dart.privateName(html$, "_removeAttribute"),
    $removeAttribute: dartx.removeAttribute = Symbol("dartx.removeAttribute"),
    _removeAttributeNS: dart.privateName(html$, "_removeAttributeNS"),
    $removeAttributeNS: dartx.removeAttributeNS = Symbol("dartx.removeAttributeNS"),
    _setAttribute: dart.privateName(html$, "_setAttribute"),
    $setAttribute: dartx.setAttribute = Symbol("dartx.setAttribute"),
    _setAttributeNS: dart.privateName(html$, "_setAttributeNS"),
    $setAttributeNS: dartx.setAttributeNS = Symbol("dartx.setAttributeNS"),
    $children: dartx.children = Symbol("dartx.children"),
    _children: dart.privateName(html$, "_children"),
    _querySelectorAll: dart.privateName(html$, "_querySelectorAll"),
    $querySelectorAll: dartx.querySelectorAll = Symbol("dartx.querySelectorAll"),
    _setApplyScroll: dart.privateName(html$, "_setApplyScroll"),
    $setApplyScroll: dartx.setApplyScroll = Symbol("dartx.setApplyScroll"),
    _setDistributeScroll: dart.privateName(html$, "_setDistributeScroll"),
    $setDistributeScroll: dartx.setDistributeScroll = Symbol("dartx.setDistributeScroll"),
    $classes: dartx.classes = Symbol("dartx.classes"),
    $dataset: dartx.dataset = Symbol("dartx.dataset"),
    $getNamespacedAttributes: dartx.getNamespacedAttributes = Symbol("dartx.getNamespacedAttributes"),
    _getComputedStyle: dart.privateName(html$, "_getComputedStyle"),
    $getComputedStyle: dartx.getComputedStyle = Symbol("dartx.getComputedStyle"),
    $client: dartx.client = Symbol("dartx.client"),
    $offsetLeft: dartx.offsetLeft = Symbol("dartx.offsetLeft"),
    $offsetTop: dartx.offsetTop = Symbol("dartx.offsetTop"),
    $offsetWidth: dartx.offsetWidth = Symbol("dartx.offsetWidth"),
    $offsetHeight: dartx.offsetHeight = Symbol("dartx.offsetHeight"),
    $offset: dartx.offset = Symbol("dartx.offset"),
    $append: dartx.append = Symbol("dartx.append"),
    $appendText: dartx.appendText = Symbol("dartx.appendText"),
    $insertAdjacentHtml: dartx.insertAdjacentHtml = Symbol("dartx.insertAdjacentHtml"),
    $appendHtml: dartx.appendHtml = Symbol("dartx.appendHtml"),
    $enteredView: dartx.enteredView = Symbol("dartx.enteredView"),
    $attached: dartx.attached = Symbol("dartx.attached"),
    $leftView: dartx.leftView = Symbol("dartx.leftView"),
    $detached: dartx.detached = Symbol("dartx.detached"),
    _getClientRects: dart.privateName(html$, "_getClientRects"),
    $getClientRects: dartx.getClientRects = Symbol("dartx.getClientRects"),
    _animate: dart.privateName(html$, "_animate"),
    $animate: dartx.animate = Symbol("dartx.animate"),
    $attributeChanged: dartx.attributeChanged = Symbol("dartx.attributeChanged"),
    _localName: dart.privateName(html$, "_localName"),
    $localName: dartx.localName = Symbol("dartx.localName"),
    _namespaceUri: dart.privateName(html$, "_namespaceUri"),
    $namespaceUri: dartx.namespaceUri = Symbol("dartx.namespaceUri"),
    _scrollIntoView: dart.privateName(html$, "_scrollIntoView"),
    _scrollIntoViewIfNeeded: dart.privateName(html$, "_scrollIntoViewIfNeeded"),
    $scrollIntoView: dartx.scrollIntoView = Symbol("dartx.scrollIntoView"),
    _insertAdjacentText: dart.privateName(html$, "_insertAdjacentText"),
    _insertAdjacentNode: dart.privateName(html$, "_insertAdjacentNode"),
    $insertAdjacentText: dartx.insertAdjacentText = Symbol("dartx.insertAdjacentText"),
    _insertAdjacentHtml: dart.privateName(html$, "_insertAdjacentHtml"),
    _insertAdjacentElement: dart.privateName(html$, "_insertAdjacentElement"),
    $insertAdjacentElement: dartx.insertAdjacentElement = Symbol("dartx.insertAdjacentElement"),
    $nextNode: dartx.nextNode = Symbol("dartx.nextNode"),
    $matchesWithAncestors: dartx.matchesWithAncestors = Symbol("dartx.matchesWithAncestors"),
    $createShadowRoot: dartx.createShadowRoot = Symbol("dartx.createShadowRoot"),
    $shadowRoot: dartx.shadowRoot = Symbol("dartx.shadowRoot"),
    $contentEdge: dartx.contentEdge = Symbol("dartx.contentEdge"),
    $paddingEdge: dartx.paddingEdge = Symbol("dartx.paddingEdge"),
    $borderEdge: dartx.borderEdge = Symbol("dartx.borderEdge"),
    $marginEdge: dartx.marginEdge = Symbol("dartx.marginEdge"),
    $offsetTo: dartx.offsetTo = Symbol("dartx.offsetTo"),
    $documentOffset: dartx.documentOffset = Symbol("dartx.documentOffset"),
    $createHtmlDocument: dartx.createHtmlDocument = Symbol("dartx.createHtmlDocument"),
    $createElement: dartx.createElement = Symbol("dartx.createElement"),
    $baseUri: dartx.baseUri = Symbol("dartx.baseUri"),
    $head: dartx.head = Symbol("dartx.head"),
    _canBeUsedToCreateContextualFragment: dart.privateName(html$, "_canBeUsedToCreateContextualFragment"),
    _innerHtml: dart.privateName(html$, "_innerHtml"),
    _cannotBeUsedToCreateContextualFragment: dart.privateName(html$, "_cannotBeUsedToCreateContextualFragment"),
    $setInnerHtml: dartx.setInnerHtml = Symbol("dartx.setInnerHtml"),
    $innerHtml: dartx.innerHtml = Symbol("dartx.innerHtml"),
    $text: dartx.text = Symbol("dartx.text"),
    $innerText: dartx.innerText = Symbol("dartx.innerText"),
    $offsetParent: dartx.offsetParent = Symbol("dartx.offsetParent"),
    $scrollHeight: dartx.scrollHeight = Symbol("dartx.scrollHeight"),
    $scrollLeft: dartx.scrollLeft = Symbol("dartx.scrollLeft"),
    $scrollTop: dartx.scrollTop = Symbol("dartx.scrollTop"),
    $scrollWidth: dartx.scrollWidth = Symbol("dartx.scrollWidth"),
    $contentEditable: dartx.contentEditable = Symbol("dartx.contentEditable"),
    $dir: dartx.dir = Symbol("dartx.dir"),
    $draggable: dartx.draggable = Symbol("dartx.draggable"),
    $hidden: dartx.hidden = Symbol("dartx.hidden"),
    $inert: dartx.inert = Symbol("dartx.inert"),
    $inputMode: dartx.inputMode = Symbol("dartx.inputMode"),
    $isContentEditable: dartx.isContentEditable = Symbol("dartx.isContentEditable"),
    $lang: dartx.lang = Symbol("dartx.lang"),
    $spellcheck: dartx.spellcheck = Symbol("dartx.spellcheck"),
    $style: dartx.style = Symbol("dartx.style"),
    $tabIndex: dartx.tabIndex = Symbol("dartx.tabIndex"),
    $title: dartx.title = Symbol("dartx.title"),
    $translate: dartx.translate = Symbol("dartx.translate"),
    $blur: dartx.blur = Symbol("dartx.blur"),
    $click: dartx.click = Symbol("dartx.click"),
    $focus: dartx.focus = Symbol("dartx.focus"),
    $accessibleNode: dartx.accessibleNode = Symbol("dartx.accessibleNode"),
    $assignedSlot: dartx.assignedSlot = Symbol("dartx.assignedSlot"),
    _attributes$1: dart.privateName(html$, "_attributes"),
    $className: dartx.className = Symbol("dartx.className"),
    $clientHeight: dartx.clientHeight = Symbol("dartx.clientHeight"),
    $clientLeft: dartx.clientLeft = Symbol("dartx.clientLeft"),
    $clientTop: dartx.clientTop = Symbol("dartx.clientTop"),
    $clientWidth: dartx.clientWidth = Symbol("dartx.clientWidth"),
    $computedName: dartx.computedName = Symbol("dartx.computedName"),
    $computedRole: dartx.computedRole = Symbol("dartx.computedRole"),
    $id: dartx.id = Symbol("dartx.id"),
    $outerHtml: dartx.outerHtml = Symbol("dartx.outerHtml"),
    _scrollHeight: dart.privateName(html$, "_scrollHeight"),
    _scrollLeft: dart.privateName(html$, "_scrollLeft"),
    _scrollTop: dart.privateName(html$, "_scrollTop"),
    _scrollWidth: dart.privateName(html$, "_scrollWidth"),
    $slot: dartx.slot = Symbol("dartx.slot"),
    $styleMap: dartx.styleMap = Symbol("dartx.styleMap"),
    $tagName: dartx.tagName = Symbol("dartx.tagName"),
    _attachShadow_1: dart.privateName(html$, "_attachShadow_1"),
    $attachShadow: dartx.attachShadow = Symbol("dartx.attachShadow"),
    $closest: dartx.closest = Symbol("dartx.closest"),
    $getAnimations: dartx.getAnimations = Symbol("dartx.getAnimations"),
    $getAttributeNames: dartx.getAttributeNames = Symbol("dartx.getAttributeNames"),
    $getBoundingClientRect: dartx.getBoundingClientRect = Symbol("dartx.getBoundingClientRect"),
    $getDestinationInsertionPoints: dartx.getDestinationInsertionPoints = Symbol("dartx.getDestinationInsertionPoints"),
    $getElementsByClassName: dartx.getElementsByClassName = Symbol("dartx.getElementsByClassName"),
    _getElementsByTagName: dart.privateName(html$, "_getElementsByTagName"),
    $hasPointerCapture: dartx.hasPointerCapture = Symbol("dartx.hasPointerCapture"),
    $releasePointerCapture: dartx.releasePointerCapture = Symbol("dartx.releasePointerCapture"),
    $requestPointerLock: dartx.requestPointerLock = Symbol("dartx.requestPointerLock"),
    _scroll_1: dart.privateName(html$, "_scroll_1"),
    _scroll_2: dart.privateName(html$, "_scroll_2"),
    _scroll_3: dart.privateName(html$, "_scroll_3"),
    $scroll: dartx.scroll = Symbol("dartx.scroll"),
    _scrollBy_1: dart.privateName(html$, "_scrollBy_1"),
    _scrollBy_2: dart.privateName(html$, "_scrollBy_2"),
    _scrollBy_3: dart.privateName(html$, "_scrollBy_3"),
    $scrollBy: dartx.scrollBy = Symbol("dartx.scrollBy"),
    _scrollTo_1: dart.privateName(html$, "_scrollTo_1"),
    _scrollTo_2: dart.privateName(html$, "_scrollTo_2"),
    _scrollTo_3: dart.privateName(html$, "_scrollTo_3"),
    $scrollTo: dartx.scrollTo = Symbol("dartx.scrollTo"),
    $setPointerCapture: dartx.setPointerCapture = Symbol("dartx.setPointerCapture"),
    $requestFullscreen: dartx.requestFullscreen = Symbol("dartx.requestFullscreen"),
    $after: dartx.after = Symbol("dartx.after"),
    $before: dartx.before = Symbol("dartx.before"),
    $nextElementSibling: dartx.nextElementSibling = Symbol("dartx.nextElementSibling"),
    $previousElementSibling: dartx.previousElementSibling = Symbol("dartx.previousElementSibling"),
    _childElementCount: dart.privateName(html$, "_childElementCount"),
    _firstElementChild: dart.privateName(html$, "_firstElementChild"),
    _lastElementChild: dart.privateName(html$, "_lastElementChild"),
    $querySelector: dartx.querySelector = Symbol("dartx.querySelector"),
    $onBeforeCopy: dartx.onBeforeCopy = Symbol("dartx.onBeforeCopy"),
    $onBeforeCut: dartx.onBeforeCut = Symbol("dartx.onBeforeCut"),
    $onBeforePaste: dartx.onBeforePaste = Symbol("dartx.onBeforePaste"),
    $onBlur: dartx.onBlur = Symbol("dartx.onBlur"),
    $onCanPlay: dartx.onCanPlay = Symbol("dartx.onCanPlay"),
    $onCanPlayThrough: dartx.onCanPlayThrough = Symbol("dartx.onCanPlayThrough"),
    $onChange: dartx.onChange = Symbol("dartx.onChange"),
    $onClick: dartx.onClick = Symbol("dartx.onClick"),
    $onContextMenu: dartx.onContextMenu = Symbol("dartx.onContextMenu"),
    $onCopy: dartx.onCopy = Symbol("dartx.onCopy"),
    $onCut: dartx.onCut = Symbol("dartx.onCut"),
    $onDoubleClick: dartx.onDoubleClick = Symbol("dartx.onDoubleClick"),
    $onDrag: dartx.onDrag = Symbol("dartx.onDrag"),
    $onDragEnd: dartx.onDragEnd = Symbol("dartx.onDragEnd"),
    $onDragEnter: dartx.onDragEnter = Symbol("dartx.onDragEnter"),
    $onDragLeave: dartx.onDragLeave = Symbol("dartx.onDragLeave"),
    $onDragOver: dartx.onDragOver = Symbol("dartx.onDragOver"),
    $onDragStart: dartx.onDragStart = Symbol("dartx.onDragStart"),
    $onDrop: dartx.onDrop = Symbol("dartx.onDrop"),
    $onDurationChange: dartx.onDurationChange = Symbol("dartx.onDurationChange"),
    $onEmptied: dartx.onEmptied = Symbol("dartx.onEmptied"),
    $onEnded: dartx.onEnded = Symbol("dartx.onEnded"),
    $onFocus: dartx.onFocus = Symbol("dartx.onFocus"),
    $onInput: dartx.onInput = Symbol("dartx.onInput"),
    $onInvalid: dartx.onInvalid = Symbol("dartx.onInvalid"),
    $onKeyDown: dartx.onKeyDown = Symbol("dartx.onKeyDown"),
    $onKeyPress: dartx.onKeyPress = Symbol("dartx.onKeyPress"),
    $onKeyUp: dartx.onKeyUp = Symbol("dartx.onKeyUp"),
    $onLoad: dartx.onLoad = Symbol("dartx.onLoad"),
    $onLoadedData: dartx.onLoadedData = Symbol("dartx.onLoadedData"),
    $onLoadedMetadata: dartx.onLoadedMetadata = Symbol("dartx.onLoadedMetadata"),
    $onMouseDown: dartx.onMouseDown = Symbol("dartx.onMouseDown"),
    $onMouseEnter: dartx.onMouseEnter = Symbol("dartx.onMouseEnter"),
    $onMouseLeave: dartx.onMouseLeave = Symbol("dartx.onMouseLeave"),
    $onMouseMove: dartx.onMouseMove = Symbol("dartx.onMouseMove"),
    $onMouseOut: dartx.onMouseOut = Symbol("dartx.onMouseOut"),
    $onMouseOver: dartx.onMouseOver = Symbol("dartx.onMouseOver"),
    $onMouseUp: dartx.onMouseUp = Symbol("dartx.onMouseUp"),
    $onMouseWheel: dartx.onMouseWheel = Symbol("dartx.onMouseWheel"),
    $onPaste: dartx.onPaste = Symbol("dartx.onPaste"),
    $onPause: dartx.onPause = Symbol("dartx.onPause"),
    $onPlay: dartx.onPlay = Symbol("dartx.onPlay"),
    $onPlaying: dartx.onPlaying = Symbol("dartx.onPlaying"),
    $onRateChange: dartx.onRateChange = Symbol("dartx.onRateChange"),
    $onReset: dartx.onReset = Symbol("dartx.onReset"),
    $onResize: dartx.onResize = Symbol("dartx.onResize"),
    $onScroll: dartx.onScroll = Symbol("dartx.onScroll"),
    $onSearch: dartx.onSearch = Symbol("dartx.onSearch"),
    $onSeeked: dartx.onSeeked = Symbol("dartx.onSeeked"),
    $onSeeking: dartx.onSeeking = Symbol("dartx.onSeeking"),
    $onSelect: dartx.onSelect = Symbol("dartx.onSelect"),
    $onSelectStart: dartx.onSelectStart = Symbol("dartx.onSelectStart"),
    $onStalled: dartx.onStalled = Symbol("dartx.onStalled"),
    $onSubmit: dartx.onSubmit = Symbol("dartx.onSubmit"),
    $onSuspend: dartx.onSuspend = Symbol("dartx.onSuspend"),
    $onTimeUpdate: dartx.onTimeUpdate = Symbol("dartx.onTimeUpdate"),
    $onTouchCancel: dartx.onTouchCancel = Symbol("dartx.onTouchCancel"),
    $onTouchEnd: dartx.onTouchEnd = Symbol("dartx.onTouchEnd"),
    $onTouchEnter: dartx.onTouchEnter = Symbol("dartx.onTouchEnter"),
    $onTouchLeave: dartx.onTouchLeave = Symbol("dartx.onTouchLeave")
  };
  var S$ = {
    $onTouchMove: dartx.onTouchMove = Symbol("dartx.onTouchMove"),
    $onTouchStart: dartx.onTouchStart = Symbol("dartx.onTouchStart"),
    $onTransitionEnd: dartx.onTransitionEnd = Symbol("dartx.onTransitionEnd"),
    $onVolumeChange: dartx.onVolumeChange = Symbol("dartx.onVolumeChange"),
    $onWaiting: dartx.onWaiting = Symbol("dartx.onWaiting"),
    $onFullscreenChange: dartx.onFullscreenChange = Symbol("dartx.onFullscreenChange"),
    $onFullscreenError: dartx.onFullscreenError = Symbol("dartx.onFullscreenError"),
    $onWheel: dartx.onWheel = Symbol("dartx.onWheel"),
    _removeChild: dart.privateName(html$, "_removeChild"),
    _replaceChild: dart.privateName(html$, "_replaceChild"),
    $replaceWith: dartx.replaceWith = Symbol("dartx.replaceWith"),
    _this: dart.privateName(html$, "_this"),
    $insertAllBefore: dartx.insertAllBefore = Symbol("dartx.insertAllBefore"),
    _clearChildren: dart.privateName(html$, "_clearChildren"),
    $childNodes: dartx.childNodes = Symbol("dartx.childNodes"),
    $firstChild: dartx.firstChild = Symbol("dartx.firstChild"),
    $isConnected: dartx.isConnected = Symbol("dartx.isConnected"),
    $lastChild: dartx.lastChild = Symbol("dartx.lastChild"),
    $nodeName: dartx.nodeName = Symbol("dartx.nodeName"),
    $nodeType: dartx.nodeType = Symbol("dartx.nodeType"),
    $nodeValue: dartx.nodeValue = Symbol("dartx.nodeValue"),
    $ownerDocument: dartx.ownerDocument = Symbol("dartx.ownerDocument"),
    $parentNode: dartx.parentNode = Symbol("dartx.parentNode"),
    $previousNode: dartx.previousNode = Symbol("dartx.previousNode"),
    $clone: dartx.clone = Symbol("dartx.clone"),
    _getRootNode_1: dart.privateName(html$, "_getRootNode_1"),
    _getRootNode_2: dart.privateName(html$, "_getRootNode_2"),
    $getRootNode: dartx.getRootNode = Symbol("dartx.getRootNode"),
    $hasChildNodes: dartx.hasChildNodes = Symbol("dartx.hasChildNodes"),
    $insertBefore: dartx.insertBefore = Symbol("dartx.insertBefore"),
    _CustomEventStreamProvider__eventTypeGetter: dart.privateName(html$, "_CustomEventStreamProvider._eventTypeGetter"),
    $respondWith: dartx.respondWith = Symbol("dartx.respondWith"),
    $waitUntil: dartx.waitUntil = Symbol("dartx.waitUntil"),
    $quaternion: dartx.quaternion = Symbol("dartx.quaternion"),
    $populateMatrix: dartx.populateMatrix = Symbol("dartx.populateMatrix"),
    $activated: dartx.activated = Symbol("dartx.activated"),
    $hasReading: dartx.hasReading = Symbol("dartx.hasReading"),
    $timestamp: dartx.timestamp = Symbol("dartx.timestamp"),
    $start: dartx.start = Symbol("dartx.start"),
    $stop: dartx.stop = Symbol("dartx.stop"),
    $x: dartx.x = Symbol("dartx.x"),
    $y: dartx.y = Symbol("dartx.y"),
    $z: dartx.z = Symbol("dartx.z"),
    $activeDescendant: dartx.activeDescendant = Symbol("dartx.activeDescendant"),
    $atomic: dartx.atomic = Symbol("dartx.atomic"),
    $autocomplete: dartx.autocomplete = Symbol("dartx.autocomplete"),
    $busy: dartx.busy = Symbol("dartx.busy"),
    $checked: dartx.checked = Symbol("dartx.checked"),
    $colCount: dartx.colCount = Symbol("dartx.colCount"),
    $colIndex: dartx.colIndex = Symbol("dartx.colIndex"),
    $colSpan: dartx.colSpan = Symbol("dartx.colSpan"),
    $controls: dartx.controls = Symbol("dartx.controls"),
    $current: dartx.current = Symbol("dartx.current"),
    $describedBy: dartx.describedBy = Symbol("dartx.describedBy"),
    $details: dartx.details = Symbol("dartx.details"),
    $disabled: dartx.disabled = Symbol("dartx.disabled"),
    $errorMessage: dartx.errorMessage = Symbol("dartx.errorMessage"),
    $expanded: dartx.expanded = Symbol("dartx.expanded"),
    $flowTo: dartx.flowTo = Symbol("dartx.flowTo"),
    $hasPopUp: dartx.hasPopUp = Symbol("dartx.hasPopUp"),
    $invalid: dartx.invalid = Symbol("dartx.invalid"),
    $keyShortcuts: dartx.keyShortcuts = Symbol("dartx.keyShortcuts"),
    $label: dartx.label = Symbol("dartx.label"),
    $labeledBy: dartx.labeledBy = Symbol("dartx.labeledBy"),
    $level: dartx.level = Symbol("dartx.level"),
    $live: dartx.live = Symbol("dartx.live"),
    $modal: dartx.modal = Symbol("dartx.modal"),
    $multiline: dartx.multiline = Symbol("dartx.multiline"),
    $multiselectable: dartx.multiselectable = Symbol("dartx.multiselectable"),
    $orientation: dartx.orientation = Symbol("dartx.orientation"),
    $owns: dartx.owns = Symbol("dartx.owns"),
    $placeholder: dartx.placeholder = Symbol("dartx.placeholder"),
    $posInSet: dartx.posInSet = Symbol("dartx.posInSet"),
    $pressed: dartx.pressed = Symbol("dartx.pressed"),
    $readOnly: dartx.readOnly = Symbol("dartx.readOnly"),
    $relevant: dartx.relevant = Symbol("dartx.relevant"),
    $required: dartx.required = Symbol("dartx.required"),
    $role: dartx.role = Symbol("dartx.role"),
    $roleDescription: dartx.roleDescription = Symbol("dartx.roleDescription"),
    $rowCount: dartx.rowCount = Symbol("dartx.rowCount"),
    $rowIndex: dartx.rowIndex = Symbol("dartx.rowIndex"),
    $rowSpan: dartx.rowSpan = Symbol("dartx.rowSpan"),
    $selected: dartx.selected = Symbol("dartx.selected"),
    $setSize: dartx.setSize = Symbol("dartx.setSize"),
    $valueMax: dartx.valueMax = Symbol("dartx.valueMax"),
    $valueMin: dartx.valueMin = Symbol("dartx.valueMin"),
    $valueNow: dartx.valueNow = Symbol("dartx.valueNow"),
    $valueText: dartx.valueText = Symbol("dartx.valueText"),
    $appendChild: dartx.appendChild = Symbol("dartx.appendChild"),
    $onAccessibleClick: dartx.onAccessibleClick = Symbol("dartx.onAccessibleClick"),
    $onAccessibleContextMenu: dartx.onAccessibleContextMenu = Symbol("dartx.onAccessibleContextMenu"),
    $onAccessibleDecrement: dartx.onAccessibleDecrement = Symbol("dartx.onAccessibleDecrement"),
    $onAccessibleFocus: dartx.onAccessibleFocus = Symbol("dartx.onAccessibleFocus"),
    $onAccessibleIncrement: dartx.onAccessibleIncrement = Symbol("dartx.onAccessibleIncrement"),
    $onAccessibleScrollIntoView: dartx.onAccessibleScrollIntoView = Symbol("dartx.onAccessibleScrollIntoView"),
    __setter__: dart.privateName(html$, "__setter__"),
    $item: dartx.item = Symbol("dartx.item"),
    $illuminance: dartx.illuminance = Symbol("dartx.illuminance"),
    $download: dartx.download = Symbol("dartx.download"),
    $hreflang: dartx.hreflang = Symbol("dartx.hreflang"),
    $referrerPolicy: dartx.referrerPolicy = Symbol("dartx.referrerPolicy"),
    $rel: dartx.rel = Symbol("dartx.rel"),
    $hash: dartx.hash = Symbol("dartx.hash"),
    $host: dartx.host = Symbol("dartx.host"),
    $hostname: dartx.hostname = Symbol("dartx.hostname"),
    $href: dartx.href = Symbol("dartx.href"),
    $origin: dartx.origin = Symbol("dartx.origin"),
    $password: dartx.password = Symbol("dartx.password"),
    $pathname: dartx.pathname = Symbol("dartx.pathname"),
    $port: dartx.port = Symbol("dartx.port"),
    $protocol: dartx.protocol = Symbol("dartx.protocol"),
    $search: dartx.search = Symbol("dartx.search"),
    $username: dartx.username = Symbol("dartx.username"),
    $currentTime: dartx.currentTime = Symbol("dartx.currentTime"),
    $effect: dartx.effect = Symbol("dartx.effect"),
    $finished: dartx.finished = Symbol("dartx.finished"),
    $playState: dartx.playState = Symbol("dartx.playState"),
    $playbackRate: dartx.playbackRate = Symbol("dartx.playbackRate"),
    $ready: dartx.ready = Symbol("dartx.ready"),
    $startTime: dartx.startTime = Symbol("dartx.startTime"),
    $timeline: dartx.timeline = Symbol("dartx.timeline"),
    $cancel: dartx.cancel = Symbol("dartx.cancel"),
    $finish: dartx.finish = Symbol("dartx.finish"),
    $pause: dartx.pause = Symbol("dartx.pause"),
    $play: dartx.play = Symbol("dartx.play"),
    $reverse: dartx.reverse = Symbol("dartx.reverse"),
    $onCancel: dartx.onCancel = Symbol("dartx.onCancel"),
    $onFinish: dartx.onFinish = Symbol("dartx.onFinish"),
    $timing: dartx.timing = Symbol("dartx.timing"),
    _getComputedTiming_1: dart.privateName(html$, "_getComputedTiming_1"),
    $getComputedTiming: dartx.getComputedTiming = Symbol("dartx.getComputedTiming"),
    $delay: dartx.delay = Symbol("dartx.delay"),
    $duration: dartx.duration = Symbol("dartx.duration"),
    $easing: dartx.easing = Symbol("dartx.easing"),
    $endDelay: dartx.endDelay = Symbol("dartx.endDelay"),
    $fill: dartx.fill = Symbol("dartx.fill"),
    $iterationStart: dartx.iterationStart = Symbol("dartx.iterationStart"),
    $iterations: dartx.iterations = Symbol("dartx.iterations"),
    $animationName: dartx.animationName = Symbol("dartx.animationName"),
    $elapsedTime: dartx.elapsedTime = Symbol("dartx.elapsedTime"),
    $timelineTime: dartx.timelineTime = Symbol("dartx.timelineTime"),
    $registerAnimator: dartx.registerAnimator = Symbol("dartx.registerAnimator"),
    $status: dartx.status = Symbol("dartx.status"),
    $swapCache: dartx.swapCache = Symbol("dartx.swapCache"),
    $onCached: dartx.onCached = Symbol("dartx.onCached"),
    $onChecking: dartx.onChecking = Symbol("dartx.onChecking"),
    $onDownloading: dartx.onDownloading = Symbol("dartx.onDownloading"),
    $onNoUpdate: dartx.onNoUpdate = Symbol("dartx.onNoUpdate"),
    $onObsolete: dartx.onObsolete = Symbol("dartx.onObsolete"),
    $onProgress: dartx.onProgress = Symbol("dartx.onProgress"),
    $onUpdateReady: dartx.onUpdateReady = Symbol("dartx.onUpdateReady"),
    $reason: dartx.reason = Symbol("dartx.reason"),
    $url: dartx.url = Symbol("dartx.url"),
    $alt: dartx.alt = Symbol("dartx.alt"),
    $coords: dartx.coords = Symbol("dartx.coords"),
    $shape: dartx.shape = Symbol("dartx.shape"),
    $audioTracks: dartx.audioTracks = Symbol("dartx.audioTracks"),
    $autoplay: dartx.autoplay = Symbol("dartx.autoplay"),
    $buffered: dartx.buffered = Symbol("dartx.buffered"),
    $controlsList: dartx.controlsList = Symbol("dartx.controlsList"),
    $crossOrigin: dartx.crossOrigin = Symbol("dartx.crossOrigin"),
    $currentSrc: dartx.currentSrc = Symbol("dartx.currentSrc"),
    $defaultMuted: dartx.defaultMuted = Symbol("dartx.defaultMuted"),
    $defaultPlaybackRate: dartx.defaultPlaybackRate = Symbol("dartx.defaultPlaybackRate"),
    $disableRemotePlayback: dartx.disableRemotePlayback = Symbol("dartx.disableRemotePlayback"),
    $ended: dartx.ended = Symbol("dartx.ended"),
    $loop: dartx.loop = Symbol("dartx.loop"),
    $mediaKeys: dartx.mediaKeys = Symbol("dartx.mediaKeys"),
    $muted: dartx.muted = Symbol("dartx.muted"),
    $networkState: dartx.networkState = Symbol("dartx.networkState"),
    $paused: dartx.paused = Symbol("dartx.paused"),
    $played: dartx.played = Symbol("dartx.played"),
    $preload: dartx.preload = Symbol("dartx.preload"),
    $remote: dartx.remote = Symbol("dartx.remote"),
    $seekable: dartx.seekable = Symbol("dartx.seekable"),
    $seeking: dartx.seeking = Symbol("dartx.seeking"),
    $sinkId: dartx.sinkId = Symbol("dartx.sinkId"),
    $src: dartx.src = Symbol("dartx.src"),
    $srcObject: dartx.srcObject = Symbol("dartx.srcObject"),
    $textTracks: dartx.textTracks = Symbol("dartx.textTracks"),
    $videoTracks: dartx.videoTracks = Symbol("dartx.videoTracks"),
    $volume: dartx.volume = Symbol("dartx.volume"),
    $audioDecodedByteCount: dartx.audioDecodedByteCount = Symbol("dartx.audioDecodedByteCount"),
    $videoDecodedByteCount: dartx.videoDecodedByteCount = Symbol("dartx.videoDecodedByteCount"),
    $addTextTrack: dartx.addTextTrack = Symbol("dartx.addTextTrack"),
    $canPlayType: dartx.canPlayType = Symbol("dartx.canPlayType"),
    $captureStream: dartx.captureStream = Symbol("dartx.captureStream"),
    $load: dartx.load = Symbol("dartx.load"),
    $setMediaKeys: dartx.setMediaKeys = Symbol("dartx.setMediaKeys"),
    $setSinkId: dartx.setSinkId = Symbol("dartx.setSinkId"),
    $authenticatorData: dartx.authenticatorData = Symbol("dartx.authenticatorData"),
    $signature: dartx.signature = Symbol("dartx.signature"),
    $clientDataJson: dartx.clientDataJson = Symbol("dartx.clientDataJson"),
    $attestationObject: dartx.attestationObject = Symbol("dartx.attestationObject"),
    $state: dartx.state = Symbol("dartx.state"),
    $fetches: dartx.fetches = Symbol("dartx.fetches"),
    $request: dartx.request = Symbol("dartx.request"),
    $fetch: dartx.fetch = Symbol("dartx.fetch"),
    $getIds: dartx.getIds = Symbol("dartx.getIds"),
    $downloadTotal: dartx.downloadTotal = Symbol("dartx.downloadTotal"),
    $downloaded: dartx.downloaded = Symbol("dartx.downloaded"),
    $totalDownloadSize: dartx.totalDownloadSize = Symbol("dartx.totalDownloadSize"),
    $uploadTotal: dartx.uploadTotal = Symbol("dartx.uploadTotal"),
    $uploaded: dartx.uploaded = Symbol("dartx.uploaded"),
    $response: dartx.response = Symbol("dartx.response"),
    $updateUI: dartx.updateUI = Symbol("dartx.updateUI"),
    $visible: dartx.visible = Symbol("dartx.visible"),
    $detect: dartx.detect = Symbol("dartx.detect"),
    $charging: dartx.charging = Symbol("dartx.charging"),
    $chargingTime: dartx.chargingTime = Symbol("dartx.chargingTime"),
    $dischargingTime: dartx.dischargingTime = Symbol("dartx.dischargingTime"),
    $platforms: dartx.platforms = Symbol("dartx.platforms"),
    $userChoice: dartx.userChoice = Symbol("dartx.userChoice"),
    $prompt: dartx.prompt = Symbol("dartx.prompt"),
    $returnValue: dartx.returnValue = Symbol("dartx.returnValue"),
    $size: dartx.size = Symbol("dartx.size"),
    $slice: dartx.slice = Symbol("dartx.slice"),
    $data: dartx.data = Symbol("dartx.data"),
    $timecode: dartx.timecode = Symbol("dartx.timecode"),
    $characteristic: dartx.characteristic = Symbol("dartx.characteristic"),
    $uuid: dartx.uuid = Symbol("dartx.uuid"),
    $readValue: dartx.readValue = Symbol("dartx.readValue"),
    $writeValue: dartx.writeValue = Symbol("dartx.writeValue"),
    $bodyUsed: dartx.bodyUsed = Symbol("dartx.bodyUsed"),
    $arrayBuffer: dartx.arrayBuffer = Symbol("dartx.arrayBuffer"),
    $blob: dartx.blob = Symbol("dartx.blob"),
    $formData: dartx.formData = Symbol("dartx.formData"),
    $json: dartx.json = Symbol("dartx.json"),
    $onHashChange: dartx.onHashChange = Symbol("dartx.onHashChange"),
    $onMessage: dartx.onMessage = Symbol("dartx.onMessage"),
    $onOffline: dartx.onOffline = Symbol("dartx.onOffline"),
    $onOnline: dartx.onOnline = Symbol("dartx.onOnline"),
    $onPopState: dartx.onPopState = Symbol("dartx.onPopState"),
    $onStorage: dartx.onStorage = Symbol("dartx.onStorage"),
    $onUnload: dartx.onUnload = Symbol("dartx.onUnload"),
    $postMessage: dartx.postMessage = Symbol("dartx.postMessage"),
    $budgetAt: dartx.budgetAt = Symbol("dartx.budgetAt"),
    $time: dartx.time = Symbol("dartx.time"),
    $autofocus: dartx.autofocus = Symbol("dartx.autofocus"),
    $form: dartx.form = Symbol("dartx.form"),
    $formAction: dartx.formAction = Symbol("dartx.formAction"),
    $formEnctype: dartx.formEnctype = Symbol("dartx.formEnctype"),
    $formMethod: dartx.formMethod = Symbol("dartx.formMethod"),
    $formNoValidate: dartx.formNoValidate = Symbol("dartx.formNoValidate"),
    $formTarget: dartx.formTarget = Symbol("dartx.formTarget"),
    $labels: dartx.labels = Symbol("dartx.labels"),
    $validationMessage: dartx.validationMessage = Symbol("dartx.validationMessage"),
    $validity: dartx.validity = Symbol("dartx.validity"),
    $willValidate: dartx.willValidate = Symbol("dartx.willValidate"),
    $checkValidity: dartx.checkValidity = Symbol("dartx.checkValidity"),
    $reportValidity: dartx.reportValidity = Symbol("dartx.reportValidity"),
    $setCustomValidity: dartx.setCustomValidity = Symbol("dartx.setCustomValidity"),
    $wholeText: dartx.wholeText = Symbol("dartx.wholeText"),
    $splitText: dartx.splitText = Symbol("dartx.splitText"),
    $appendData: dartx.appendData = Symbol("dartx.appendData"),
    $deleteData: dartx.deleteData = Symbol("dartx.deleteData"),
    $insertData: dartx.insertData = Symbol("dartx.insertData"),
    $replaceData: dartx.replaceData = Symbol("dartx.replaceData"),
    $substringData: dartx.substringData = Symbol("dartx.substringData"),
    $has: dartx.has = Symbol("dartx.has"),
    $match: dartx.match = Symbol("dartx.match"),
    $methodData: dartx.methodData = Symbol("dartx.methodData"),
    $modifiers: dartx.modifiers = Symbol("dartx.modifiers"),
    $paymentRequestOrigin: dartx.paymentRequestOrigin = Symbol("dartx.paymentRequestOrigin"),
    $topLevelOrigin: dartx.topLevelOrigin = Symbol("dartx.topLevelOrigin"),
    $canvas: dartx.canvas = Symbol("dartx.canvas"),
    $requestFrame: dartx.requestFrame = Symbol("dartx.requestFrame"),
    $contentHint: dartx.contentHint = Symbol("dartx.contentHint"),
    $enabled: dartx.enabled = Symbol("dartx.enabled"),
    $kind: dartx.kind = Symbol("dartx.kind"),
    $applyConstraints: dartx.applyConstraints = Symbol("dartx.applyConstraints"),
    _getCapabilities_1: dart.privateName(html$, "_getCapabilities_1"),
    $getCapabilities: dartx.getCapabilities = Symbol("dartx.getCapabilities"),
    _getConstraints_1: dart.privateName(html$, "_getConstraints_1"),
    $getConstraints: dartx.getConstraints = Symbol("dartx.getConstraints"),
    _getSettings_1: dart.privateName(html$, "_getSettings_1"),
    $getSettings: dartx.getSettings = Symbol("dartx.getSettings"),
    $onMute: dartx.onMute = Symbol("dartx.onMute"),
    $onUnmute: dartx.onUnmute = Symbol("dartx.onUnmute"),
    _getContext_1: dart.privateName(html$, "_getContext_1"),
    _getContext_2: dart.privateName(html$, "_getContext_2"),
    $getContext: dartx.getContext = Symbol("dartx.getContext"),
    _toDataUrl: dart.privateName(html$, "_toDataUrl"),
    $transferControlToOffscreen: dartx.transferControlToOffscreen = Symbol("dartx.transferControlToOffscreen"),
    $onWebGlContextLost: dartx.onWebGlContextLost = Symbol("dartx.onWebGlContextLost"),
    $onWebGlContextRestored: dartx.onWebGlContextRestored = Symbol("dartx.onWebGlContextRestored"),
    $context2D: dartx.context2D = Symbol("dartx.context2D"),
    $getContext3d: dartx.getContext3d = Symbol("dartx.getContext3d"),
    $toDataUrl: dartx.toDataUrl = Symbol("dartx.toDataUrl"),
    _toBlob: dart.privateName(html$, "_toBlob"),
    $toBlob: dartx.toBlob = Symbol("dartx.toBlob"),
    $addColorStop: dartx.addColorStop = Symbol("dartx.addColorStop"),
    $setTransform: dartx.setTransform = Symbol("dartx.setTransform"),
    $currentTransform: dartx.currentTransform = Symbol("dartx.currentTransform"),
    $fillStyle: dartx.fillStyle = Symbol("dartx.fillStyle"),
    $filter: dartx.filter = Symbol("dartx.filter"),
    $font: dartx.font = Symbol("dartx.font"),
    $globalAlpha: dartx.globalAlpha = Symbol("dartx.globalAlpha"),
    $globalCompositeOperation: dartx.globalCompositeOperation = Symbol("dartx.globalCompositeOperation"),
    $imageSmoothingEnabled: dartx.imageSmoothingEnabled = Symbol("dartx.imageSmoothingEnabled"),
    $imageSmoothingQuality: dartx.imageSmoothingQuality = Symbol("dartx.imageSmoothingQuality"),
    $lineCap: dartx.lineCap = Symbol("dartx.lineCap"),
    $lineJoin: dartx.lineJoin = Symbol("dartx.lineJoin"),
    $lineWidth: dartx.lineWidth = Symbol("dartx.lineWidth"),
    $miterLimit: dartx.miterLimit = Symbol("dartx.miterLimit"),
    $shadowBlur: dartx.shadowBlur = Symbol("dartx.shadowBlur"),
    $shadowColor: dartx.shadowColor = Symbol("dartx.shadowColor"),
    $shadowOffsetX: dartx.shadowOffsetX = Symbol("dartx.shadowOffsetX"),
    $shadowOffsetY: dartx.shadowOffsetY = Symbol("dartx.shadowOffsetY"),
    $strokeStyle: dartx.strokeStyle = Symbol("dartx.strokeStyle"),
    $textAlign: dartx.textAlign = Symbol("dartx.textAlign"),
    $textBaseline: dartx.textBaseline = Symbol("dartx.textBaseline"),
    _addHitRegion_1: dart.privateName(html$, "_addHitRegion_1"),
    _addHitRegion_2: dart.privateName(html$, "_addHitRegion_2"),
    $addHitRegion: dartx.addHitRegion = Symbol("dartx.addHitRegion"),
    $beginPath: dartx.beginPath = Symbol("dartx.beginPath"),
    $clearHitRegions: dartx.clearHitRegions = Symbol("dartx.clearHitRegions"),
    $clearRect: dartx.clearRect = Symbol("dartx.clearRect"),
    $clip: dartx.clip = Symbol("dartx.clip"),
    _createImageData_1: dart.privateName(html$, "_createImageData_1"),
    _createImageData_2: dart.privateName(html$, "_createImageData_2"),
    _createImageData_3: dart.privateName(html$, "_createImageData_3"),
    _createImageData_4: dart.privateName(html$, "_createImageData_4"),
    _createImageData_5: dart.privateName(html$, "_createImageData_5"),
    $createImageData: dartx.createImageData = Symbol("dartx.createImageData"),
    $createLinearGradient: dartx.createLinearGradient = Symbol("dartx.createLinearGradient"),
    $createPattern: dartx.createPattern = Symbol("dartx.createPattern"),
    $createRadialGradient: dartx.createRadialGradient = Symbol("dartx.createRadialGradient"),
    $drawFocusIfNeeded: dartx.drawFocusIfNeeded = Symbol("dartx.drawFocusIfNeeded"),
    $fillRect: dartx.fillRect = Symbol("dartx.fillRect"),
    _getContextAttributes_1: dart.privateName(html$, "_getContextAttributes_1"),
    $getContextAttributes: dartx.getContextAttributes = Symbol("dartx.getContextAttributes"),
    _getImageData_1: dart.privateName(html$, "_getImageData_1"),
    $getImageData: dartx.getImageData = Symbol("dartx.getImageData"),
    _getLineDash: dart.privateName(html$, "_getLineDash"),
    $isContextLost: dartx.isContextLost = Symbol("dartx.isContextLost"),
    $isPointInPath: dartx.isPointInPath = Symbol("dartx.isPointInPath"),
    $isPointInStroke: dartx.isPointInStroke = Symbol("dartx.isPointInStroke"),
    $measureText: dartx.measureText = Symbol("dartx.measureText"),
    _putImageData_1: dart.privateName(html$, "_putImageData_1"),
    _putImageData_2: dart.privateName(html$, "_putImageData_2"),
    $putImageData: dartx.putImageData = Symbol("dartx.putImageData"),
    $removeHitRegion: dartx.removeHitRegion = Symbol("dartx.removeHitRegion"),
    $resetTransform: dartx.resetTransform = Symbol("dartx.resetTransform"),
    $restore: dartx.restore = Symbol("dartx.restore"),
    $rotate: dartx.rotate = Symbol("dartx.rotate"),
    $save: dartx.save = Symbol("dartx.save"),
    $scale: dartx.scale = Symbol("dartx.scale"),
    $scrollPathIntoView: dartx.scrollPathIntoView = Symbol("dartx.scrollPathIntoView"),
    $stroke: dartx.stroke = Symbol("dartx.stroke"),
    $strokeRect: dartx.strokeRect = Symbol("dartx.strokeRect"),
    $strokeText: dartx.strokeText = Symbol("dartx.strokeText"),
    $transform: dartx.transform = Symbol("dartx.transform"),
    _arc: dart.privateName(html$, "_arc"),
    $arcTo: dartx.arcTo = Symbol("dartx.arcTo"),
    $bezierCurveTo: dartx.bezierCurveTo = Symbol("dartx.bezierCurveTo"),
    $closePath: dartx.closePath = Symbol("dartx.closePath"),
    $ellipse: dartx.ellipse = Symbol("dartx.ellipse"),
    $lineTo: dartx.lineTo = Symbol("dartx.lineTo"),
    $moveTo: dartx.moveTo = Symbol("dartx.moveTo"),
    $quadraticCurveTo: dartx.quadraticCurveTo = Symbol("dartx.quadraticCurveTo"),
    $rect: dartx.rect = Symbol("dartx.rect"),
    $createImageDataFromImageData: dartx.createImageDataFromImageData = Symbol("dartx.createImageDataFromImageData"),
    $setFillColorRgb: dartx.setFillColorRgb = Symbol("dartx.setFillColorRgb"),
    $setFillColorHsl: dartx.setFillColorHsl = Symbol("dartx.setFillColorHsl"),
    $setStrokeColorRgb: dartx.setStrokeColorRgb = Symbol("dartx.setStrokeColorRgb"),
    $setStrokeColorHsl: dartx.setStrokeColorHsl = Symbol("dartx.setStrokeColorHsl"),
    $arc: dartx.arc = Symbol("dartx.arc"),
    $createPatternFromImage: dartx.createPatternFromImage = Symbol("dartx.createPatternFromImage"),
    $drawImageScaled: dartx.drawImageScaled = Symbol("dartx.drawImageScaled"),
    $drawImageScaledFromSource: dartx.drawImageScaledFromSource = Symbol("dartx.drawImageScaledFromSource"),
    $drawImageToRect: dartx.drawImageToRect = Symbol("dartx.drawImageToRect"),
    $drawImage: dartx.drawImage = Symbol("dartx.drawImage"),
    $lineDashOffset: dartx.lineDashOffset = Symbol("dartx.lineDashOffset"),
    $getLineDash: dartx.getLineDash = Symbol("dartx.getLineDash"),
    $setLineDash: dartx.setLineDash = Symbol("dartx.setLineDash"),
    $fillText: dartx.fillText = Symbol("dartx.fillText"),
    $backingStorePixelRatio: dartx.backingStorePixelRatio = Symbol("dartx.backingStorePixelRatio"),
    $frameType: dartx.frameType = Symbol("dartx.frameType"),
    $claim: dartx.claim = Symbol("dartx.claim"),
    $matchAll: dartx.matchAll = Symbol("dartx.matchAll"),
    $openWindow: dartx.openWindow = Symbol("dartx.openWindow"),
    $clipboardData: dartx.clipboardData = Symbol("dartx.clipboardData"),
    $code: dartx.code = Symbol("dartx.code"),
    $wasClean: dartx.wasClean = Symbol("dartx.wasClean"),
    _initCompositionEvent: dart.privateName(html$, "_initCompositionEvent"),
    _initUIEvent: dart.privateName(html$, "_initUIEvent"),
    $detail: dartx.detail = Symbol("dartx.detail"),
    $sourceCapabilities: dartx.sourceCapabilities = Symbol("dartx.sourceCapabilities"),
    _get_view: dart.privateName(html$, "_get_view"),
    $view: dartx.view = Symbol("dartx.view"),
    _which: dart.privateName(html$, "_which"),
    $select: dartx.select = Symbol("dartx.select"),
    $getDistributedNodes: dartx.getDistributedNodes = Symbol("dartx.getDistributedNodes"),
    $set: dartx.set = Symbol("dartx.set"),
    $accuracy: dartx.accuracy = Symbol("dartx.accuracy"),
    $altitude: dartx.altitude = Symbol("dartx.altitude"),
    $altitudeAccuracy: dartx.altitudeAccuracy = Symbol("dartx.altitudeAccuracy"),
    $heading: dartx.heading = Symbol("dartx.heading"),
    $latitude: dartx.latitude = Symbol("dartx.latitude"),
    $longitude: dartx.longitude = Symbol("dartx.longitude"),
    $speed: dartx.speed = Symbol("dartx.speed"),
    $iconUrl: dartx.iconUrl = Symbol("dartx.iconUrl"),
    $create: dartx.create = Symbol("dartx.create"),
    $preventSilentAccess: dartx.preventSilentAccess = Symbol("dartx.preventSilentAccess"),
    $requireUserMediation: dartx.requireUserMediation = Symbol("dartx.requireUserMediation"),
    $store: dartx.store = Symbol("dartx.store"),
    _getRandomValues: dart.privateName(html$, "_getRandomValues"),
    $getRandomValues: dartx.getRandomValues = Symbol("dartx.getRandomValues"),
    $subtle: dartx.subtle = Symbol("dartx.subtle"),
    $algorithm: dartx.algorithm = Symbol("dartx.algorithm"),
    $extractable: dartx.extractable = Symbol("dartx.extractable"),
    $usages: dartx.usages = Symbol("dartx.usages"),
    $encoding: dartx.encoding = Symbol("dartx.encoding"),
    $cssText: dartx.cssText = Symbol("dartx.cssText"),
    $parentRule: dartx.parentRule = Symbol("dartx.parentRule"),
    $parentStyleSheet: dartx.parentStyleSheet = Symbol("dartx.parentStyleSheet"),
    $conditionText: dartx.conditionText = Symbol("dartx.conditionText"),
    $cssRules: dartx.cssRules = Symbol("dartx.cssRules"),
    $deleteRule: dartx.deleteRule = Symbol("dartx.deleteRule"),
    $insertRule: dartx.insertRule = Symbol("dartx.insertRule"),
    $intrinsicHeight: dartx.intrinsicHeight = Symbol("dartx.intrinsicHeight"),
    $intrinsicRatio: dartx.intrinsicRatio = Symbol("dartx.intrinsicRatio"),
    $intrinsicWidth: dartx.intrinsicWidth = Symbol("dartx.intrinsicWidth"),
    $media: dartx.media = Symbol("dartx.media"),
    $styleSheet: dartx.styleSheet = Symbol("dartx.styleSheet"),
    $keyText: dartx.keyText = Symbol("dartx.keyText"),
    __getter__: dart.privateName(html$, "__getter__"),
    $appendRule: dartx.appendRule = Symbol("dartx.appendRule"),
    $findRule: dartx.findRule = Symbol("dartx.findRule"),
    $matrix: dartx.matrix = Symbol("dartx.matrix"),
    $is2D: dartx.is2D = Symbol("dartx.is2D"),
    $prefix: dartx.prefix = Symbol("dartx.prefix"),
    $div: dartx.div = Symbol("dartx.div"),
    $mul: dartx.mul = Symbol("dartx.mul"),
    $sub: dartx.sub = Symbol("dartx.sub"),
    $to: dartx.to = Symbol("dartx.to"),
    $selectorText: dartx.selectorText = Symbol("dartx.selectorText"),
    $angle: dartx.angle = Symbol("dartx.angle"),
    $ax: dartx.ax = Symbol("dartx.ax"),
    $ay: dartx.ay = Symbol("dartx.ay"),
    _getPropertyValueHelper: dart.privateName(html$, "_getPropertyValueHelper"),
    $getPropertyValue: dartx.getPropertyValue = Symbol("dartx.getPropertyValue"),
    _browserPropertyName: dart.privateName(html$, "_browserPropertyName"),
    _getPropertyValue: dart.privateName(html$, "_getPropertyValue"),
    _supportsProperty: dart.privateName(html$, "_supportsProperty"),
    $supportsProperty: dartx.supportsProperty = Symbol("dartx.supportsProperty"),
    _setPropertyHelper: dart.privateName(html$, "_setPropertyHelper"),
    $setProperty: dartx.setProperty = Symbol("dartx.setProperty"),
    _supportedBrowserPropertyName: dart.privateName(html$, "_supportedBrowserPropertyName"),
    $cssFloat: dartx.cssFloat = Symbol("dartx.cssFloat"),
    $getPropertyPriority: dartx.getPropertyPriority = Symbol("dartx.getPropertyPriority"),
    $removeProperty: dartx.removeProperty = Symbol("dartx.removeProperty"),
    _background: dart.privateName(html$, "_background"),
    $background: dartx.background = Symbol("dartx.background"),
    _backgroundAttachment: dart.privateName(html$, "_backgroundAttachment"),
    $backgroundAttachment: dartx.backgroundAttachment = Symbol("dartx.backgroundAttachment"),
    _backgroundColor: dart.privateName(html$, "_backgroundColor"),
    $backgroundColor: dartx.backgroundColor = Symbol("dartx.backgroundColor"),
    _backgroundImage: dart.privateName(html$, "_backgroundImage"),
    $backgroundImage: dartx.backgroundImage = Symbol("dartx.backgroundImage"),
    _backgroundPosition: dart.privateName(html$, "_backgroundPosition"),
    $backgroundPosition: dartx.backgroundPosition = Symbol("dartx.backgroundPosition"),
    _backgroundRepeat: dart.privateName(html$, "_backgroundRepeat"),
    $backgroundRepeat: dartx.backgroundRepeat = Symbol("dartx.backgroundRepeat"),
    _border: dart.privateName(html$, "_border"),
    $border: dartx.border = Symbol("dartx.border"),
    _borderBottom: dart.privateName(html$, "_borderBottom"),
    $borderBottom: dartx.borderBottom = Symbol("dartx.borderBottom"),
    _borderBottomColor: dart.privateName(html$, "_borderBottomColor"),
    $borderBottomColor: dartx.borderBottomColor = Symbol("dartx.borderBottomColor"),
    _borderBottomStyle: dart.privateName(html$, "_borderBottomStyle"),
    $borderBottomStyle: dartx.borderBottomStyle = Symbol("dartx.borderBottomStyle"),
    _borderBottomWidth: dart.privateName(html$, "_borderBottomWidth"),
    $borderBottomWidth: dartx.borderBottomWidth = Symbol("dartx.borderBottomWidth"),
    _borderCollapse: dart.privateName(html$, "_borderCollapse"),
    $borderCollapse: dartx.borderCollapse = Symbol("dartx.borderCollapse"),
    _borderColor: dart.privateName(html$, "_borderColor"),
    $borderColor: dartx.borderColor = Symbol("dartx.borderColor"),
    _borderLeft: dart.privateName(html$, "_borderLeft"),
    $borderLeft: dartx.borderLeft = Symbol("dartx.borderLeft"),
    _borderLeftColor: dart.privateName(html$, "_borderLeftColor"),
    $borderLeftColor: dartx.borderLeftColor = Symbol("dartx.borderLeftColor"),
    _borderLeftStyle: dart.privateName(html$, "_borderLeftStyle"),
    $borderLeftStyle: dartx.borderLeftStyle = Symbol("dartx.borderLeftStyle"),
    _borderLeftWidth: dart.privateName(html$, "_borderLeftWidth"),
    $borderLeftWidth: dartx.borderLeftWidth = Symbol("dartx.borderLeftWidth"),
    _borderRight: dart.privateName(html$, "_borderRight"),
    $borderRight: dartx.borderRight = Symbol("dartx.borderRight"),
    _borderRightColor: dart.privateName(html$, "_borderRightColor"),
    $borderRightColor: dartx.borderRightColor = Symbol("dartx.borderRightColor"),
    _borderRightStyle: dart.privateName(html$, "_borderRightStyle"),
    $borderRightStyle: dartx.borderRightStyle = Symbol("dartx.borderRightStyle"),
    _borderRightWidth: dart.privateName(html$, "_borderRightWidth"),
    $borderRightWidth: dartx.borderRightWidth = Symbol("dartx.borderRightWidth"),
    _borderSpacing: dart.privateName(html$, "_borderSpacing"),
    $borderSpacing: dartx.borderSpacing = Symbol("dartx.borderSpacing"),
    _borderStyle: dart.privateName(html$, "_borderStyle"),
    $borderStyle: dartx.borderStyle = Symbol("dartx.borderStyle"),
    _borderTop: dart.privateName(html$, "_borderTop")
  };
  var S$0 = {
    $borderTop: dartx.borderTop = Symbol("dartx.borderTop"),
    _borderTopColor: dart.privateName(html$, "_borderTopColor"),
    $borderTopColor: dartx.borderTopColor = Symbol("dartx.borderTopColor"),
    _borderTopStyle: dart.privateName(html$, "_borderTopStyle"),
    $borderTopStyle: dartx.borderTopStyle = Symbol("dartx.borderTopStyle"),
    _borderTopWidth: dart.privateName(html$, "_borderTopWidth"),
    $borderTopWidth: dartx.borderTopWidth = Symbol("dartx.borderTopWidth"),
    _borderWidth: dart.privateName(html$, "_borderWidth"),
    $borderWidth: dartx.borderWidth = Symbol("dartx.borderWidth"),
    _bottom: dart.privateName(html$, "_bottom"),
    _captionSide: dart.privateName(html$, "_captionSide"),
    $captionSide: dartx.captionSide = Symbol("dartx.captionSide"),
    _clear$3: dart.privateName(html$, "_clear"),
    _clip: dart.privateName(html$, "_clip"),
    _color: dart.privateName(html$, "_color"),
    $color: dartx.color = Symbol("dartx.color"),
    _content: dart.privateName(html$, "_content"),
    $content: dartx.content = Symbol("dartx.content"),
    _cursor: dart.privateName(html$, "_cursor"),
    $cursor: dartx.cursor = Symbol("dartx.cursor"),
    _direction: dart.privateName(html$, "_direction"),
    _display: dart.privateName(html$, "_display"),
    $display: dartx.display = Symbol("dartx.display"),
    _emptyCells: dart.privateName(html$, "_emptyCells"),
    $emptyCells: dartx.emptyCells = Symbol("dartx.emptyCells"),
    _font: dart.privateName(html$, "_font"),
    _fontFamily: dart.privateName(html$, "_fontFamily"),
    $fontFamily: dartx.fontFamily = Symbol("dartx.fontFamily"),
    _fontSize: dart.privateName(html$, "_fontSize"),
    $fontSize: dartx.fontSize = Symbol("dartx.fontSize"),
    _fontStyle: dart.privateName(html$, "_fontStyle"),
    $fontStyle: dartx.fontStyle = Symbol("dartx.fontStyle"),
    _fontVariant: dart.privateName(html$, "_fontVariant"),
    $fontVariant: dartx.fontVariant = Symbol("dartx.fontVariant"),
    _fontWeight: dart.privateName(html$, "_fontWeight"),
    $fontWeight: dartx.fontWeight = Symbol("dartx.fontWeight"),
    _height$1: dart.privateName(html$, "_height"),
    _left: dart.privateName(html$, "_left"),
    _letterSpacing: dart.privateName(html$, "_letterSpacing"),
    $letterSpacing: dartx.letterSpacing = Symbol("dartx.letterSpacing"),
    _lineHeight: dart.privateName(html$, "_lineHeight"),
    $lineHeight: dartx.lineHeight = Symbol("dartx.lineHeight"),
    _listStyle: dart.privateName(html$, "_listStyle"),
    $listStyle: dartx.listStyle = Symbol("dartx.listStyle"),
    _listStyleImage: dart.privateName(html$, "_listStyleImage"),
    $listStyleImage: dartx.listStyleImage = Symbol("dartx.listStyleImage"),
    _listStylePosition: dart.privateName(html$, "_listStylePosition"),
    $listStylePosition: dartx.listStylePosition = Symbol("dartx.listStylePosition"),
    _listStyleType: dart.privateName(html$, "_listStyleType"),
    $listStyleType: dartx.listStyleType = Symbol("dartx.listStyleType"),
    _margin: dart.privateName(html$, "_margin"),
    $margin: dartx.margin = Symbol("dartx.margin"),
    _marginBottom: dart.privateName(html$, "_marginBottom"),
    $marginBottom: dartx.marginBottom = Symbol("dartx.marginBottom"),
    _marginLeft: dart.privateName(html$, "_marginLeft"),
    $marginLeft: dartx.marginLeft = Symbol("dartx.marginLeft"),
    _marginRight: dart.privateName(html$, "_marginRight"),
    $marginRight: dartx.marginRight = Symbol("dartx.marginRight"),
    _marginTop: dart.privateName(html$, "_marginTop"),
    $marginTop: dartx.marginTop = Symbol("dartx.marginTop"),
    _maxHeight: dart.privateName(html$, "_maxHeight"),
    $maxHeight: dartx.maxHeight = Symbol("dartx.maxHeight"),
    _maxWidth: dart.privateName(html$, "_maxWidth"),
    $maxWidth: dartx.maxWidth = Symbol("dartx.maxWidth"),
    _minHeight: dart.privateName(html$, "_minHeight"),
    $minHeight: dartx.minHeight = Symbol("dartx.minHeight"),
    _minWidth: dart.privateName(html$, "_minWidth"),
    $minWidth: dartx.minWidth = Symbol("dartx.minWidth"),
    _outline: dart.privateName(html$, "_outline"),
    $outline: dartx.outline = Symbol("dartx.outline"),
    _outlineColor: dart.privateName(html$, "_outlineColor"),
    $outlineColor: dartx.outlineColor = Symbol("dartx.outlineColor"),
    _outlineStyle: dart.privateName(html$, "_outlineStyle"),
    $outlineStyle: dartx.outlineStyle = Symbol("dartx.outlineStyle"),
    _outlineWidth: dart.privateName(html$, "_outlineWidth"),
    $outlineWidth: dartx.outlineWidth = Symbol("dartx.outlineWidth"),
    _overflow: dart.privateName(html$, "_overflow"),
    $overflow: dartx.overflow = Symbol("dartx.overflow"),
    _padding: dart.privateName(html$, "_padding"),
    $padding: dartx.padding = Symbol("dartx.padding"),
    _paddingBottom: dart.privateName(html$, "_paddingBottom"),
    $paddingBottom: dartx.paddingBottom = Symbol("dartx.paddingBottom"),
    _paddingLeft: dart.privateName(html$, "_paddingLeft"),
    $paddingLeft: dartx.paddingLeft = Symbol("dartx.paddingLeft"),
    _paddingRight: dart.privateName(html$, "_paddingRight"),
    $paddingRight: dartx.paddingRight = Symbol("dartx.paddingRight"),
    _paddingTop: dart.privateName(html$, "_paddingTop"),
    $paddingTop: dartx.paddingTop = Symbol("dartx.paddingTop"),
    _pageBreakAfter: dart.privateName(html$, "_pageBreakAfter"),
    $pageBreakAfter: dartx.pageBreakAfter = Symbol("dartx.pageBreakAfter"),
    _pageBreakBefore: dart.privateName(html$, "_pageBreakBefore"),
    $pageBreakBefore: dartx.pageBreakBefore = Symbol("dartx.pageBreakBefore"),
    _pageBreakInside: dart.privateName(html$, "_pageBreakInside"),
    $pageBreakInside: dartx.pageBreakInside = Symbol("dartx.pageBreakInside"),
    _position$2: dart.privateName(html$, "_position"),
    $position: dartx.position = Symbol("dartx.position"),
    _quotes: dart.privateName(html$, "_quotes"),
    $quotes: dartx.quotes = Symbol("dartx.quotes"),
    _right: dart.privateName(html$, "_right"),
    _tableLayout: dart.privateName(html$, "_tableLayout"),
    $tableLayout: dartx.tableLayout = Symbol("dartx.tableLayout"),
    _textAlign: dart.privateName(html$, "_textAlign"),
    _textDecoration: dart.privateName(html$, "_textDecoration"),
    $textDecoration: dartx.textDecoration = Symbol("dartx.textDecoration"),
    _textIndent: dart.privateName(html$, "_textIndent"),
    $textIndent: dartx.textIndent = Symbol("dartx.textIndent"),
    _textTransform: dart.privateName(html$, "_textTransform"),
    $textTransform: dartx.textTransform = Symbol("dartx.textTransform"),
    _top: dart.privateName(html$, "_top"),
    _unicodeBidi: dart.privateName(html$, "_unicodeBidi"),
    $unicodeBidi: dartx.unicodeBidi = Symbol("dartx.unicodeBidi"),
    _verticalAlign: dart.privateName(html$, "_verticalAlign"),
    $verticalAlign: dartx.verticalAlign = Symbol("dartx.verticalAlign"),
    _visibility: dart.privateName(html$, "_visibility"),
    $visibility: dartx.visibility = Symbol("dartx.visibility"),
    _whiteSpace: dart.privateName(html$, "_whiteSpace"),
    $whiteSpace: dartx.whiteSpace = Symbol("dartx.whiteSpace"),
    _width$1: dart.privateName(html$, "_width"),
    _wordSpacing: dart.privateName(html$, "_wordSpacing"),
    $wordSpacing: dartx.wordSpacing = Symbol("dartx.wordSpacing"),
    _zIndex: dart.privateName(html$, "_zIndex"),
    $zIndex: dartx.zIndex = Symbol("dartx.zIndex"),
    $alignContent: dartx.alignContent = Symbol("dartx.alignContent"),
    $alignItems: dartx.alignItems = Symbol("dartx.alignItems"),
    $alignSelf: dartx.alignSelf = Symbol("dartx.alignSelf"),
    $animation: dartx.animation = Symbol("dartx.animation"),
    $animationDelay: dartx.animationDelay = Symbol("dartx.animationDelay"),
    $animationDirection: dartx.animationDirection = Symbol("dartx.animationDirection"),
    $animationDuration: dartx.animationDuration = Symbol("dartx.animationDuration"),
    $animationFillMode: dartx.animationFillMode = Symbol("dartx.animationFillMode"),
    $animationIterationCount: dartx.animationIterationCount = Symbol("dartx.animationIterationCount"),
    $animationPlayState: dartx.animationPlayState = Symbol("dartx.animationPlayState"),
    $animationTimingFunction: dartx.animationTimingFunction = Symbol("dartx.animationTimingFunction"),
    $appRegion: dartx.appRegion = Symbol("dartx.appRegion"),
    $appearance: dartx.appearance = Symbol("dartx.appearance"),
    $aspectRatio: dartx.aspectRatio = Symbol("dartx.aspectRatio"),
    $backfaceVisibility: dartx.backfaceVisibility = Symbol("dartx.backfaceVisibility"),
    $backgroundBlendMode: dartx.backgroundBlendMode = Symbol("dartx.backgroundBlendMode"),
    $backgroundClip: dartx.backgroundClip = Symbol("dartx.backgroundClip"),
    $backgroundComposite: dartx.backgroundComposite = Symbol("dartx.backgroundComposite"),
    $backgroundOrigin: dartx.backgroundOrigin = Symbol("dartx.backgroundOrigin"),
    $backgroundPositionX: dartx.backgroundPositionX = Symbol("dartx.backgroundPositionX"),
    $backgroundPositionY: dartx.backgroundPositionY = Symbol("dartx.backgroundPositionY"),
    $backgroundRepeatX: dartx.backgroundRepeatX = Symbol("dartx.backgroundRepeatX"),
    $backgroundRepeatY: dartx.backgroundRepeatY = Symbol("dartx.backgroundRepeatY"),
    $backgroundSize: dartx.backgroundSize = Symbol("dartx.backgroundSize"),
    $borderAfter: dartx.borderAfter = Symbol("dartx.borderAfter"),
    $borderAfterColor: dartx.borderAfterColor = Symbol("dartx.borderAfterColor"),
    $borderAfterStyle: dartx.borderAfterStyle = Symbol("dartx.borderAfterStyle"),
    $borderAfterWidth: dartx.borderAfterWidth = Symbol("dartx.borderAfterWidth"),
    $borderBefore: dartx.borderBefore = Symbol("dartx.borderBefore"),
    $borderBeforeColor: dartx.borderBeforeColor = Symbol("dartx.borderBeforeColor"),
    $borderBeforeStyle: dartx.borderBeforeStyle = Symbol("dartx.borderBeforeStyle"),
    $borderBeforeWidth: dartx.borderBeforeWidth = Symbol("dartx.borderBeforeWidth"),
    $borderBottomLeftRadius: dartx.borderBottomLeftRadius = Symbol("dartx.borderBottomLeftRadius"),
    $borderBottomRightRadius: dartx.borderBottomRightRadius = Symbol("dartx.borderBottomRightRadius"),
    $borderEnd: dartx.borderEnd = Symbol("dartx.borderEnd"),
    $borderEndColor: dartx.borderEndColor = Symbol("dartx.borderEndColor"),
    $borderEndStyle: dartx.borderEndStyle = Symbol("dartx.borderEndStyle"),
    $borderEndWidth: dartx.borderEndWidth = Symbol("dartx.borderEndWidth"),
    $borderFit: dartx.borderFit = Symbol("dartx.borderFit"),
    $borderHorizontalSpacing: dartx.borderHorizontalSpacing = Symbol("dartx.borderHorizontalSpacing"),
    $borderImage: dartx.borderImage = Symbol("dartx.borderImage"),
    $borderImageOutset: dartx.borderImageOutset = Symbol("dartx.borderImageOutset"),
    $borderImageRepeat: dartx.borderImageRepeat = Symbol("dartx.borderImageRepeat"),
    $borderImageSlice: dartx.borderImageSlice = Symbol("dartx.borderImageSlice"),
    $borderImageSource: dartx.borderImageSource = Symbol("dartx.borderImageSource"),
    $borderImageWidth: dartx.borderImageWidth = Symbol("dartx.borderImageWidth"),
    $borderRadius: dartx.borderRadius = Symbol("dartx.borderRadius"),
    $borderStart: dartx.borderStart = Symbol("dartx.borderStart"),
    $borderStartColor: dartx.borderStartColor = Symbol("dartx.borderStartColor"),
    $borderStartStyle: dartx.borderStartStyle = Symbol("dartx.borderStartStyle"),
    $borderStartWidth: dartx.borderStartWidth = Symbol("dartx.borderStartWidth"),
    $borderTopLeftRadius: dartx.borderTopLeftRadius = Symbol("dartx.borderTopLeftRadius"),
    $borderTopRightRadius: dartx.borderTopRightRadius = Symbol("dartx.borderTopRightRadius"),
    $borderVerticalSpacing: dartx.borderVerticalSpacing = Symbol("dartx.borderVerticalSpacing"),
    $boxAlign: dartx.boxAlign = Symbol("dartx.boxAlign"),
    $boxDecorationBreak: dartx.boxDecorationBreak = Symbol("dartx.boxDecorationBreak"),
    $boxDirection: dartx.boxDirection = Symbol("dartx.boxDirection"),
    $boxFlex: dartx.boxFlex = Symbol("dartx.boxFlex"),
    $boxFlexGroup: dartx.boxFlexGroup = Symbol("dartx.boxFlexGroup"),
    $boxLines: dartx.boxLines = Symbol("dartx.boxLines"),
    $boxOrdinalGroup: dartx.boxOrdinalGroup = Symbol("dartx.boxOrdinalGroup"),
    $boxOrient: dartx.boxOrient = Symbol("dartx.boxOrient"),
    $boxPack: dartx.boxPack = Symbol("dartx.boxPack"),
    $boxReflect: dartx.boxReflect = Symbol("dartx.boxReflect"),
    $boxShadow: dartx.boxShadow = Symbol("dartx.boxShadow"),
    $boxSizing: dartx.boxSizing = Symbol("dartx.boxSizing"),
    $clipPath: dartx.clipPath = Symbol("dartx.clipPath"),
    $columnBreakAfter: dartx.columnBreakAfter = Symbol("dartx.columnBreakAfter"),
    $columnBreakBefore: dartx.columnBreakBefore = Symbol("dartx.columnBreakBefore"),
    $columnBreakInside: dartx.columnBreakInside = Symbol("dartx.columnBreakInside"),
    $columnCount: dartx.columnCount = Symbol("dartx.columnCount"),
    $columnFill: dartx.columnFill = Symbol("dartx.columnFill"),
    $columnGap: dartx.columnGap = Symbol("dartx.columnGap"),
    $columnRule: dartx.columnRule = Symbol("dartx.columnRule"),
    $columnRuleColor: dartx.columnRuleColor = Symbol("dartx.columnRuleColor"),
    $columnRuleStyle: dartx.columnRuleStyle = Symbol("dartx.columnRuleStyle"),
    $columnRuleWidth: dartx.columnRuleWidth = Symbol("dartx.columnRuleWidth"),
    $columnSpan: dartx.columnSpan = Symbol("dartx.columnSpan"),
    $columnWidth: dartx.columnWidth = Symbol("dartx.columnWidth"),
    $columns: dartx.columns = Symbol("dartx.columns"),
    $counterIncrement: dartx.counterIncrement = Symbol("dartx.counterIncrement"),
    $counterReset: dartx.counterReset = Symbol("dartx.counterReset"),
    $flex: dartx.flex = Symbol("dartx.flex"),
    $flexBasis: dartx.flexBasis = Symbol("dartx.flexBasis"),
    $flexDirection: dartx.flexDirection = Symbol("dartx.flexDirection"),
    $flexFlow: dartx.flexFlow = Symbol("dartx.flexFlow"),
    $flexGrow: dartx.flexGrow = Symbol("dartx.flexGrow"),
    $flexShrink: dartx.flexShrink = Symbol("dartx.flexShrink"),
    $flexWrap: dartx.flexWrap = Symbol("dartx.flexWrap"),
    $float: dartx.float = Symbol("dartx.float"),
    $fontFeatureSettings: dartx.fontFeatureSettings = Symbol("dartx.fontFeatureSettings"),
    $fontKerning: dartx.fontKerning = Symbol("dartx.fontKerning"),
    $fontSizeDelta: dartx.fontSizeDelta = Symbol("dartx.fontSizeDelta"),
    $fontSmoothing: dartx.fontSmoothing = Symbol("dartx.fontSmoothing"),
    $fontStretch: dartx.fontStretch = Symbol("dartx.fontStretch"),
    $fontVariantLigatures: dartx.fontVariantLigatures = Symbol("dartx.fontVariantLigatures"),
    $grid: dartx.grid = Symbol("dartx.grid"),
    $gridArea: dartx.gridArea = Symbol("dartx.gridArea"),
    $gridAutoColumns: dartx.gridAutoColumns = Symbol("dartx.gridAutoColumns"),
    $gridAutoFlow: dartx.gridAutoFlow = Symbol("dartx.gridAutoFlow"),
    $gridAutoRows: dartx.gridAutoRows = Symbol("dartx.gridAutoRows"),
    $gridColumn: dartx.gridColumn = Symbol("dartx.gridColumn"),
    $gridColumnEnd: dartx.gridColumnEnd = Symbol("dartx.gridColumnEnd"),
    $gridColumnStart: dartx.gridColumnStart = Symbol("dartx.gridColumnStart"),
    $gridRow: dartx.gridRow = Symbol("dartx.gridRow"),
    $gridRowEnd: dartx.gridRowEnd = Symbol("dartx.gridRowEnd"),
    $gridRowStart: dartx.gridRowStart = Symbol("dartx.gridRowStart"),
    $gridTemplate: dartx.gridTemplate = Symbol("dartx.gridTemplate"),
    $gridTemplateAreas: dartx.gridTemplateAreas = Symbol("dartx.gridTemplateAreas"),
    $gridTemplateColumns: dartx.gridTemplateColumns = Symbol("dartx.gridTemplateColumns"),
    $gridTemplateRows: dartx.gridTemplateRows = Symbol("dartx.gridTemplateRows"),
    $highlight: dartx.highlight = Symbol("dartx.highlight"),
    $hyphenateCharacter: dartx.hyphenateCharacter = Symbol("dartx.hyphenateCharacter"),
    $imageRendering: dartx.imageRendering = Symbol("dartx.imageRendering"),
    $isolation: dartx.isolation = Symbol("dartx.isolation"),
    $justifyContent: dartx.justifyContent = Symbol("dartx.justifyContent"),
    $justifySelf: dartx.justifySelf = Symbol("dartx.justifySelf"),
    $lineBoxContain: dartx.lineBoxContain = Symbol("dartx.lineBoxContain"),
    $lineBreak: dartx.lineBreak = Symbol("dartx.lineBreak"),
    $lineClamp: dartx.lineClamp = Symbol("dartx.lineClamp"),
    $locale: dartx.locale = Symbol("dartx.locale"),
    $logicalHeight: dartx.logicalHeight = Symbol("dartx.logicalHeight"),
    $logicalWidth: dartx.logicalWidth = Symbol("dartx.logicalWidth"),
    $marginAfter: dartx.marginAfter = Symbol("dartx.marginAfter"),
    $marginAfterCollapse: dartx.marginAfterCollapse = Symbol("dartx.marginAfterCollapse"),
    $marginBefore: dartx.marginBefore = Symbol("dartx.marginBefore"),
    $marginBeforeCollapse: dartx.marginBeforeCollapse = Symbol("dartx.marginBeforeCollapse"),
    $marginBottomCollapse: dartx.marginBottomCollapse = Symbol("dartx.marginBottomCollapse"),
    $marginCollapse: dartx.marginCollapse = Symbol("dartx.marginCollapse"),
    $marginEnd: dartx.marginEnd = Symbol("dartx.marginEnd"),
    $marginStart: dartx.marginStart = Symbol("dartx.marginStart"),
    $marginTopCollapse: dartx.marginTopCollapse = Symbol("dartx.marginTopCollapse"),
    $mask: dartx.mask = Symbol("dartx.mask"),
    $maskBoxImage: dartx.maskBoxImage = Symbol("dartx.maskBoxImage"),
    $maskBoxImageOutset: dartx.maskBoxImageOutset = Symbol("dartx.maskBoxImageOutset"),
    $maskBoxImageRepeat: dartx.maskBoxImageRepeat = Symbol("dartx.maskBoxImageRepeat"),
    $maskBoxImageSlice: dartx.maskBoxImageSlice = Symbol("dartx.maskBoxImageSlice"),
    $maskBoxImageSource: dartx.maskBoxImageSource = Symbol("dartx.maskBoxImageSource"),
    $maskBoxImageWidth: dartx.maskBoxImageWidth = Symbol("dartx.maskBoxImageWidth"),
    $maskClip: dartx.maskClip = Symbol("dartx.maskClip"),
    $maskComposite: dartx.maskComposite = Symbol("dartx.maskComposite"),
    $maskImage: dartx.maskImage = Symbol("dartx.maskImage"),
    $maskOrigin: dartx.maskOrigin = Symbol("dartx.maskOrigin"),
    $maskPosition: dartx.maskPosition = Symbol("dartx.maskPosition"),
    $maskPositionX: dartx.maskPositionX = Symbol("dartx.maskPositionX"),
    $maskPositionY: dartx.maskPositionY = Symbol("dartx.maskPositionY"),
    $maskRepeat: dartx.maskRepeat = Symbol("dartx.maskRepeat"),
    $maskRepeatX: dartx.maskRepeatX = Symbol("dartx.maskRepeatX"),
    $maskRepeatY: dartx.maskRepeatY = Symbol("dartx.maskRepeatY"),
    $maskSize: dartx.maskSize = Symbol("dartx.maskSize"),
    $maskSourceType: dartx.maskSourceType = Symbol("dartx.maskSourceType"),
    $maxLogicalHeight: dartx.maxLogicalHeight = Symbol("dartx.maxLogicalHeight"),
    $maxLogicalWidth: dartx.maxLogicalWidth = Symbol("dartx.maxLogicalWidth"),
    $maxZoom: dartx.maxZoom = Symbol("dartx.maxZoom"),
    $minLogicalHeight: dartx.minLogicalHeight = Symbol("dartx.minLogicalHeight"),
    $minLogicalWidth: dartx.minLogicalWidth = Symbol("dartx.minLogicalWidth"),
    $minZoom: dartx.minZoom = Symbol("dartx.minZoom"),
    $mixBlendMode: dartx.mixBlendMode = Symbol("dartx.mixBlendMode"),
    $objectFit: dartx.objectFit = Symbol("dartx.objectFit"),
    $objectPosition: dartx.objectPosition = Symbol("dartx.objectPosition"),
    $opacity: dartx.opacity = Symbol("dartx.opacity"),
    $order: dartx.order = Symbol("dartx.order"),
    $orphans: dartx.orphans = Symbol("dartx.orphans"),
    $outlineOffset: dartx.outlineOffset = Symbol("dartx.outlineOffset"),
    $overflowWrap: dartx.overflowWrap = Symbol("dartx.overflowWrap"),
    $overflowX: dartx.overflowX = Symbol("dartx.overflowX"),
    $overflowY: dartx.overflowY = Symbol("dartx.overflowY"),
    $paddingAfter: dartx.paddingAfter = Symbol("dartx.paddingAfter"),
    $paddingBefore: dartx.paddingBefore = Symbol("dartx.paddingBefore"),
    $paddingEnd: dartx.paddingEnd = Symbol("dartx.paddingEnd"),
    $paddingStart: dartx.paddingStart = Symbol("dartx.paddingStart"),
    $page: dartx.page = Symbol("dartx.page"),
    $perspective: dartx.perspective = Symbol("dartx.perspective"),
    $perspectiveOrigin: dartx.perspectiveOrigin = Symbol("dartx.perspectiveOrigin"),
    $perspectiveOriginX: dartx.perspectiveOriginX = Symbol("dartx.perspectiveOriginX"),
    $perspectiveOriginY: dartx.perspectiveOriginY = Symbol("dartx.perspectiveOriginY"),
    $pointerEvents: dartx.pointerEvents = Symbol("dartx.pointerEvents"),
    $printColorAdjust: dartx.printColorAdjust = Symbol("dartx.printColorAdjust"),
    $resize: dartx.resize = Symbol("dartx.resize"),
    $rtlOrdering: dartx.rtlOrdering = Symbol("dartx.rtlOrdering"),
    $rubyPosition: dartx.rubyPosition = Symbol("dartx.rubyPosition"),
    $scrollBehavior: dartx.scrollBehavior = Symbol("dartx.scrollBehavior"),
    $shapeImageThreshold: dartx.shapeImageThreshold = Symbol("dartx.shapeImageThreshold"),
    $shapeMargin: dartx.shapeMargin = Symbol("dartx.shapeMargin"),
    $shapeOutside: dartx.shapeOutside = Symbol("dartx.shapeOutside"),
    $speak: dartx.speak = Symbol("dartx.speak"),
    $tabSize: dartx.tabSize = Symbol("dartx.tabSize"),
    $tapHighlightColor: dartx.tapHighlightColor = Symbol("dartx.tapHighlightColor"),
    $textAlignLast: dartx.textAlignLast = Symbol("dartx.textAlignLast"),
    $textCombine: dartx.textCombine = Symbol("dartx.textCombine"),
    $textDecorationColor: dartx.textDecorationColor = Symbol("dartx.textDecorationColor"),
    $textDecorationLine: dartx.textDecorationLine = Symbol("dartx.textDecorationLine"),
    $textDecorationStyle: dartx.textDecorationStyle = Symbol("dartx.textDecorationStyle"),
    $textDecorationsInEffect: dartx.textDecorationsInEffect = Symbol("dartx.textDecorationsInEffect"),
    $textEmphasis: dartx.textEmphasis = Symbol("dartx.textEmphasis"),
    $textEmphasisColor: dartx.textEmphasisColor = Symbol("dartx.textEmphasisColor"),
    $textEmphasisPosition: dartx.textEmphasisPosition = Symbol("dartx.textEmphasisPosition"),
    $textEmphasisStyle: dartx.textEmphasisStyle = Symbol("dartx.textEmphasisStyle"),
    $textFillColor: dartx.textFillColor = Symbol("dartx.textFillColor"),
    $textJustify: dartx.textJustify = Symbol("dartx.textJustify"),
    $textLineThroughColor: dartx.textLineThroughColor = Symbol("dartx.textLineThroughColor"),
    $textLineThroughMode: dartx.textLineThroughMode = Symbol("dartx.textLineThroughMode"),
    $textLineThroughStyle: dartx.textLineThroughStyle = Symbol("dartx.textLineThroughStyle"),
    $textLineThroughWidth: dartx.textLineThroughWidth = Symbol("dartx.textLineThroughWidth"),
    $textOrientation: dartx.textOrientation = Symbol("dartx.textOrientation"),
    $textOverflow: dartx.textOverflow = Symbol("dartx.textOverflow"),
    $textOverlineColor: dartx.textOverlineColor = Symbol("dartx.textOverlineColor"),
    $textOverlineMode: dartx.textOverlineMode = Symbol("dartx.textOverlineMode"),
    $textOverlineStyle: dartx.textOverlineStyle = Symbol("dartx.textOverlineStyle"),
    $textOverlineWidth: dartx.textOverlineWidth = Symbol("dartx.textOverlineWidth"),
    $textRendering: dartx.textRendering = Symbol("dartx.textRendering"),
    $textSecurity: dartx.textSecurity = Symbol("dartx.textSecurity"),
    $textShadow: dartx.textShadow = Symbol("dartx.textShadow"),
    $textStroke: dartx.textStroke = Symbol("dartx.textStroke"),
    $textStrokeColor: dartx.textStrokeColor = Symbol("dartx.textStrokeColor"),
    $textStrokeWidth: dartx.textStrokeWidth = Symbol("dartx.textStrokeWidth"),
    $textUnderlineColor: dartx.textUnderlineColor = Symbol("dartx.textUnderlineColor"),
    $textUnderlineMode: dartx.textUnderlineMode = Symbol("dartx.textUnderlineMode"),
    $textUnderlinePosition: dartx.textUnderlinePosition = Symbol("dartx.textUnderlinePosition"),
    $textUnderlineStyle: dartx.textUnderlineStyle = Symbol("dartx.textUnderlineStyle"),
    $textUnderlineWidth: dartx.textUnderlineWidth = Symbol("dartx.textUnderlineWidth"),
    $touchAction: dartx.touchAction = Symbol("dartx.touchAction"),
    $touchActionDelay: dartx.touchActionDelay = Symbol("dartx.touchActionDelay"),
    $transformOrigin: dartx.transformOrigin = Symbol("dartx.transformOrigin"),
    $transformOriginX: dartx.transformOriginX = Symbol("dartx.transformOriginX"),
    $transformOriginY: dartx.transformOriginY = Symbol("dartx.transformOriginY"),
    $transformOriginZ: dartx.transformOriginZ = Symbol("dartx.transformOriginZ"),
    $transformStyle: dartx.transformStyle = Symbol("dartx.transformStyle"),
    $transition: dartx.transition = Symbol("dartx.transition"),
    $transitionDelay: dartx.transitionDelay = Symbol("dartx.transitionDelay"),
    $transitionDuration: dartx.transitionDuration = Symbol("dartx.transitionDuration"),
    $transitionProperty: dartx.transitionProperty = Symbol("dartx.transitionProperty"),
    $transitionTimingFunction: dartx.transitionTimingFunction = Symbol("dartx.transitionTimingFunction"),
    $unicodeRange: dartx.unicodeRange = Symbol("dartx.unicodeRange"),
    $userDrag: dartx.userDrag = Symbol("dartx.userDrag"),
    $userModify: dartx.userModify = Symbol("dartx.userModify"),
    $userSelect: dartx.userSelect = Symbol("dartx.userSelect"),
    $userZoom: dartx.userZoom = Symbol("dartx.userZoom"),
    $widows: dartx.widows = Symbol("dartx.widows"),
    $willChange: dartx.willChange = Symbol("dartx.willChange"),
    $wordBreak: dartx.wordBreak = Symbol("dartx.wordBreak"),
    $wordWrap: dartx.wordWrap = Symbol("dartx.wordWrap"),
    $wrapFlow: dartx.wrapFlow = Symbol("dartx.wrapFlow"),
    $wrapThrough: dartx.wrapThrough = Symbol("dartx.wrapThrough"),
    $writingMode: dartx.writingMode = Symbol("dartx.writingMode"),
    $zoom: dartx.zoom = Symbol("dartx.zoom"),
    _elementCssStyleDeclarationSetIterable: dart.privateName(html$, "_elementCssStyleDeclarationSetIterable"),
    _elementIterable: dart.privateName(html$, "_elementIterable"),
    _setAll: dart.privateName(html$, "_setAll"),
    $ownerRule: dartx.ownerRule = Symbol("dartx.ownerRule"),
    $rules: dartx.rules = Symbol("dartx.rules"),
    $addRule: dartx.addRule = Symbol("dartx.addRule"),
    $removeRule: dartx.removeRule = Symbol("dartx.removeRule"),
    $ownerNode: dartx.ownerNode = Symbol("dartx.ownerNode"),
    $componentAtIndex: dartx.componentAtIndex = Symbol("dartx.componentAtIndex"),
    $toMatrix: dartx.toMatrix = Symbol("dartx.toMatrix"),
    $unit: dartx.unit = Symbol("dartx.unit"),
    $fragmentAtIndex: dartx.fragmentAtIndex = Symbol("dartx.fragmentAtIndex"),
    $fallback: dartx.fallback = Symbol("dartx.fallback"),
    $variable: dartx.variable = Symbol("dartx.variable"),
    _define_1: dart.privateName(html$, "_define_1"),
    _define_2: dart.privateName(html$, "_define_2"),
    $define: dartx.define = Symbol("dartx.define"),
    $whenDefined: dartx.whenDefined = Symbol("dartx.whenDefined"),
    _dartDetail: dart.privateName(html$, "_dartDetail"),
    _initCustomEvent: dart.privateName(html$, "_initCustomEvent"),
    _detail: dart.privateName(html$, "_detail"),
    _get__detail: dart.privateName(html$, "_get__detail"),
    $options: dartx.options = Symbol("dartx.options"),
    $dropEffect: dartx.dropEffect = Symbol("dartx.dropEffect"),
    $effectAllowed: dartx.effectAllowed = Symbol("dartx.effectAllowed"),
    $files: dartx.files = Symbol("dartx.files"),
    $items: dartx.items = Symbol("dartx.items"),
    $types: dartx.types = Symbol("dartx.types"),
    $clearData: dartx.clearData = Symbol("dartx.clearData"),
    $getData: dartx.getData = Symbol("dartx.getData"),
    $setData: dartx.setData = Symbol("dartx.setData"),
    $setDragImage: dartx.setDragImage = Symbol("dartx.setDragImage"),
    _webkitGetAsEntry: dart.privateName(html$, "_webkitGetAsEntry"),
    $getAsEntry: dartx.getAsEntry = Symbol("dartx.getAsEntry"),
    $getAsFile: dartx.getAsFile = Symbol("dartx.getAsFile"),
    $addData: dartx.addData = Symbol("dartx.addData"),
    $addFile: dartx.addFile = Symbol("dartx.addFile"),
    _postMessage_1: dart.privateName(html$, "_postMessage_1"),
    _postMessage_2: dart.privateName(html$, "_postMessage_2"),
    _webkitRequestFileSystem: dart.privateName(html$, "_webkitRequestFileSystem"),
    $requestFileSystemSync: dartx.requestFileSystemSync = Symbol("dartx.requestFileSystemSync"),
    $resolveLocalFileSystemSyncUrl: dartx.resolveLocalFileSystemSyncUrl = Symbol("dartx.resolveLocalFileSystemSyncUrl"),
    _webkitResolveLocalFileSystemUrl: dart.privateName(html$, "_webkitResolveLocalFileSystemUrl"),
    $addressSpace: dartx.addressSpace = Symbol("dartx.addressSpace"),
    $caches: dartx.caches = Symbol("dartx.caches"),
    $crypto: dartx.crypto = Symbol("dartx.crypto"),
    $indexedDB: dartx.indexedDB = Symbol("dartx.indexedDB"),
    $isSecureContext: dartx.isSecureContext = Symbol("dartx.isSecureContext"),
    $location: dartx.location = Symbol("dartx.location"),
    $navigator: dartx.navigator = Symbol("dartx.navigator"),
    $performance: dartx.performance = Symbol("dartx.performance"),
    $self: dartx.self = Symbol("dartx.self"),
    $importScripts: dartx.importScripts = Symbol("dartx.importScripts"),
    $atob: dartx.atob = Symbol("dartx.atob"),
    $btoa: dartx.btoa = Symbol("dartx.btoa"),
    _setInterval_String: dart.privateName(html$, "_setInterval_String"),
    _setTimeout_String: dart.privateName(html$, "_setTimeout_String"),
    _clearInterval: dart.privateName(html$, "_clearInterval"),
    _clearTimeout: dart.privateName(html$, "_clearTimeout"),
    _setInterval: dart.privateName(html$, "_setInterval"),
    _setTimeout: dart.privateName(html$, "_setTimeout"),
    $queryUsageAndQuota: dartx.queryUsageAndQuota = Symbol("dartx.queryUsageAndQuota"),
    $requestQuota: dartx.requestQuota = Symbol("dartx.requestQuota"),
    $lineNumber: dartx.lineNumber = Symbol("dartx.lineNumber"),
    $sourceFile: dartx.sourceFile = Symbol("dartx.sourceFile"),
    $cornerPoints: dartx.cornerPoints = Symbol("dartx.cornerPoints"),
    $rawValue: dartx.rawValue = Symbol("dartx.rawValue"),
    $landmarks: dartx.landmarks = Symbol("dartx.landmarks"),
    $acceleration: dartx.acceleration = Symbol("dartx.acceleration"),
    $accelerationIncludingGravity: dartx.accelerationIncludingGravity = Symbol("dartx.accelerationIncludingGravity"),
    $interval: dartx.interval = Symbol("dartx.interval"),
    $rotationRate: dartx.rotationRate = Symbol("dartx.rotationRate"),
    $absolute: dartx.absolute = Symbol("dartx.absolute"),
    $alpha: dartx.alpha = Symbol("dartx.alpha"),
    $beta: dartx.beta = Symbol("dartx.beta"),
    $gamma: dartx.gamma = Symbol("dartx.gamma"),
    $show: dartx.show = Symbol("dartx.show"),
    $showModal: dartx.showModal = Symbol("dartx.showModal"),
    _getDirectory: dart.privateName(html$, "_getDirectory"),
    $createDirectory: dartx.createDirectory = Symbol("dartx.createDirectory"),
    _createReader: dart.privateName(html$, "_createReader"),
    $createReader: dartx.createReader = Symbol("dartx.createReader"),
    $getDirectory: dartx.getDirectory = Symbol("dartx.getDirectory"),
    _getFile: dart.privateName(html$, "_getFile"),
    $createFile: dartx.createFile = Symbol("dartx.createFile"),
    $getFile: dartx.getFile = Symbol("dartx.getFile"),
    __getDirectory_1: dart.privateName(html$, "__getDirectory_1"),
    __getDirectory_2: dart.privateName(html$, "__getDirectory_2"),
    __getDirectory_3: dart.privateName(html$, "__getDirectory_3"),
    __getDirectory_4: dart.privateName(html$, "__getDirectory_4"),
    __getDirectory: dart.privateName(html$, "__getDirectory"),
    __getFile_1: dart.privateName(html$, "__getFile_1"),
    __getFile_2: dart.privateName(html$, "__getFile_2"),
    __getFile_3: dart.privateName(html$, "__getFile_3"),
    __getFile_4: dart.privateName(html$, "__getFile_4"),
    __getFile: dart.privateName(html$, "__getFile"),
    _removeRecursively: dart.privateName(html$, "_removeRecursively"),
    $removeRecursively: dartx.removeRecursively = Symbol("dartx.removeRecursively"),
    $filesystem: dartx.filesystem = Symbol("dartx.filesystem"),
    $fullPath: dartx.fullPath = Symbol("dartx.fullPath"),
    $isDirectory: dartx.isDirectory = Symbol("dartx.isDirectory"),
    $isFile: dartx.isFile = Symbol("dartx.isFile"),
    _copyTo: dart.privateName(html$, "_copyTo"),
    $copyTo: dartx.copyTo = Symbol("dartx.copyTo"),
    _getMetadata: dart.privateName(html$, "_getMetadata"),
    $getMetadata: dartx.getMetadata = Symbol("dartx.getMetadata"),
    _getParent: dart.privateName(html$, "_getParent"),
    $getParent: dartx.getParent = Symbol("dartx.getParent"),
    _moveTo: dart.privateName(html$, "_moveTo"),
    _remove$1: dart.privateName(html$, "_remove"),
    $toUrl: dartx.toUrl = Symbol("dartx.toUrl"),
    _readEntries: dart.privateName(html$, "_readEntries"),
    $readEntries: dartx.readEntries = Symbol("dartx.readEntries"),
    _body: dart.privateName(html$, "_body"),
    $contentType: dartx.contentType = Symbol("dartx.contentType"),
    $cookie: dartx.cookie = Symbol("dartx.cookie"),
    $currentScript: dartx.currentScript = Symbol("dartx.currentScript"),
    _get_window: dart.privateName(html$, "_get_window"),
    $window: dartx.window = Symbol("dartx.window"),
    $documentElement: dartx.documentElement = Symbol("dartx.documentElement"),
    $domain: dartx.domain = Symbol("dartx.domain"),
    $fullscreenEnabled: dartx.fullscreenEnabled = Symbol("dartx.fullscreenEnabled"),
    _head$1: dart.privateName(html$, "_head"),
    $implementation: dartx.implementation = Symbol("dartx.implementation"),
    _lastModified: dart.privateName(html$, "_lastModified"),
    _preferredStylesheetSet: dart.privateName(html$, "_preferredStylesheetSet"),
    _referrer: dart.privateName(html$, "_referrer"),
    $rootElement: dartx.rootElement = Symbol("dartx.rootElement"),
    $rootScroller: dartx.rootScroller = Symbol("dartx.rootScroller"),
    $scrollingElement: dartx.scrollingElement = Symbol("dartx.scrollingElement"),
    _selectedStylesheetSet: dart.privateName(html$, "_selectedStylesheetSet"),
    $suborigin: dartx.suborigin = Symbol("dartx.suborigin")
  };
  var S$1 = {
    _title: dart.privateName(html$, "_title"),
    _visibilityState: dart.privateName(html$, "_visibilityState"),
    _webkitFullscreenElement: dart.privateName(html$, "_webkitFullscreenElement"),
    _webkitFullscreenEnabled: dart.privateName(html$, "_webkitFullscreenEnabled"),
    _webkitHidden: dart.privateName(html$, "_webkitHidden"),
    _webkitVisibilityState: dart.privateName(html$, "_webkitVisibilityState"),
    $adoptNode: dartx.adoptNode = Symbol("dartx.adoptNode"),
    _caretRangeFromPoint: dart.privateName(html$, "_caretRangeFromPoint"),
    $createDocumentFragment: dartx.createDocumentFragment = Symbol("dartx.createDocumentFragment"),
    _createElement: dart.privateName(html$, "_createElement"),
    _createElementNS: dart.privateName(html$, "_createElementNS"),
    $createRange: dartx.createRange = Symbol("dartx.createRange"),
    _createTextNode: dart.privateName(html$, "_createTextNode"),
    _createTouch_1: dart.privateName(html$, "_createTouch_1"),
    _createTouch_2: dart.privateName(html$, "_createTouch_2"),
    _createTouch_3: dart.privateName(html$, "_createTouch_3"),
    _createTouch_4: dart.privateName(html$, "_createTouch_4"),
    _createTouch_5: dart.privateName(html$, "_createTouch_5"),
    _createTouch: dart.privateName(html$, "_createTouch"),
    _createTouchList: dart.privateName(html$, "_createTouchList"),
    $execCommand: dartx.execCommand = Symbol("dartx.execCommand"),
    $exitFullscreen: dartx.exitFullscreen = Symbol("dartx.exitFullscreen"),
    $exitPointerLock: dartx.exitPointerLock = Symbol("dartx.exitPointerLock"),
    $getElementsByName: dartx.getElementsByName = Symbol("dartx.getElementsByName"),
    $getElementsByTagName: dartx.getElementsByTagName = Symbol("dartx.getElementsByTagName"),
    $importNode: dartx.importNode = Symbol("dartx.importNode"),
    $queryCommandEnabled: dartx.queryCommandEnabled = Symbol("dartx.queryCommandEnabled"),
    $queryCommandIndeterm: dartx.queryCommandIndeterm = Symbol("dartx.queryCommandIndeterm"),
    $queryCommandState: dartx.queryCommandState = Symbol("dartx.queryCommandState"),
    $queryCommandSupported: dartx.queryCommandSupported = Symbol("dartx.queryCommandSupported"),
    $queryCommandValue: dartx.queryCommandValue = Symbol("dartx.queryCommandValue"),
    _registerElement2_1: dart.privateName(html$, "_registerElement2_1"),
    _registerElement2_2: dart.privateName(html$, "_registerElement2_2"),
    $registerElement2: dartx.registerElement2 = Symbol("dartx.registerElement2"),
    _webkitExitFullscreen: dart.privateName(html$, "_webkitExitFullscreen"),
    $getElementById: dartx.getElementById = Symbol("dartx.getElementById"),
    $activeElement: dartx.activeElement = Symbol("dartx.activeElement"),
    $fullscreenElement: dartx.fullscreenElement = Symbol("dartx.fullscreenElement"),
    $pointerLockElement: dartx.pointerLockElement = Symbol("dartx.pointerLockElement"),
    _styleSheets: dart.privateName(html$, "_styleSheets"),
    _elementFromPoint: dart.privateName(html$, "_elementFromPoint"),
    $elementsFromPoint: dartx.elementsFromPoint = Symbol("dartx.elementsFromPoint"),
    $fonts: dartx.fonts = Symbol("dartx.fonts"),
    $onPointerLockChange: dartx.onPointerLockChange = Symbol("dartx.onPointerLockChange"),
    $onPointerLockError: dartx.onPointerLockError = Symbol("dartx.onPointerLockError"),
    $onReadyStateChange: dartx.onReadyStateChange = Symbol("dartx.onReadyStateChange"),
    $onSecurityPolicyViolation: dartx.onSecurityPolicyViolation = Symbol("dartx.onSecurityPolicyViolation"),
    $onSelectionChange: dartx.onSelectionChange = Symbol("dartx.onSelectionChange"),
    $supportsRegisterElement: dartx.supportsRegisterElement = Symbol("dartx.supportsRegisterElement"),
    $supportsRegister: dartx.supportsRegister = Symbol("dartx.supportsRegister"),
    $registerElement: dartx.registerElement = Symbol("dartx.registerElement"),
    _createElement_2: dart.privateName(html$, "_createElement_2"),
    _createElementNS_2: dart.privateName(html$, "_createElementNS_2"),
    $createElementNS: dartx.createElementNS = Symbol("dartx.createElementNS"),
    _createNodeIterator: dart.privateName(html$, "_createNodeIterator"),
    _createTreeWalker: dart.privateName(html$, "_createTreeWalker"),
    $visibilityState: dartx.visibilityState = Symbol("dartx.visibilityState"),
    _docChildren: dart.privateName(html$, "_docChildren"),
    $styleSheets: dartx.styleSheets = Symbol("dartx.styleSheets"),
    $elementFromPoint: dartx.elementFromPoint = Symbol("dartx.elementFromPoint"),
    $getSelection: dartx.getSelection = Symbol("dartx.getSelection"),
    $createDocument: dartx.createDocument = Symbol("dartx.createDocument"),
    $createDocumentType: dartx.createDocumentType = Symbol("dartx.createDocumentType"),
    $hasFeature: dartx.hasFeature = Symbol("dartx.hasFeature"),
    $a: dartx.a = Symbol("dartx.a"),
    $b: dartx.b = Symbol("dartx.b"),
    $c: dartx.c = Symbol("dartx.c"),
    $d: dartx.d = Symbol("dartx.d"),
    $e: dartx.e = Symbol("dartx.e"),
    $f: dartx.f = Symbol("dartx.f"),
    $m11: dartx.m11 = Symbol("dartx.m11"),
    $m12: dartx.m12 = Symbol("dartx.m12"),
    $m13: dartx.m13 = Symbol("dartx.m13"),
    $m14: dartx.m14 = Symbol("dartx.m14"),
    $m21: dartx.m21 = Symbol("dartx.m21"),
    $m22: dartx.m22 = Symbol("dartx.m22"),
    $m23: dartx.m23 = Symbol("dartx.m23"),
    $m24: dartx.m24 = Symbol("dartx.m24"),
    $m31: dartx.m31 = Symbol("dartx.m31"),
    $m32: dartx.m32 = Symbol("dartx.m32"),
    $m33: dartx.m33 = Symbol("dartx.m33"),
    $m34: dartx.m34 = Symbol("dartx.m34"),
    $m41: dartx.m41 = Symbol("dartx.m41"),
    $m42: dartx.m42 = Symbol("dartx.m42"),
    $m43: dartx.m43 = Symbol("dartx.m43"),
    $m44: dartx.m44 = Symbol("dartx.m44"),
    $invertSelf: dartx.invertSelf = Symbol("dartx.invertSelf"),
    _multiplySelf_1: dart.privateName(html$, "_multiplySelf_1"),
    _multiplySelf_2: dart.privateName(html$, "_multiplySelf_2"),
    $multiplySelf: dartx.multiplySelf = Symbol("dartx.multiplySelf"),
    _preMultiplySelf_1: dart.privateName(html$, "_preMultiplySelf_1"),
    _preMultiplySelf_2: dart.privateName(html$, "_preMultiplySelf_2"),
    $preMultiplySelf: dartx.preMultiplySelf = Symbol("dartx.preMultiplySelf"),
    $rotateAxisAngleSelf: dartx.rotateAxisAngleSelf = Symbol("dartx.rotateAxisAngleSelf"),
    $rotateFromVectorSelf: dartx.rotateFromVectorSelf = Symbol("dartx.rotateFromVectorSelf"),
    $rotateSelf: dartx.rotateSelf = Symbol("dartx.rotateSelf"),
    $scale3dSelf: dartx.scale3dSelf = Symbol("dartx.scale3dSelf"),
    $scaleSelf: dartx.scaleSelf = Symbol("dartx.scaleSelf"),
    $setMatrixValue: dartx.setMatrixValue = Symbol("dartx.setMatrixValue"),
    $skewXSelf: dartx.skewXSelf = Symbol("dartx.skewXSelf"),
    $skewYSelf: dartx.skewYSelf = Symbol("dartx.skewYSelf"),
    $translateSelf: dartx.translateSelf = Symbol("dartx.translateSelf"),
    $isIdentity: dartx.isIdentity = Symbol("dartx.isIdentity"),
    $flipX: dartx.flipX = Symbol("dartx.flipX"),
    $flipY: dartx.flipY = Symbol("dartx.flipY"),
    $inverse: dartx.inverse = Symbol("dartx.inverse"),
    _multiply_1: dart.privateName(html$, "_multiply_1"),
    _multiply_2: dart.privateName(html$, "_multiply_2"),
    $multiply: dartx.multiply = Symbol("dartx.multiply"),
    $rotateAxisAngle: dartx.rotateAxisAngle = Symbol("dartx.rotateAxisAngle"),
    $rotateFromVector: dartx.rotateFromVector = Symbol("dartx.rotateFromVector"),
    $scale3d: dartx.scale3d = Symbol("dartx.scale3d"),
    $skewX: dartx.skewX = Symbol("dartx.skewX"),
    $skewY: dartx.skewY = Symbol("dartx.skewY"),
    $toFloat32Array: dartx.toFloat32Array = Symbol("dartx.toFloat32Array"),
    $toFloat64Array: dartx.toFloat64Array = Symbol("dartx.toFloat64Array"),
    _transformPoint_1: dart.privateName(html$, "_transformPoint_1"),
    _transformPoint_2: dart.privateName(html$, "_transformPoint_2"),
    $transformPoint: dartx.transformPoint = Symbol("dartx.transformPoint"),
    $parseFromString: dartx.parseFromString = Symbol("dartx.parseFromString"),
    $w: dartx.w = Symbol("dartx.w"),
    _matrixTransform_1: dart.privateName(html$, "_matrixTransform_1"),
    _matrixTransform_2: dart.privateName(html$, "_matrixTransform_2"),
    $matrixTransform: dartx.matrixTransform = Symbol("dartx.matrixTransform"),
    $p1: dartx.p1 = Symbol("dartx.p1"),
    $p2: dartx.p2 = Symbol("dartx.p2"),
    $p3: dartx.p3 = Symbol("dartx.p3"),
    $p4: dartx.p4 = Symbol("dartx.p4"),
    $getBounds: dartx.getBounds = Symbol("dartx.getBounds"),
    __delete__: dart.privateName(html$, "__delete__"),
    $replace: dartx.replace = Symbol("dartx.replace"),
    $supports: dartx.supports = Symbol("dartx.supports"),
    $toggle: dartx.toggle = Symbol("dartx.toggle"),
    _childElements: dart.privateName(html$, "_childElements"),
    _element$2: dart.privateName(html$, "_element"),
    _filter$2: dart.privateName(html$, "_filter"),
    _nodeList: dart.privateName(html$, "_nodeList"),
    _forElementList: dart.privateName(html$, "_forElementList"),
    _value$6: dart.privateName(html$, "ScrollAlignment._value"),
    _value$7: dart.privateName(html$, "_value"),
    $colno: dartx.colno = Symbol("dartx.colno"),
    $filename: dartx.filename = Symbol("dartx.filename"),
    $lineno: dartx.lineno = Symbol("dartx.lineno"),
    $withCredentials: dartx.withCredentials = Symbol("dartx.withCredentials"),
    $onOpen: dartx.onOpen = Symbol("dartx.onOpen"),
    _ptr: dart.privateName(html$, "_ptr"),
    $lastEventId: dartx.lastEventId = Symbol("dartx.lastEventId"),
    $ports: dartx.ports = Symbol("dartx.ports"),
    $AddSearchProvider: dartx.AddSearchProvider = Symbol("dartx.AddSearchProvider"),
    $IsSearchProviderInstalled: dartx.IsSearchProviderInstalled = Symbol("dartx.IsSearchProviderInstalled"),
    $provider: dartx.provider = Symbol("dartx.provider"),
    $clientId: dartx.clientId = Symbol("dartx.clientId"),
    $isReload: dartx.isReload = Symbol("dartx.isReload"),
    $preloadResponse: dartx.preloadResponse = Symbol("dartx.preloadResponse"),
    $elements: dartx.elements = Symbol("dartx.elements"),
    $lastModified: dartx.lastModified = Symbol("dartx.lastModified"),
    _get_lastModifiedDate: dart.privateName(html$, "_get_lastModifiedDate"),
    $lastModifiedDate: dartx.lastModifiedDate = Symbol("dartx.lastModifiedDate"),
    $relativePath: dartx.relativePath = Symbol("dartx.relativePath"),
    _createWriter: dart.privateName(html$, "_createWriter"),
    $createWriter: dartx.createWriter = Symbol("dartx.createWriter"),
    _file$1: dart.privateName(html$, "_file"),
    $file: dartx.file = Symbol("dartx.file"),
    $readAsArrayBuffer: dartx.readAsArrayBuffer = Symbol("dartx.readAsArrayBuffer"),
    $readAsDataUrl: dartx.readAsDataUrl = Symbol("dartx.readAsDataUrl"),
    $readAsText: dartx.readAsText = Symbol("dartx.readAsText"),
    $onLoadEnd: dartx.onLoadEnd = Symbol("dartx.onLoadEnd"),
    $onLoadStart: dartx.onLoadStart = Symbol("dartx.onLoadStart"),
    $root: dartx.root = Symbol("dartx.root"),
    $seek: dartx.seek = Symbol("dartx.seek"),
    $write: dartx.write = Symbol("dartx.write"),
    $onWrite: dartx.onWrite = Symbol("dartx.onWrite"),
    $onWriteEnd: dartx.onWriteEnd = Symbol("dartx.onWriteEnd"),
    $onWriteStart: dartx.onWriteStart = Symbol("dartx.onWriteStart"),
    _get_relatedTarget: dart.privateName(html$, "_get_relatedTarget"),
    $relatedTarget: dartx.relatedTarget = Symbol("dartx.relatedTarget"),
    $family: dartx.family = Symbol("dartx.family"),
    $featureSettings: dartx.featureSettings = Symbol("dartx.featureSettings"),
    $loaded: dartx.loaded = Symbol("dartx.loaded"),
    $stretch: dartx.stretch = Symbol("dartx.stretch"),
    $variant: dartx.variant = Symbol("dartx.variant"),
    $weight: dartx.weight = Symbol("dartx.weight"),
    $check: dartx.check = Symbol("dartx.check"),
    $onLoading: dartx.onLoading = Symbol("dartx.onLoading"),
    $onLoadingDone: dartx.onLoadingDone = Symbol("dartx.onLoadingDone"),
    $onLoadingError: dartx.onLoadingError = Symbol("dartx.onLoadingError"),
    $fontfaces: dartx.fontfaces = Symbol("dartx.fontfaces"),
    $appendBlob: dartx.appendBlob = Symbol("dartx.appendBlob"),
    $acceptCharset: dartx.acceptCharset = Symbol("dartx.acceptCharset"),
    $action: dartx.action = Symbol("dartx.action"),
    $enctype: dartx.enctype = Symbol("dartx.enctype"),
    $method: dartx.method = Symbol("dartx.method"),
    $noValidate: dartx.noValidate = Symbol("dartx.noValidate"),
    _requestAutocomplete_1: dart.privateName(html$, "_requestAutocomplete_1"),
    $requestAutocomplete: dartx.requestAutocomplete = Symbol("dartx.requestAutocomplete"),
    $reset: dartx.reset = Symbol("dartx.reset"),
    $submit: dartx.submit = Symbol("dartx.submit"),
    $axes: dartx.axes = Symbol("dartx.axes"),
    $buttons: dartx.buttons = Symbol("dartx.buttons"),
    $connected: dartx.connected = Symbol("dartx.connected"),
    $displayId: dartx.displayId = Symbol("dartx.displayId"),
    $hand: dartx.hand = Symbol("dartx.hand"),
    $mapping: dartx.mapping = Symbol("dartx.mapping"),
    $pose: dartx.pose = Symbol("dartx.pose"),
    $touched: dartx.touched = Symbol("dartx.touched"),
    $gamepad: dartx.gamepad = Symbol("dartx.gamepad"),
    $angularAcceleration: dartx.angularAcceleration = Symbol("dartx.angularAcceleration"),
    $angularVelocity: dartx.angularVelocity = Symbol("dartx.angularVelocity"),
    $hasOrientation: dartx.hasOrientation = Symbol("dartx.hasOrientation"),
    $hasPosition: dartx.hasPosition = Symbol("dartx.hasPosition"),
    $linearAcceleration: dartx.linearAcceleration = Symbol("dartx.linearAcceleration"),
    $linearVelocity: dartx.linearVelocity = Symbol("dartx.linearVelocity"),
    _ensurePosition: dart.privateName(html$, "_ensurePosition"),
    _getCurrentPosition: dart.privateName(html$, "_getCurrentPosition"),
    $getCurrentPosition: dartx.getCurrentPosition = Symbol("dartx.getCurrentPosition"),
    _clearWatch: dart.privateName(html$, "_clearWatch"),
    _watchPosition: dart.privateName(html$, "_watchPosition"),
    $watchPosition: dartx.watchPosition = Symbol("dartx.watchPosition"),
    _getCurrentPosition_1: dart.privateName(html$, "_getCurrentPosition_1"),
    _getCurrentPosition_2: dart.privateName(html$, "_getCurrentPosition_2"),
    _getCurrentPosition_3: dart.privateName(html$, "_getCurrentPosition_3"),
    _watchPosition_1: dart.privateName(html$, "_watchPosition_1"),
    _watchPosition_2: dart.privateName(html$, "_watchPosition_2"),
    _watchPosition_3: dart.privateName(html$, "_watchPosition_3"),
    $newUrl: dartx.newUrl = Symbol("dartx.newUrl"),
    $oldUrl: dartx.oldUrl = Symbol("dartx.oldUrl"),
    $scrollRestoration: dartx.scrollRestoration = Symbol("dartx.scrollRestoration"),
    _get_state: dart.privateName(html$, "_get_state"),
    $back: dartx.back = Symbol("dartx.back"),
    $forward: dartx.forward = Symbol("dartx.forward"),
    $go: dartx.go = Symbol("dartx.go"),
    _pushState_1: dart.privateName(html$, "_pushState_1"),
    $pushState: dartx.pushState = Symbol("dartx.pushState"),
    _replaceState_1: dart.privateName(html$, "_replaceState_1"),
    $replaceState: dartx.replaceState = Symbol("dartx.replaceState"),
    $namedItem: dartx.namedItem = Symbol("dartx.namedItem"),
    $body: dartx.body = Symbol("dartx.body"),
    $caretRangeFromPoint: dartx.caretRangeFromPoint = Symbol("dartx.caretRangeFromPoint"),
    $preferredStylesheetSet: dartx.preferredStylesheetSet = Symbol("dartx.preferredStylesheetSet"),
    $referrer: dartx.referrer = Symbol("dartx.referrer"),
    $selectedStylesheetSet: dartx.selectedStylesheetSet = Symbol("dartx.selectedStylesheetSet"),
    $register: dartx.register = Symbol("dartx.register"),
    $onVisibilityChange: dartx.onVisibilityChange = Symbol("dartx.onVisibilityChange"),
    $createElementUpgrader: dartx.createElementUpgrader = Symbol("dartx.createElementUpgrader"),
    _item: dart.privateName(html$, "_item"),
    $responseHeaders: dartx.responseHeaders = Symbol("dartx.responseHeaders"),
    _get_response: dart.privateName(html$, "_get_response"),
    $responseText: dartx.responseText = Symbol("dartx.responseText"),
    $responseType: dartx.responseType = Symbol("dartx.responseType"),
    $responseUrl: dartx.responseUrl = Symbol("dartx.responseUrl"),
    $responseXml: dartx.responseXml = Symbol("dartx.responseXml"),
    $statusText: dartx.statusText = Symbol("dartx.statusText"),
    $timeout: dartx.timeout = Symbol("dartx.timeout"),
    $upload: dartx.upload = Symbol("dartx.upload"),
    $getAllResponseHeaders: dartx.getAllResponseHeaders = Symbol("dartx.getAllResponseHeaders"),
    $getResponseHeader: dartx.getResponseHeader = Symbol("dartx.getResponseHeader"),
    $overrideMimeType: dartx.overrideMimeType = Symbol("dartx.overrideMimeType"),
    $send: dartx.send = Symbol("dartx.send"),
    $setRequestHeader: dartx.setRequestHeader = Symbol("dartx.setRequestHeader"),
    $onTimeout: dartx.onTimeout = Symbol("dartx.onTimeout"),
    $allow: dartx.allow = Symbol("dartx.allow"),
    $allowFullscreen: dartx.allowFullscreen = Symbol("dartx.allowFullscreen"),
    $allowPaymentRequest: dartx.allowPaymentRequest = Symbol("dartx.allowPaymentRequest"),
    _get_contentWindow: dart.privateName(html$, "_get_contentWindow"),
    $contentWindow: dartx.contentWindow = Symbol("dartx.contentWindow"),
    $csp: dartx.csp = Symbol("dartx.csp"),
    $sandbox: dartx.sandbox = Symbol("dartx.sandbox"),
    $srcdoc: dartx.srcdoc = Symbol("dartx.srcdoc"),
    $didTimeout: dartx.didTimeout = Symbol("dartx.didTimeout"),
    $timeRemaining: dartx.timeRemaining = Symbol("dartx.timeRemaining"),
    $transferFromImageBitmap: dartx.transferFromImageBitmap = Symbol("dartx.transferFromImageBitmap"),
    $track: dartx.track = Symbol("dartx.track"),
    $getPhotoCapabilities: dartx.getPhotoCapabilities = Symbol("dartx.getPhotoCapabilities"),
    $getPhotoSettings: dartx.getPhotoSettings = Symbol("dartx.getPhotoSettings"),
    $grabFrame: dartx.grabFrame = Symbol("dartx.grabFrame"),
    $setOptions: dartx.setOptions = Symbol("dartx.setOptions"),
    $takePhoto: dartx.takePhoto = Symbol("dartx.takePhoto"),
    $async: dartx.async = Symbol("dartx.async"),
    $complete: dartx.complete = Symbol("dartx.complete"),
    $isMap: dartx.isMap = Symbol("dartx.isMap"),
    $naturalHeight: dartx.naturalHeight = Symbol("dartx.naturalHeight"),
    $naturalWidth: dartx.naturalWidth = Symbol("dartx.naturalWidth"),
    $sizes: dartx.sizes = Symbol("dartx.sizes"),
    $srcset: dartx.srcset = Symbol("dartx.srcset"),
    $useMap: dartx.useMap = Symbol("dartx.useMap"),
    $decode: dartx.decode = Symbol("dartx.decode"),
    $firesTouchEvents: dartx.firesTouchEvents = Symbol("dartx.firesTouchEvents"),
    $accept: dartx.accept = Symbol("dartx.accept"),
    $autocapitalize: dartx.autocapitalize = Symbol("dartx.autocapitalize"),
    $capture: dartx.capture = Symbol("dartx.capture"),
    $defaultChecked: dartx.defaultChecked = Symbol("dartx.defaultChecked"),
    $defaultValue: dartx.defaultValue = Symbol("dartx.defaultValue"),
    $dirName: dartx.dirName = Symbol("dartx.dirName"),
    $incremental: dartx.incremental = Symbol("dartx.incremental"),
    $indeterminate: dartx.indeterminate = Symbol("dartx.indeterminate"),
    $list: dartx.list = Symbol("dartx.list"),
    $max: dartx.max = Symbol("dartx.max"),
    $maxLength: dartx.maxLength = Symbol("dartx.maxLength"),
    $min: dartx.min = Symbol("dartx.min"),
    $minLength: dartx.minLength = Symbol("dartx.minLength"),
    $multiple: dartx.multiple = Symbol("dartx.multiple"),
    $pattern: dartx.pattern = Symbol("dartx.pattern"),
    $selectionDirection: dartx.selectionDirection = Symbol("dartx.selectionDirection"),
    $selectionEnd: dartx.selectionEnd = Symbol("dartx.selectionEnd"),
    $selectionStart: dartx.selectionStart = Symbol("dartx.selectionStart"),
    $step: dartx.step = Symbol("dartx.step"),
    _get_valueAsDate: dart.privateName(html$, "_get_valueAsDate"),
    $valueAsDate: dartx.valueAsDate = Symbol("dartx.valueAsDate"),
    _set_valueAsDate: dart.privateName(html$, "_set_valueAsDate"),
    $valueAsNumber: dartx.valueAsNumber = Symbol("dartx.valueAsNumber"),
    $directory: dartx.directory = Symbol("dartx.directory"),
    $setRangeText: dartx.setRangeText = Symbol("dartx.setRangeText"),
    $setSelectionRange: dartx.setSelectionRange = Symbol("dartx.setSelectionRange"),
    $stepDown: dartx.stepDown = Symbol("dartx.stepDown"),
    $stepUp: dartx.stepUp = Symbol("dartx.stepUp"),
    files: dart.privateName(html$, "FileUploadInputElement.files"),
    _registerForeignFetch_1: dart.privateName(html$, "_registerForeignFetch_1"),
    $registerForeignFetch: dartx.registerForeignFetch = Symbol("dartx.registerForeignFetch"),
    $rootMargin: dartx.rootMargin = Symbol("dartx.rootMargin"),
    $thresholds: dartx.thresholds = Symbol("dartx.thresholds"),
    $disconnect: dartx.disconnect = Symbol("dartx.disconnect"),
    $takeRecords: dartx.takeRecords = Symbol("dartx.takeRecords"),
    $boundingClientRect: dartx.boundingClientRect = Symbol("dartx.boundingClientRect"),
    $intersectionRatio: dartx.intersectionRatio = Symbol("dartx.intersectionRatio"),
    $intersectionRect: dartx.intersectionRect = Symbol("dartx.intersectionRect"),
    $isIntersecting: dartx.isIntersecting = Symbol("dartx.isIntersecting"),
    $rootBounds: dartx.rootBounds = Symbol("dartx.rootBounds"),
    _initKeyboardEvent: dart.privateName(html$, "_initKeyboardEvent"),
    $keyCode: dartx.keyCode = Symbol("dartx.keyCode"),
    $charCode: dartx.charCode = Symbol("dartx.charCode"),
    $which: dartx.which = Symbol("dartx.which"),
    $altKey: dartx.altKey = Symbol("dartx.altKey"),
    _charCode: dart.privateName(html$, "_charCode"),
    $ctrlKey: dartx.ctrlKey = Symbol("dartx.ctrlKey"),
    $isComposing: dartx.isComposing = Symbol("dartx.isComposing"),
    _keyCode: dart.privateName(html$, "_keyCode"),
    $metaKey: dartx.metaKey = Symbol("dartx.metaKey"),
    $repeat: dartx.repeat = Symbol("dartx.repeat"),
    $shiftKey: dartx.shiftKey = Symbol("dartx.shiftKey"),
    $getModifierState: dartx.getModifierState = Symbol("dartx.getModifierState"),
    $control: dartx.control = Symbol("dartx.control"),
    $htmlFor: dartx.htmlFor = Symbol("dartx.htmlFor"),
    $as: dartx.as = Symbol("dartx.as"),
    $import: dartx.import = Symbol("dartx.import"),
    $integrity: dartx.integrity = Symbol("dartx.integrity"),
    $relList: dartx.relList = Symbol("dartx.relList"),
    $scope: dartx.scope = Symbol("dartx.scope"),
    $sheet: dartx.sheet = Symbol("dartx.sheet"),
    $supportsImport: dartx.supportsImport = Symbol("dartx.supportsImport"),
    $ancestorOrigins: dartx.ancestorOrigins = Symbol("dartx.ancestorOrigins"),
    $trustedHref: dartx.trustedHref = Symbol("dartx.trustedHref"),
    $assign: dartx.assign = Symbol("dartx.assign"),
    $reload: dartx.reload = Symbol("dartx.reload"),
    $areas: dartx.areas = Symbol("dartx.areas"),
    $decodingInfo: dartx.decodingInfo = Symbol("dartx.decodingInfo"),
    $encodingInfo: dartx.encodingInfo = Symbol("dartx.encodingInfo"),
    $powerEfficient: dartx.powerEfficient = Symbol("dartx.powerEfficient"),
    $smooth: dartx.smooth = Symbol("dartx.smooth"),
    $supported: dartx.supported = Symbol("dartx.supported"),
    $deviceId: dartx.deviceId = Symbol("dartx.deviceId"),
    $groupId: dartx.groupId = Symbol("dartx.groupId"),
    $enumerateDevices: dartx.enumerateDevices = Symbol("dartx.enumerateDevices"),
    _getSupportedConstraints_1: dart.privateName(html$, "_getSupportedConstraints_1"),
    $getSupportedConstraints: dartx.getSupportedConstraints = Symbol("dartx.getSupportedConstraints"),
    $getUserMedia: dartx.getUserMedia = Symbol("dartx.getUserMedia"),
    $initData: dartx.initData = Symbol("dartx.initData"),
    $initDataType: dartx.initDataType = Symbol("dartx.initDataType"),
    $messageType: dartx.messageType = Symbol("dartx.messageType"),
    $closed: dartx.closed = Symbol("dartx.closed"),
    $expiration: dartx.expiration = Symbol("dartx.expiration"),
    $keyStatuses: dartx.keyStatuses = Symbol("dartx.keyStatuses"),
    $sessionId: dartx.sessionId = Symbol("dartx.sessionId"),
    $generateRequest: dartx.generateRequest = Symbol("dartx.generateRequest"),
    _update$1: dart.privateName(html$, "_update"),
    $keySystem: dartx.keySystem = Symbol("dartx.keySystem"),
    $createMediaKeys: dartx.createMediaKeys = Symbol("dartx.createMediaKeys"),
    _getConfiguration_1: dart.privateName(html$, "_getConfiguration_1"),
    $getConfiguration: dartx.getConfiguration = Symbol("dartx.getConfiguration"),
    _createSession: dart.privateName(html$, "_createSession"),
    $getStatusForPolicy: dartx.getStatusForPolicy = Symbol("dartx.getStatusForPolicy"),
    $setServerCertificate: dartx.setServerCertificate = Symbol("dartx.setServerCertificate"),
    $minHdcpVersion: dartx.minHdcpVersion = Symbol("dartx.minHdcpVersion"),
    $mediaText: dartx.mediaText = Symbol("dartx.mediaText"),
    $appendMedium: dartx.appendMedium = Symbol("dartx.appendMedium"),
    $deleteMedium: dartx.deleteMedium = Symbol("dartx.deleteMedium"),
    $album: dartx.album = Symbol("dartx.album"),
    $artist: dartx.artist = Symbol("dartx.artist"),
    $artwork: dartx.artwork = Symbol("dartx.artwork"),
    $addListener: dartx.addListener = Symbol("dartx.addListener"),
    $removeListener: dartx.removeListener = Symbol("dartx.removeListener"),
    $audioBitsPerSecond: dartx.audioBitsPerSecond = Symbol("dartx.audioBitsPerSecond"),
    $mimeType: dartx.mimeType = Symbol("dartx.mimeType"),
    $stream: dartx.stream = Symbol("dartx.stream"),
    $videoBitsPerSecond: dartx.videoBitsPerSecond = Symbol("dartx.videoBitsPerSecond"),
    $requestData: dartx.requestData = Symbol("dartx.requestData"),
    $resume: dartx.resume = Symbol("dartx.resume"),
    $metadata: dartx.metadata = Symbol("dartx.metadata"),
    $playbackState: dartx.playbackState = Symbol("dartx.playbackState"),
    $setActionHandler: dartx.setActionHandler = Symbol("dartx.setActionHandler"),
    $activeSourceBuffers: dartx.activeSourceBuffers = Symbol("dartx.activeSourceBuffers"),
    $sourceBuffers: dartx.sourceBuffers = Symbol("dartx.sourceBuffers"),
    $addSourceBuffer: dartx.addSourceBuffer = Symbol("dartx.addSourceBuffer"),
    $clearLiveSeekableRange: dartx.clearLiveSeekableRange = Symbol("dartx.clearLiveSeekableRange"),
    $endOfStream: dartx.endOfStream = Symbol("dartx.endOfStream"),
    $removeSourceBuffer: dartx.removeSourceBuffer = Symbol("dartx.removeSourceBuffer"),
    $setLiveSeekableRange: dartx.setLiveSeekableRange = Symbol("dartx.setLiveSeekableRange"),
    $active: dartx.active = Symbol("dartx.active"),
    $addTrack: dartx.addTrack = Symbol("dartx.addTrack"),
    $getAudioTracks: dartx.getAudioTracks = Symbol("dartx.getAudioTracks"),
    $getTrackById: dartx.getTrackById = Symbol("dartx.getTrackById"),
    $getTracks: dartx.getTracks = Symbol("dartx.getTracks"),
    $getVideoTracks: dartx.getVideoTracks = Symbol("dartx.getVideoTracks"),
    $removeTrack: dartx.removeTrack = Symbol("dartx.removeTrack"),
    $onAddTrack: dartx.onAddTrack = Symbol("dartx.onAddTrack"),
    $onRemoveTrack: dartx.onRemoveTrack = Symbol("dartx.onRemoveTrack"),
    $jsHeapSizeLimit: dartx.jsHeapSizeLimit = Symbol("dartx.jsHeapSizeLimit"),
    $totalJSHeapSize: dartx.totalJSHeapSize = Symbol("dartx.totalJSHeapSize"),
    $usedJSHeapSize: dartx.usedJSHeapSize = Symbol("dartx.usedJSHeapSize"),
    $port1: dartx.port1 = Symbol("dartx.port1"),
    $port2: dartx.port2 = Symbol("dartx.port2"),
    _initMessageEvent: dart.privateName(html$, "_initMessageEvent"),
    _get_data: dart.privateName(html$, "_get_data"),
    _get_source: dart.privateName(html$, "_get_source"),
    _initMessageEvent_1: dart.privateName(html$, "_initMessageEvent_1"),
    _start$4: dart.privateName(html$, "_start"),
    $httpEquiv: dartx.httpEquiv = Symbol("dartx.httpEquiv"),
    _get_modificationTime: dart.privateName(html$, "_get_modificationTime"),
    $modificationTime: dartx.modificationTime = Symbol("dartx.modificationTime"),
    $high: dartx.high = Symbol("dartx.high"),
    $low: dartx.low = Symbol("dartx.low"),
    $optimum: dartx.optimum = Symbol("dartx.optimum"),
    $inputs: dartx.inputs = Symbol("dartx.inputs"),
    $outputs: dartx.outputs = Symbol("dartx.outputs"),
    $sysexEnabled: dartx.sysexEnabled = Symbol("dartx.sysexEnabled"),
    $onMidiMessage: dartx.onMidiMessage = Symbol("dartx.onMidiMessage"),
    $connection: dartx.connection = Symbol("dartx.connection"),
    $manufacturer: dartx.manufacturer = Symbol("dartx.manufacturer"),
    _getItem: dart.privateName(html$, "_getItem"),
    $description: dartx.description = Symbol("dartx.description"),
    $enabledPlugin: dartx.enabledPlugin = Symbol("dartx.enabledPlugin"),
    $suffixes: dartx.suffixes = Symbol("dartx.suffixes"),
    $cite: dartx.cite = Symbol("dartx.cite"),
    $dateTime: dartx.dateTime = Symbol("dartx.dateTime"),
    _initMouseEvent: dart.privateName(html$, "_initMouseEvent"),
    $button: dartx.button = Symbol("dartx.button"),
    _clientX: dart.privateName(html$, "_clientX"),
    _clientY: dart.privateName(html$, "_clientY"),
    $fromElement: dartx.fromElement = Symbol("dartx.fromElement"),
    _layerX: dart.privateName(html$, "_layerX"),
    _layerY: dart.privateName(html$, "_layerY"),
    _movementX: dart.privateName(html$, "_movementX"),
    _movementY: dart.privateName(html$, "_movementY"),
    _pageX: dart.privateName(html$, "_pageX"),
    _pageY: dart.privateName(html$, "_pageY"),
    $region: dartx.region = Symbol("dartx.region"),
    _screenX: dart.privateName(html$, "_screenX"),
    _screenY: dart.privateName(html$, "_screenY"),
    $toElement: dartx.toElement = Symbol("dartx.toElement"),
    _initMouseEvent_1: dart.privateName(html$, "_initMouseEvent_1"),
    $movement: dartx.movement = Symbol("dartx.movement"),
    $screen: dartx.screen = Symbol("dartx.screen"),
    $layer: dartx.layer = Symbol("dartx.layer"),
    $dataTransfer: dartx.dataTransfer = Symbol("dartx.dataTransfer"),
    $attrChange: dartx.attrChange = Symbol("dartx.attrChange"),
    $attrName: dartx.attrName = Symbol("dartx.attrName"),
    $newValue: dartx.newValue = Symbol("dartx.newValue"),
    $prevValue: dartx.prevValue = Symbol("dartx.prevValue"),
    $relatedNode: dartx.relatedNode = Symbol("dartx.relatedNode"),
    $initMutationEvent: dartx.initMutationEvent = Symbol("dartx.initMutationEvent"),
    _observe_1$1: dart.privateName(html$, "_observe_1"),
    _observe_2: dart.privateName(html$, "_observe_2"),
    _observe: dart.privateName(html$, "_observe"),
    _call: dart.privateName(html$, "_call"),
    $addedNodes: dartx.addedNodes = Symbol("dartx.addedNodes"),
    $attributeName: dartx.attributeName = Symbol("dartx.attributeName"),
    $attributeNamespace: dartx.attributeNamespace = Symbol("dartx.attributeNamespace"),
    $nextSibling: dartx.nextSibling = Symbol("dartx.nextSibling"),
    $oldValue: dartx.oldValue = Symbol("dartx.oldValue"),
    $previousSibling: dartx.previousSibling = Symbol("dartx.previousSibling"),
    $removedNodes: dartx.removedNodes = Symbol("dartx.removedNodes"),
    $disable: dartx.disable = Symbol("dartx.disable"),
    $enable: dartx.enable = Symbol("dartx.enable"),
    $getState: dartx.getState = Symbol("dartx.getState"),
    _getGamepads: dart.privateName(html$, "_getGamepads"),
    $getGamepads: dartx.getGamepads = Symbol("dartx.getGamepads"),
    $language: dartx.language = Symbol("dartx.language"),
    _ensureGetUserMedia: dart.privateName(html$, "_ensureGetUserMedia"),
    _getUserMedia: dart.privateName(html$, "_getUserMedia"),
    $budget: dartx.budget = Symbol("dartx.budget"),
    $clipboard: dartx.clipboard = Symbol("dartx.clipboard"),
    $credentials: dartx.credentials = Symbol("dartx.credentials"),
    $deviceMemory: dartx.deviceMemory = Symbol("dartx.deviceMemory"),
    $doNotTrack: dartx.doNotTrack = Symbol("dartx.doNotTrack"),
    $geolocation: dartx.geolocation = Symbol("dartx.geolocation"),
    $maxTouchPoints: dartx.maxTouchPoints = Symbol("dartx.maxTouchPoints"),
    $mediaCapabilities: dartx.mediaCapabilities = Symbol("dartx.mediaCapabilities"),
    $mediaDevices: dartx.mediaDevices = Symbol("dartx.mediaDevices"),
    $mediaSession: dartx.mediaSession = Symbol("dartx.mediaSession"),
    $mimeTypes: dartx.mimeTypes = Symbol("dartx.mimeTypes"),
    $nfc: dartx.nfc = Symbol("dartx.nfc")
  };
  var S$2 = {
    $permissions: dartx.permissions = Symbol("dartx.permissions"),
    $presentation: dartx.presentation = Symbol("dartx.presentation"),
    $productSub: dartx.productSub = Symbol("dartx.productSub"),
    $serviceWorker: dartx.serviceWorker = Symbol("dartx.serviceWorker"),
    $storage: dartx.storage = Symbol("dartx.storage"),
    $vendor: dartx.vendor = Symbol("dartx.vendor"),
    $vendorSub: dartx.vendorSub = Symbol("dartx.vendorSub"),
    $vr: dartx.vr = Symbol("dartx.vr"),
    $persistentStorage: dartx.persistentStorage = Symbol("dartx.persistentStorage"),
    $temporaryStorage: dartx.temporaryStorage = Symbol("dartx.temporaryStorage"),
    $cancelKeyboardLock: dartx.cancelKeyboardLock = Symbol("dartx.cancelKeyboardLock"),
    $getBattery: dartx.getBattery = Symbol("dartx.getBattery"),
    $getInstalledRelatedApps: dartx.getInstalledRelatedApps = Symbol("dartx.getInstalledRelatedApps"),
    $getVRDisplays: dartx.getVRDisplays = Symbol("dartx.getVRDisplays"),
    $registerProtocolHandler: dartx.registerProtocolHandler = Symbol("dartx.registerProtocolHandler"),
    _requestKeyboardLock_1: dart.privateName(html$, "_requestKeyboardLock_1"),
    _requestKeyboardLock_2: dart.privateName(html$, "_requestKeyboardLock_2"),
    $requestKeyboardLock: dartx.requestKeyboardLock = Symbol("dartx.requestKeyboardLock"),
    $requestMidiAccess: dartx.requestMidiAccess = Symbol("dartx.requestMidiAccess"),
    $requestMediaKeySystemAccess: dartx.requestMediaKeySystemAccess = Symbol("dartx.requestMediaKeySystemAccess"),
    $sendBeacon: dartx.sendBeacon = Symbol("dartx.sendBeacon"),
    $share: dartx.share = Symbol("dartx.share"),
    $webdriver: dartx.webdriver = Symbol("dartx.webdriver"),
    $cookieEnabled: dartx.cookieEnabled = Symbol("dartx.cookieEnabled"),
    $appCodeName: dartx.appCodeName = Symbol("dartx.appCodeName"),
    $appName: dartx.appName = Symbol("dartx.appName"),
    $appVersion: dartx.appVersion = Symbol("dartx.appVersion"),
    $dartEnabled: dartx.dartEnabled = Symbol("dartx.dartEnabled"),
    $platform: dartx.platform = Symbol("dartx.platform"),
    $product: dartx.product = Symbol("dartx.product"),
    $userAgent: dartx.userAgent = Symbol("dartx.userAgent"),
    $languages: dartx.languages = Symbol("dartx.languages"),
    $onLine: dartx.onLine = Symbol("dartx.onLine"),
    $hardwareConcurrency: dartx.hardwareConcurrency = Symbol("dartx.hardwareConcurrency"),
    $constraintName: dartx.constraintName = Symbol("dartx.constraintName"),
    $downlink: dartx.downlink = Symbol("dartx.downlink"),
    $downlinkMax: dartx.downlinkMax = Symbol("dartx.downlinkMax"),
    $effectiveType: dartx.effectiveType = Symbol("dartx.effectiveType"),
    $rtt: dartx.rtt = Symbol("dartx.rtt"),
    $pointerBeforeReferenceNode: dartx.pointerBeforeReferenceNode = Symbol("dartx.pointerBeforeReferenceNode"),
    $referenceNode: dartx.referenceNode = Symbol("dartx.referenceNode"),
    $whatToShow: dartx.whatToShow = Symbol("dartx.whatToShow"),
    $detach: dartx.detach = Symbol("dartx.detach"),
    $actions: dartx.actions = Symbol("dartx.actions"),
    $badge: dartx.badge = Symbol("dartx.badge"),
    $icon: dartx.icon = Symbol("dartx.icon"),
    $image: dartx.image = Symbol("dartx.image"),
    $renotify: dartx.renotify = Symbol("dartx.renotify"),
    $requireInteraction: dartx.requireInteraction = Symbol("dartx.requireInteraction"),
    $silent: dartx.silent = Symbol("dartx.silent"),
    $tag: dartx.tag = Symbol("dartx.tag"),
    $vibrate: dartx.vibrate = Symbol("dartx.vibrate"),
    $onShow: dartx.onShow = Symbol("dartx.onShow"),
    $notification: dartx.notification = Symbol("dartx.notification"),
    $reply: dartx.reply = Symbol("dartx.reply"),
    $convertToBlob: dartx.convertToBlob = Symbol("dartx.convertToBlob"),
    $transferToImageBitmap: dartx.transferToImageBitmap = Symbol("dartx.transferToImageBitmap"),
    $commit: dartx.commit = Symbol("dartx.commit"),
    $defaultSelected: dartx.defaultSelected = Symbol("dartx.defaultSelected"),
    $constraint: dartx.constraint = Symbol("dartx.constraint"),
    $persisted: dartx.persisted = Symbol("dartx.persisted"),
    $devicePixelRatio: dartx.devicePixelRatio = Symbol("dartx.devicePixelRatio"),
    $registerPaint: dartx.registerPaint = Symbol("dartx.registerPaint"),
    $additionalData: dartx.additionalData = Symbol("dartx.additionalData"),
    $idName: dartx.idName = Symbol("dartx.idName"),
    $passwordName: dartx.passwordName = Symbol("dartx.passwordName"),
    $addPath: dartx.addPath = Symbol("dartx.addPath"),
    $addressLine: dartx.addressLine = Symbol("dartx.addressLine"),
    $city: dartx.city = Symbol("dartx.city"),
    $country: dartx.country = Symbol("dartx.country"),
    $dependentLocality: dartx.dependentLocality = Symbol("dartx.dependentLocality"),
    $languageCode: dartx.languageCode = Symbol("dartx.languageCode"),
    $organization: dartx.organization = Symbol("dartx.organization"),
    $phone: dartx.phone = Symbol("dartx.phone"),
    $postalCode: dartx.postalCode = Symbol("dartx.postalCode"),
    $recipient: dartx.recipient = Symbol("dartx.recipient"),
    $sortingCode: dartx.sortingCode = Symbol("dartx.sortingCode"),
    $instruments: dartx.instruments = Symbol("dartx.instruments"),
    $userHint: dartx.userHint = Symbol("dartx.userHint"),
    $shippingAddress: dartx.shippingAddress = Symbol("dartx.shippingAddress"),
    $shippingOption: dartx.shippingOption = Symbol("dartx.shippingOption"),
    $shippingType: dartx.shippingType = Symbol("dartx.shippingType"),
    $canMakePayment: dartx.canMakePayment = Symbol("dartx.canMakePayment"),
    $instrumentKey: dartx.instrumentKey = Symbol("dartx.instrumentKey"),
    $paymentRequestId: dartx.paymentRequestId = Symbol("dartx.paymentRequestId"),
    $total: dartx.total = Symbol("dartx.total"),
    $updateWith: dartx.updateWith = Symbol("dartx.updateWith"),
    $methodName: dartx.methodName = Symbol("dartx.methodName"),
    $payerEmail: dartx.payerEmail = Symbol("dartx.payerEmail"),
    $payerName: dartx.payerName = Symbol("dartx.payerName"),
    $payerPhone: dartx.payerPhone = Symbol("dartx.payerPhone"),
    $requestId: dartx.requestId = Symbol("dartx.requestId"),
    $memory: dartx.memory = Symbol("dartx.memory"),
    $navigation: dartx.navigation = Symbol("dartx.navigation"),
    $timeOrigin: dartx.timeOrigin = Symbol("dartx.timeOrigin"),
    $clearMarks: dartx.clearMarks = Symbol("dartx.clearMarks"),
    $clearMeasures: dartx.clearMeasures = Symbol("dartx.clearMeasures"),
    $clearResourceTimings: dartx.clearResourceTimings = Symbol("dartx.clearResourceTimings"),
    $getEntries: dartx.getEntries = Symbol("dartx.getEntries"),
    $getEntriesByName: dartx.getEntriesByName = Symbol("dartx.getEntriesByName"),
    $getEntriesByType: dartx.getEntriesByType = Symbol("dartx.getEntriesByType"),
    $mark: dartx.mark = Symbol("dartx.mark"),
    $measure: dartx.measure = Symbol("dartx.measure"),
    $now: dartx.now = Symbol("dartx.now"),
    $setResourceTimingBufferSize: dartx.setResourceTimingBufferSize = Symbol("dartx.setResourceTimingBufferSize"),
    $entryType: dartx.entryType = Symbol("dartx.entryType"),
    $attribution: dartx.attribution = Symbol("dartx.attribution"),
    $redirectCount: dartx.redirectCount = Symbol("dartx.redirectCount"),
    $domComplete: dartx.domComplete = Symbol("dartx.domComplete"),
    $domContentLoadedEventEnd: dartx.domContentLoadedEventEnd = Symbol("dartx.domContentLoadedEventEnd"),
    $domContentLoadedEventStart: dartx.domContentLoadedEventStart = Symbol("dartx.domContentLoadedEventStart"),
    $domInteractive: dartx.domInteractive = Symbol("dartx.domInteractive"),
    $loadEventEnd: dartx.loadEventEnd = Symbol("dartx.loadEventEnd"),
    $loadEventStart: dartx.loadEventStart = Symbol("dartx.loadEventStart"),
    $unloadEventEnd: dartx.unloadEventEnd = Symbol("dartx.unloadEventEnd"),
    $unloadEventStart: dartx.unloadEventStart = Symbol("dartx.unloadEventStart"),
    $connectEnd: dartx.connectEnd = Symbol("dartx.connectEnd"),
    $connectStart: dartx.connectStart = Symbol("dartx.connectStart"),
    $decodedBodySize: dartx.decodedBodySize = Symbol("dartx.decodedBodySize"),
    $domainLookupEnd: dartx.domainLookupEnd = Symbol("dartx.domainLookupEnd"),
    $domainLookupStart: dartx.domainLookupStart = Symbol("dartx.domainLookupStart"),
    $encodedBodySize: dartx.encodedBodySize = Symbol("dartx.encodedBodySize"),
    $fetchStart: dartx.fetchStart = Symbol("dartx.fetchStart"),
    $initiatorType: dartx.initiatorType = Symbol("dartx.initiatorType"),
    $nextHopProtocol: dartx.nextHopProtocol = Symbol("dartx.nextHopProtocol"),
    $redirectEnd: dartx.redirectEnd = Symbol("dartx.redirectEnd"),
    $redirectStart: dartx.redirectStart = Symbol("dartx.redirectStart"),
    $requestStart: dartx.requestStart = Symbol("dartx.requestStart"),
    $responseEnd: dartx.responseEnd = Symbol("dartx.responseEnd"),
    $responseStart: dartx.responseStart = Symbol("dartx.responseStart"),
    $secureConnectionStart: dartx.secureConnectionStart = Symbol("dartx.secureConnectionStart"),
    $serverTiming: dartx.serverTiming = Symbol("dartx.serverTiming"),
    $transferSize: dartx.transferSize = Symbol("dartx.transferSize"),
    $workerStart: dartx.workerStart = Symbol("dartx.workerStart"),
    $domLoading: dartx.domLoading = Symbol("dartx.domLoading"),
    $navigationStart: dartx.navigationStart = Symbol("dartx.navigationStart"),
    $query: dartx.query = Symbol("dartx.query"),
    $requestAll: dartx.requestAll = Symbol("dartx.requestAll"),
    $revoke: dartx.revoke = Symbol("dartx.revoke"),
    $fillLightMode: dartx.fillLightMode = Symbol("dartx.fillLightMode"),
    $imageHeight: dartx.imageHeight = Symbol("dartx.imageHeight"),
    $imageWidth: dartx.imageWidth = Symbol("dartx.imageWidth"),
    $redEyeReduction: dartx.redEyeReduction = Symbol("dartx.redEyeReduction"),
    $refresh: dartx.refresh = Symbol("dartx.refresh"),
    $isPrimary: dartx.isPrimary = Symbol("dartx.isPrimary"),
    $pointerId: dartx.pointerId = Symbol("dartx.pointerId"),
    $pointerType: dartx.pointerType = Symbol("dartx.pointerType"),
    $pressure: dartx.pressure = Symbol("dartx.pressure"),
    $tangentialPressure: dartx.tangentialPressure = Symbol("dartx.tangentialPressure"),
    $tiltX: dartx.tiltX = Symbol("dartx.tiltX"),
    $tiltY: dartx.tiltY = Symbol("dartx.tiltY"),
    $twist: dartx.twist = Symbol("dartx.twist"),
    $getCoalescedEvents: dartx.getCoalescedEvents = Symbol("dartx.getCoalescedEvents"),
    $defaultRequest: dartx.defaultRequest = Symbol("dartx.defaultRequest"),
    $receiver: dartx.receiver = Symbol("dartx.receiver"),
    $binaryType: dartx.binaryType = Symbol("dartx.binaryType"),
    $terminate: dartx.terminate = Symbol("dartx.terminate"),
    $connections: dartx.connections = Symbol("dartx.connections"),
    $connectionList: dartx.connectionList = Symbol("dartx.connectionList"),
    $getAvailability: dartx.getAvailability = Symbol("dartx.getAvailability"),
    $reconnect: dartx.reconnect = Symbol("dartx.reconnect"),
    $lengthComputable: dartx.lengthComputable = Symbol("dartx.lengthComputable"),
    $promise: dartx.promise = Symbol("dartx.promise"),
    $rawId: dartx.rawId = Symbol("dartx.rawId"),
    $getSubscription: dartx.getSubscription = Symbol("dartx.getSubscription"),
    $permissionState: dartx.permissionState = Symbol("dartx.permissionState"),
    $subscribe: dartx.subscribe = Symbol("dartx.subscribe"),
    $endpoint: dartx.endpoint = Symbol("dartx.endpoint"),
    $expirationTime: dartx.expirationTime = Symbol("dartx.expirationTime"),
    $unsubscribe: dartx.unsubscribe = Symbol("dartx.unsubscribe"),
    $applicationServerKey: dartx.applicationServerKey = Symbol("dartx.applicationServerKey"),
    $userVisibleOnly: dartx.userVisibleOnly = Symbol("dartx.userVisibleOnly"),
    $collapsed: dartx.collapsed = Symbol("dartx.collapsed"),
    $commonAncestorContainer: dartx.commonAncestorContainer = Symbol("dartx.commonAncestorContainer"),
    $endContainer: dartx.endContainer = Symbol("dartx.endContainer"),
    $endOffset: dartx.endOffset = Symbol("dartx.endOffset"),
    $startContainer: dartx.startContainer = Symbol("dartx.startContainer"),
    $startOffset: dartx.startOffset = Symbol("dartx.startOffset"),
    $cloneContents: dartx.cloneContents = Symbol("dartx.cloneContents"),
    $cloneRange: dartx.cloneRange = Symbol("dartx.cloneRange"),
    $collapse: dartx.collapse = Symbol("dartx.collapse"),
    $compareBoundaryPoints: dartx.compareBoundaryPoints = Symbol("dartx.compareBoundaryPoints"),
    $comparePoint: dartx.comparePoint = Symbol("dartx.comparePoint"),
    $createContextualFragment: dartx.createContextualFragment = Symbol("dartx.createContextualFragment"),
    $deleteContents: dartx.deleteContents = Symbol("dartx.deleteContents"),
    $extractContents: dartx.extractContents = Symbol("dartx.extractContents"),
    $insertNode: dartx.insertNode = Symbol("dartx.insertNode"),
    $isPointInRange: dartx.isPointInRange = Symbol("dartx.isPointInRange"),
    $selectNode: dartx.selectNode = Symbol("dartx.selectNode"),
    $selectNodeContents: dartx.selectNodeContents = Symbol("dartx.selectNodeContents"),
    $setEnd: dartx.setEnd = Symbol("dartx.setEnd"),
    $setEndAfter: dartx.setEndAfter = Symbol("dartx.setEndAfter"),
    $setEndBefore: dartx.setEndBefore = Symbol("dartx.setEndBefore"),
    $setStart: dartx.setStart = Symbol("dartx.setStart"),
    $setStartAfter: dartx.setStartAfter = Symbol("dartx.setStartAfter"),
    $setStartBefore: dartx.setStartBefore = Symbol("dartx.setStartBefore"),
    $surroundContents: dartx.surroundContents = Symbol("dartx.surroundContents"),
    $cancelWatchAvailability: dartx.cancelWatchAvailability = Symbol("dartx.cancelWatchAvailability"),
    $watchAvailability: dartx.watchAvailability = Symbol("dartx.watchAvailability"),
    $contentRect: dartx.contentRect = Symbol("dartx.contentRect"),
    $expires: dartx.expires = Symbol("dartx.expires"),
    $getFingerprints: dartx.getFingerprints = Symbol("dartx.getFingerprints"),
    $bufferedAmount: dartx.bufferedAmount = Symbol("dartx.bufferedAmount"),
    $bufferedAmountLowThreshold: dartx.bufferedAmountLowThreshold = Symbol("dartx.bufferedAmountLowThreshold"),
    $maxRetransmitTime: dartx.maxRetransmitTime = Symbol("dartx.maxRetransmitTime"),
    $maxRetransmits: dartx.maxRetransmits = Symbol("dartx.maxRetransmits"),
    $negotiated: dartx.negotiated = Symbol("dartx.negotiated"),
    $ordered: dartx.ordered = Symbol("dartx.ordered"),
    $reliable: dartx.reliable = Symbol("dartx.reliable"),
    $sendBlob: dartx.sendBlob = Symbol("dartx.sendBlob"),
    $sendByteBuffer: dartx.sendByteBuffer = Symbol("dartx.sendByteBuffer"),
    $sendString: dartx.sendString = Symbol("dartx.sendString"),
    $sendTypedData: dartx.sendTypedData = Symbol("dartx.sendTypedData"),
    $channel: dartx.channel = Symbol("dartx.channel"),
    $canInsertDtmf: dartx.canInsertDtmf = Symbol("dartx.canInsertDtmf"),
    $interToneGap: dartx.interToneGap = Symbol("dartx.interToneGap"),
    $toneBuffer: dartx.toneBuffer = Symbol("dartx.toneBuffer"),
    $insertDtmf: dartx.insertDtmf = Symbol("dartx.insertDtmf"),
    $onToneChange: dartx.onToneChange = Symbol("dartx.onToneChange"),
    $tone: dartx.tone = Symbol("dartx.tone"),
    $candidate: dartx.candidate = Symbol("dartx.candidate"),
    $sdpMLineIndex: dartx.sdpMLineIndex = Symbol("dartx.sdpMLineIndex"),
    $sdpMid: dartx.sdpMid = Symbol("dartx.sdpMid"),
    _get_timestamp: dart.privateName(html$, "_get_timestamp"),
    $names: dartx.names = Symbol("dartx.names"),
    $stat: dartx.stat = Symbol("dartx.stat"),
    _getStats: dart.privateName(html$, "_getStats"),
    $getLegacyStats: dartx.getLegacyStats = Symbol("dartx.getLegacyStats"),
    $iceConnectionState: dartx.iceConnectionState = Symbol("dartx.iceConnectionState"),
    $iceGatheringState: dartx.iceGatheringState = Symbol("dartx.iceGatheringState"),
    $localDescription: dartx.localDescription = Symbol("dartx.localDescription"),
    $remoteDescription: dartx.remoteDescription = Symbol("dartx.remoteDescription"),
    $signalingState: dartx.signalingState = Symbol("dartx.signalingState"),
    $addIceCandidate: dartx.addIceCandidate = Symbol("dartx.addIceCandidate"),
    _addStream_1: dart.privateName(html$, "_addStream_1"),
    _addStream_2: dart.privateName(html$, "_addStream_2"),
    $addStream: dartx.addStream = Symbol("dartx.addStream"),
    $createAnswer: dartx.createAnswer = Symbol("dartx.createAnswer"),
    $createDtmfSender: dartx.createDtmfSender = Symbol("dartx.createDtmfSender"),
    _createDataChannel_1: dart.privateName(html$, "_createDataChannel_1"),
    _createDataChannel_2: dart.privateName(html$, "_createDataChannel_2"),
    $createDataChannel: dartx.createDataChannel = Symbol("dartx.createDataChannel"),
    $createOffer: dartx.createOffer = Symbol("dartx.createOffer"),
    $getLocalStreams: dartx.getLocalStreams = Symbol("dartx.getLocalStreams"),
    $getReceivers: dartx.getReceivers = Symbol("dartx.getReceivers"),
    $getRemoteStreams: dartx.getRemoteStreams = Symbol("dartx.getRemoteStreams"),
    $getSenders: dartx.getSenders = Symbol("dartx.getSenders"),
    $getStats: dartx.getStats = Symbol("dartx.getStats"),
    $removeStream: dartx.removeStream = Symbol("dartx.removeStream"),
    _setConfiguration_1: dart.privateName(html$, "_setConfiguration_1"),
    $setConfiguration: dartx.setConfiguration = Symbol("dartx.setConfiguration"),
    $setLocalDescription: dartx.setLocalDescription = Symbol("dartx.setLocalDescription"),
    $setRemoteDescription: dartx.setRemoteDescription = Symbol("dartx.setRemoteDescription"),
    $onAddStream: dartx.onAddStream = Symbol("dartx.onAddStream"),
    $onDataChannel: dartx.onDataChannel = Symbol("dartx.onDataChannel"),
    $onIceCandidate: dartx.onIceCandidate = Symbol("dartx.onIceCandidate"),
    $onIceConnectionStateChange: dartx.onIceConnectionStateChange = Symbol("dartx.onIceConnectionStateChange"),
    $onNegotiationNeeded: dartx.onNegotiationNeeded = Symbol("dartx.onNegotiationNeeded"),
    $onRemoveStream: dartx.onRemoveStream = Symbol("dartx.onRemoveStream"),
    $onSignalingStateChange: dartx.onSignalingStateChange = Symbol("dartx.onSignalingStateChange"),
    $onTrack: dartx.onTrack = Symbol("dartx.onTrack"),
    $getContributingSources: dartx.getContributingSources = Symbol("dartx.getContributingSources"),
    $sdp: dartx.sdp = Symbol("dartx.sdp"),
    $streams: dartx.streams = Symbol("dartx.streams"),
    _availLeft: dart.privateName(html$, "_availLeft"),
    _availTop: dart.privateName(html$, "_availTop"),
    _availWidth: dart.privateName(html$, "_availWidth"),
    _availHeight: dart.privateName(html$, "_availHeight"),
    $available: dartx.available = Symbol("dartx.available"),
    $colorDepth: dartx.colorDepth = Symbol("dartx.colorDepth"),
    $keepAwake: dartx.keepAwake = Symbol("dartx.keepAwake"),
    $pixelDepth: dartx.pixelDepth = Symbol("dartx.pixelDepth"),
    $lock: dartx.lock = Symbol("dartx.lock"),
    $unlock: dartx.unlock = Symbol("dartx.unlock"),
    $charset: dartx.charset = Symbol("dartx.charset"),
    $defer: dartx.defer = Symbol("dartx.defer"),
    $noModule: dartx.noModule = Symbol("dartx.noModule"),
    $deltaGranularity: dartx.deltaGranularity = Symbol("dartx.deltaGranularity"),
    $deltaX: dartx.deltaX = Symbol("dartx.deltaX"),
    $deltaY: dartx.deltaY = Symbol("dartx.deltaY"),
    $fromUserInput: dartx.fromUserInput = Symbol("dartx.fromUserInput"),
    $inInertialPhase: dartx.inInertialPhase = Symbol("dartx.inInertialPhase"),
    $isBeginning: dartx.isBeginning = Symbol("dartx.isBeginning"),
    $isDirectManipulation: dartx.isDirectManipulation = Symbol("dartx.isDirectManipulation"),
    $isEnding: dartx.isEnding = Symbol("dartx.isEnding"),
    $positionX: dartx.positionX = Symbol("dartx.positionX"),
    $positionY: dartx.positionY = Symbol("dartx.positionY"),
    $velocityX: dartx.velocityX = Symbol("dartx.velocityX"),
    $velocityY: dartx.velocityY = Symbol("dartx.velocityY"),
    $consumeDelta: dartx.consumeDelta = Symbol("dartx.consumeDelta"),
    $distributeToScrollChainDescendant: dartx.distributeToScrollChainDescendant = Symbol("dartx.distributeToScrollChainDescendant"),
    $scrollSource: dartx.scrollSource = Symbol("dartx.scrollSource"),
    $timeRange: dartx.timeRange = Symbol("dartx.timeRange"),
    $blockedUri: dartx.blockedUri = Symbol("dartx.blockedUri"),
    $columnNumber: dartx.columnNumber = Symbol("dartx.columnNumber"),
    $disposition: dartx.disposition = Symbol("dartx.disposition"),
    $documentUri: dartx.documentUri = Symbol("dartx.documentUri"),
    $effectiveDirective: dartx.effectiveDirective = Symbol("dartx.effectiveDirective"),
    $originalPolicy: dartx.originalPolicy = Symbol("dartx.originalPolicy"),
    $sample: dartx.sample = Symbol("dartx.sample"),
    $statusCode: dartx.statusCode = Symbol("dartx.statusCode"),
    $violatedDirective: dartx.violatedDirective = Symbol("dartx.violatedDirective"),
    $selectedIndex: dartx.selectedIndex = Symbol("dartx.selectedIndex"),
    $selectedOptions: dartx.selectedOptions = Symbol("dartx.selectedOptions"),
    $anchorNode: dartx.anchorNode = Symbol("dartx.anchorNode"),
    $anchorOffset: dartx.anchorOffset = Symbol("dartx.anchorOffset"),
    $baseNode: dartx.baseNode = Symbol("dartx.baseNode"),
    $baseOffset: dartx.baseOffset = Symbol("dartx.baseOffset"),
    $extentNode: dartx.extentNode = Symbol("dartx.extentNode"),
    $extentOffset: dartx.extentOffset = Symbol("dartx.extentOffset"),
    $focusNode: dartx.focusNode = Symbol("dartx.focusNode"),
    $focusOffset: dartx.focusOffset = Symbol("dartx.focusOffset"),
    $isCollapsed: dartx.isCollapsed = Symbol("dartx.isCollapsed"),
    $rangeCount: dartx.rangeCount = Symbol("dartx.rangeCount"),
    $addRange: dartx.addRange = Symbol("dartx.addRange"),
    $collapseToEnd: dartx.collapseToEnd = Symbol("dartx.collapseToEnd"),
    $collapseToStart: dartx.collapseToStart = Symbol("dartx.collapseToStart"),
    $containsNode: dartx.containsNode = Symbol("dartx.containsNode"),
    $deleteFromDocument: dartx.deleteFromDocument = Symbol("dartx.deleteFromDocument"),
    $empty: dartx.empty = Symbol("dartx.empty"),
    $extend: dartx.extend = Symbol("dartx.extend"),
    $getRangeAt: dartx.getRangeAt = Symbol("dartx.getRangeAt"),
    $modify: dartx.modify = Symbol("dartx.modify"),
    $removeAllRanges: dartx.removeAllRanges = Symbol("dartx.removeAllRanges"),
    $selectAllChildren: dartx.selectAllChildren = Symbol("dartx.selectAllChildren"),
    $setBaseAndExtent: dartx.setBaseAndExtent = Symbol("dartx.setBaseAndExtent"),
    $setPosition: dartx.setPosition = Symbol("dartx.setPosition"),
    $scriptUrl: dartx.scriptUrl = Symbol("dartx.scriptUrl"),
    $controller: dartx.controller = Symbol("dartx.controller"),
    $getRegistration: dartx.getRegistration = Symbol("dartx.getRegistration"),
    $getRegistrations: dartx.getRegistrations = Symbol("dartx.getRegistrations"),
    $clients: dartx.clients = Symbol("dartx.clients"),
    $registration: dartx.registration = Symbol("dartx.registration"),
    $skipWaiting: dartx.skipWaiting = Symbol("dartx.skipWaiting"),
    $onActivate: dartx.onActivate = Symbol("dartx.onActivate"),
    $onFetch: dartx.onFetch = Symbol("dartx.onFetch"),
    $onForeignfetch: dartx.onForeignfetch = Symbol("dartx.onForeignfetch"),
    $onInstall: dartx.onInstall = Symbol("dartx.onInstall"),
    $backgroundFetch: dartx.backgroundFetch = Symbol("dartx.backgroundFetch"),
    $installing: dartx.installing = Symbol("dartx.installing"),
    $navigationPreload: dartx.navigationPreload = Symbol("dartx.navigationPreload"),
    $paymentManager: dartx.paymentManager = Symbol("dartx.paymentManager"),
    $pushManager: dartx.pushManager = Symbol("dartx.pushManager"),
    $sync: dartx.sync = Symbol("dartx.sync"),
    $waiting: dartx.waiting = Symbol("dartx.waiting"),
    $getNotifications: dartx.getNotifications = Symbol("dartx.getNotifications"),
    $showNotification: dartx.showNotification = Symbol("dartx.showNotification"),
    $unregister: dartx.unregister = Symbol("dartx.unregister"),
    $delegatesFocus: dartx.delegatesFocus = Symbol("dartx.delegatesFocus"),
    $olderShadowRoot: dartx.olderShadowRoot = Symbol("dartx.olderShadowRoot"),
    $console: dartx.console = Symbol("dartx.console"),
    $resetStyleInheritance: dartx.resetStyleInheritance = Symbol("dartx.resetStyleInheritance"),
    $applyAuthorStyles: dartx.applyAuthorStyles = Symbol("dartx.applyAuthorStyles"),
    $byteLength: dartx.byteLength = Symbol("dartx.byteLength"),
    $onConnect: dartx.onConnect = Symbol("dartx.onConnect"),
    _assignedNodes_1: dart.privateName(html$, "_assignedNodes_1"),
    _assignedNodes_2: dart.privateName(html$, "_assignedNodes_2"),
    $assignedNodes: dartx.assignedNodes = Symbol("dartx.assignedNodes"),
    $appendWindowEnd: dartx.appendWindowEnd = Symbol("dartx.appendWindowEnd"),
    $appendWindowStart: dartx.appendWindowStart = Symbol("dartx.appendWindowStart"),
    $timestampOffset: dartx.timestampOffset = Symbol("dartx.timestampOffset"),
    $trackDefaults: dartx.trackDefaults = Symbol("dartx.trackDefaults"),
    $updating: dartx.updating = Symbol("dartx.updating"),
    $appendBuffer: dartx.appendBuffer = Symbol("dartx.appendBuffer"),
    $appendTypedData: dartx.appendTypedData = Symbol("dartx.appendTypedData"),
    $addFromString: dartx.addFromString = Symbol("dartx.addFromString"),
    $addFromUri: dartx.addFromUri = Symbol("dartx.addFromUri"),
    $audioTrack: dartx.audioTrack = Symbol("dartx.audioTrack"),
    $continuous: dartx.continuous = Symbol("dartx.continuous"),
    $grammars: dartx.grammars = Symbol("dartx.grammars"),
    $interimResults: dartx.interimResults = Symbol("dartx.interimResults"),
    $maxAlternatives: dartx.maxAlternatives = Symbol("dartx.maxAlternatives"),
    $onAudioEnd: dartx.onAudioEnd = Symbol("dartx.onAudioEnd"),
    $onAudioStart: dartx.onAudioStart = Symbol("dartx.onAudioStart"),
    $onEnd: dartx.onEnd = Symbol("dartx.onEnd"),
    $onNoMatch: dartx.onNoMatch = Symbol("dartx.onNoMatch"),
    $onResult: dartx.onResult = Symbol("dartx.onResult"),
    $onSoundEnd: dartx.onSoundEnd = Symbol("dartx.onSoundEnd"),
    $onSoundStart: dartx.onSoundStart = Symbol("dartx.onSoundStart"),
    $onSpeechEnd: dartx.onSpeechEnd = Symbol("dartx.onSpeechEnd"),
    $onSpeechStart: dartx.onSpeechStart = Symbol("dartx.onSpeechStart"),
    $onStart: dartx.onStart = Symbol("dartx.onStart"),
    $confidence: dartx.confidence = Symbol("dartx.confidence"),
    $transcript: dartx.transcript = Symbol("dartx.transcript"),
    $emma: dartx.emma = Symbol("dartx.emma"),
    $interpretation: dartx.interpretation = Symbol("dartx.interpretation"),
    $resultIndex: dartx.resultIndex = Symbol("dartx.resultIndex"),
    $results: dartx.results = Symbol("dartx.results"),
    $isFinal: dartx.isFinal = Symbol("dartx.isFinal"),
    _getVoices: dart.privateName(html$, "_getVoices"),
    $getVoices: dartx.getVoices = Symbol("dartx.getVoices"),
    $pending: dartx.pending = Symbol("dartx.pending"),
    $speaking: dartx.speaking = Symbol("dartx.speaking"),
    $charIndex: dartx.charIndex = Symbol("dartx.charIndex"),
    $utterance: dartx.utterance = Symbol("dartx.utterance"),
    $pitch: dartx.pitch = Symbol("dartx.pitch"),
    $rate: dartx.rate = Symbol("dartx.rate"),
    $voice: dartx.voice = Symbol("dartx.voice"),
    $onBoundary: dartx.onBoundary = Symbol("dartx.onBoundary"),
    $onMark: dartx.onMark = Symbol("dartx.onMark"),
    $onResume: dartx.onResume = Symbol("dartx.onResume"),
    $localService: dartx.localService = Symbol("dartx.localService"),
    $voiceUri: dartx.voiceUri = Symbol("dartx.voiceUri"),
    _setItem: dart.privateName(html$, "_setItem"),
    _removeItem: dart.privateName(html$, "_removeItem"),
    _key: dart.privateName(html$, "_key"),
    _length$3: dart.privateName(html$, "_length"),
    _initStorageEvent: dart.privateName(html$, "_initStorageEvent"),
    $storageArea: dartx.storageArea = Symbol("dartx.storageArea"),
    $estimate: dartx.estimate = Symbol("dartx.estimate"),
    $persist: dartx.persist = Symbol("dartx.persist"),
    $matchMedium: dartx.matchMedium = Symbol("dartx.matchMedium"),
    $getProperties: dartx.getProperties = Symbol("dartx.getProperties"),
    $lastChance: dartx.lastChance = Symbol("dartx.lastChance"),
    $getTags: dartx.getTags = Symbol("dartx.getTags"),
    $cellIndex: dartx.cellIndex = Symbol("dartx.cellIndex"),
    $headers: dartx.headers = Symbol("dartx.headers"),
    $span: dartx.span = Symbol("dartx.span"),
    _tBodies: dart.privateName(html$, "_tBodies"),
    $tBodies: dartx.tBodies = Symbol("dartx.tBodies"),
    _rows: dart.privateName(html$, "_rows"),
    $rows: dartx.rows = Symbol("dartx.rows"),
    $insertRow: dartx.insertRow = Symbol("dartx.insertRow"),
    $addRow: dartx.addRow = Symbol("dartx.addRow"),
    _createCaption: dart.privateName(html$, "_createCaption"),
    $createCaption: dartx.createCaption = Symbol("dartx.createCaption"),
    _createTBody: dart.privateName(html$, "_createTBody"),
    $createTBody: dartx.createTBody = Symbol("dartx.createTBody"),
    _createTFoot: dart.privateName(html$, "_createTFoot"),
    $createTFoot: dartx.createTFoot = Symbol("dartx.createTFoot"),
    _createTHead: dart.privateName(html$, "_createTHead"),
    $createTHead: dartx.createTHead = Symbol("dartx.createTHead"),
    _insertRow: dart.privateName(html$, "_insertRow"),
    _nativeCreateTBody: dart.privateName(html$, "_nativeCreateTBody"),
    $caption: dartx.caption = Symbol("dartx.caption"),
    $tFoot: dartx.tFoot = Symbol("dartx.tFoot"),
    $tHead: dartx.tHead = Symbol("dartx.tHead"),
    $deleteCaption: dartx.deleteCaption = Symbol("dartx.deleteCaption"),
    $deleteRow: dartx.deleteRow = Symbol("dartx.deleteRow"),
    $deleteTFoot: dartx.deleteTFoot = Symbol("dartx.deleteTFoot"),
    $deleteTHead: dartx.deleteTHead = Symbol("dartx.deleteTHead"),
    _cells: dart.privateName(html$, "_cells"),
    $cells: dartx.cells = Symbol("dartx.cells"),
    $insertCell: dartx.insertCell = Symbol("dartx.insertCell"),
    $addCell: dartx.addCell = Symbol("dartx.addCell"),
    _insertCell: dart.privateName(html$, "_insertCell"),
    $sectionRowIndex: dartx.sectionRowIndex = Symbol("dartx.sectionRowIndex"),
    $deleteCell: dartx.deleteCell = Symbol("dartx.deleteCell"),
    $containerId: dartx.containerId = Symbol("dartx.containerId"),
    $containerName: dartx.containerName = Symbol("dartx.containerName"),
    $containerSrc: dartx.containerSrc = Symbol("dartx.containerSrc"),
    $containerType: dartx.containerType = Symbol("dartx.containerType"),
    $cols: dartx.cols = Symbol("dartx.cols"),
    $textLength: dartx.textLength = Symbol("dartx.textLength"),
    $wrap: dartx.wrap = Symbol("dartx.wrap"),
    _initTextEvent: dart.privateName(html$, "_initTextEvent"),
    $actualBoundingBoxAscent: dartx.actualBoundingBoxAscent = Symbol("dartx.actualBoundingBoxAscent"),
    $actualBoundingBoxDescent: dartx.actualBoundingBoxDescent = Symbol("dartx.actualBoundingBoxDescent"),
    $actualBoundingBoxLeft: dartx.actualBoundingBoxLeft = Symbol("dartx.actualBoundingBoxLeft"),
    $actualBoundingBoxRight: dartx.actualBoundingBoxRight = Symbol("dartx.actualBoundingBoxRight"),
    $alphabeticBaseline: dartx.alphabeticBaseline = Symbol("dartx.alphabeticBaseline"),
    $emHeightAscent: dartx.emHeightAscent = Symbol("dartx.emHeightAscent"),
    $emHeightDescent: dartx.emHeightDescent = Symbol("dartx.emHeightDescent"),
    $fontBoundingBoxAscent: dartx.fontBoundingBoxAscent = Symbol("dartx.fontBoundingBoxAscent"),
    $fontBoundingBoxDescent: dartx.fontBoundingBoxDescent = Symbol("dartx.fontBoundingBoxDescent"),
    $hangingBaseline: dartx.hangingBaseline = Symbol("dartx.hangingBaseline"),
    $ideographicBaseline: dartx.ideographicBaseline = Symbol("dartx.ideographicBaseline"),
    $activeCues: dartx.activeCues = Symbol("dartx.activeCues"),
    $cues: dartx.cues = Symbol("dartx.cues"),
    $addCue: dartx.addCue = Symbol("dartx.addCue"),
    $removeCue: dartx.removeCue = Symbol("dartx.removeCue"),
    $onCueChange: dartx.onCueChange = Symbol("dartx.onCueChange"),
    $endTime: dartx.endTime = Symbol("dartx.endTime"),
    $pauseOnExit: dartx.pauseOnExit = Symbol("dartx.pauseOnExit"),
    $onEnter: dartx.onEnter = Symbol("dartx.onEnter"),
    $onExit: dartx.onExit = Symbol("dartx.onExit"),
    $getCueById: dartx.getCueById = Symbol("dartx.getCueById"),
    $end: dartx.end = Symbol("dartx.end"),
    $force: dartx.force = Symbol("dartx.force"),
    $identifier: dartx.identifier = Symbol("dartx.identifier"),
    _radiusX: dart.privateName(html$, "_radiusX"),
    _radiusY: dart.privateName(html$, "_radiusY"),
    $rotationAngle: dartx.rotationAngle = Symbol("dartx.rotationAngle"),
    __clientX: dart.privateName(html$, "__clientX"),
    __clientY: dart.privateName(html$, "__clientY"),
    __screenX: dart.privateName(html$, "__screenX"),
    __screenY: dart.privateName(html$, "__screenY"),
    __pageX: dart.privateName(html$, "__pageX"),
    __pageY: dart.privateName(html$, "__pageY"),
    __radiusX: dart.privateName(html$, "__radiusX"),
    __radiusY: dart.privateName(html$, "__radiusY"),
    $radiusX: dartx.radiusX = Symbol("dartx.radiusX"),
    $radiusY: dartx.radiusY = Symbol("dartx.radiusY"),
    $changedTouches: dartx.changedTouches = Symbol("dartx.changedTouches"),
    $targetTouches: dartx.targetTouches = Symbol("dartx.targetTouches"),
    $touches: dartx.touches = Symbol("dartx.touches"),
    $byteStreamTrackID: dartx.byteStreamTrackID = Symbol("dartx.byteStreamTrackID"),
    $kinds: dartx.kinds = Symbol("dartx.kinds"),
    $srclang: dartx.srclang = Symbol("dartx.srclang"),
    $propertyName: dartx.propertyName = Symbol("dartx.propertyName")
  };
  var S$3 = {
    $pseudoElement: dartx.pseudoElement = Symbol("dartx.pseudoElement"),
    $currentNode: dartx.currentNode = Symbol("dartx.currentNode"),
    $notifyLockAcquired: dartx.notifyLockAcquired = Symbol("dartx.notifyLockAcquired"),
    $notifyLockReleased: dartx.notifyLockReleased = Symbol("dartx.notifyLockReleased"),
    $pull: dartx.pull = Symbol("dartx.pull"),
    $searchParams: dartx.searchParams = Symbol("dartx.searchParams"),
    $getDevices: dartx.getDevices = Symbol("dartx.getDevices"),
    $getTransformTo: dartx.getTransformTo = Symbol("dartx.getTransformTo"),
    $deviceName: dartx.deviceName = Symbol("dartx.deviceName"),
    $isExternal: dartx.isExternal = Symbol("dartx.isExternal"),
    $requestSession: dartx.requestSession = Symbol("dartx.requestSession"),
    $supportsSession: dartx.supportsSession = Symbol("dartx.supportsSession"),
    $device: dartx.device = Symbol("dartx.device"),
    $capabilities: dartx.capabilities = Symbol("dartx.capabilities"),
    $depthFar: dartx.depthFar = Symbol("dartx.depthFar"),
    $depthNear: dartx.depthNear = Symbol("dartx.depthNear"),
    $displayName: dartx.displayName = Symbol("dartx.displayName"),
    $isPresenting: dartx.isPresenting = Symbol("dartx.isPresenting"),
    $stageParameters: dartx.stageParameters = Symbol("dartx.stageParameters"),
    $cancelAnimationFrame: dartx.cancelAnimationFrame = Symbol("dartx.cancelAnimationFrame"),
    $exitPresent: dartx.exitPresent = Symbol("dartx.exitPresent"),
    $getEyeParameters: dartx.getEyeParameters = Symbol("dartx.getEyeParameters"),
    $getFrameData: dartx.getFrameData = Symbol("dartx.getFrameData"),
    $getLayers: dartx.getLayers = Symbol("dartx.getLayers"),
    $requestAnimationFrame: dartx.requestAnimationFrame = Symbol("dartx.requestAnimationFrame"),
    $requestPresent: dartx.requestPresent = Symbol("dartx.requestPresent"),
    $submitFrame: dartx.submitFrame = Symbol("dartx.submitFrame"),
    $canPresent: dartx.canPresent = Symbol("dartx.canPresent"),
    $hasExternalDisplay: dartx.hasExternalDisplay = Symbol("dartx.hasExternalDisplay"),
    $maxLayers: dartx.maxLayers = Symbol("dartx.maxLayers"),
    $renderHeight: dartx.renderHeight = Symbol("dartx.renderHeight"),
    $renderWidth: dartx.renderWidth = Symbol("dartx.renderWidth"),
    $leftProjectionMatrix: dartx.leftProjectionMatrix = Symbol("dartx.leftProjectionMatrix"),
    $leftViewMatrix: dartx.leftViewMatrix = Symbol("dartx.leftViewMatrix"),
    $rightProjectionMatrix: dartx.rightProjectionMatrix = Symbol("dartx.rightProjectionMatrix"),
    $rightViewMatrix: dartx.rightViewMatrix = Symbol("dartx.rightViewMatrix"),
    $bounds: dartx.bounds = Symbol("dartx.bounds"),
    $emulatedHeight: dartx.emulatedHeight = Symbol("dartx.emulatedHeight"),
    $exclusive: dartx.exclusive = Symbol("dartx.exclusive"),
    $requestFrameOfReference: dartx.requestFrameOfReference = Symbol("dartx.requestFrameOfReference"),
    $session: dartx.session = Symbol("dartx.session"),
    $geometry: dartx.geometry = Symbol("dartx.geometry"),
    $sittingToStandingTransform: dartx.sittingToStandingTransform = Symbol("dartx.sittingToStandingTransform"),
    $sizeX: dartx.sizeX = Symbol("dartx.sizeX"),
    $sizeZ: dartx.sizeZ = Symbol("dartx.sizeZ"),
    $badInput: dartx.badInput = Symbol("dartx.badInput"),
    $customError: dartx.customError = Symbol("dartx.customError"),
    $patternMismatch: dartx.patternMismatch = Symbol("dartx.patternMismatch"),
    $rangeOverflow: dartx.rangeOverflow = Symbol("dartx.rangeOverflow"),
    $rangeUnderflow: dartx.rangeUnderflow = Symbol("dartx.rangeUnderflow"),
    $stepMismatch: dartx.stepMismatch = Symbol("dartx.stepMismatch"),
    $tooLong: dartx.tooLong = Symbol("dartx.tooLong"),
    $tooShort: dartx.tooShort = Symbol("dartx.tooShort"),
    $typeMismatch: dartx.typeMismatch = Symbol("dartx.typeMismatch"),
    $valid: dartx.valid = Symbol("dartx.valid"),
    $valueMissing: dartx.valueMissing = Symbol("dartx.valueMissing"),
    $poster: dartx.poster = Symbol("dartx.poster"),
    $videoHeight: dartx.videoHeight = Symbol("dartx.videoHeight"),
    $videoWidth: dartx.videoWidth = Symbol("dartx.videoWidth"),
    $decodedFrameCount: dartx.decodedFrameCount = Symbol("dartx.decodedFrameCount"),
    $droppedFrameCount: dartx.droppedFrameCount = Symbol("dartx.droppedFrameCount"),
    $getVideoPlaybackQuality: dartx.getVideoPlaybackQuality = Symbol("dartx.getVideoPlaybackQuality"),
    $enterFullscreen: dartx.enterFullscreen = Symbol("dartx.enterFullscreen"),
    $corruptedVideoFrames: dartx.corruptedVideoFrames = Symbol("dartx.corruptedVideoFrames"),
    $creationTime: dartx.creationTime = Symbol("dartx.creationTime"),
    $droppedVideoFrames: dartx.droppedVideoFrames = Symbol("dartx.droppedVideoFrames"),
    $totalVideoFrames: dartx.totalVideoFrames = Symbol("dartx.totalVideoFrames"),
    $sourceBuffer: dartx.sourceBuffer = Symbol("dartx.sourceBuffer"),
    $pageLeft: dartx.pageLeft = Symbol("dartx.pageLeft"),
    $pageTop: dartx.pageTop = Symbol("dartx.pageTop"),
    $align: dartx.align = Symbol("dartx.align"),
    $line: dartx.line = Symbol("dartx.line"),
    $snapToLines: dartx.snapToLines = Symbol("dartx.snapToLines"),
    $vertical: dartx.vertical = Symbol("dartx.vertical"),
    $getCueAsHtml: dartx.getCueAsHtml = Symbol("dartx.getCueAsHtml"),
    $lines: dartx.lines = Symbol("dartx.lines"),
    $regionAnchorX: dartx.regionAnchorX = Symbol("dartx.regionAnchorX"),
    $regionAnchorY: dartx.regionAnchorY = Symbol("dartx.regionAnchorY"),
    $viewportAnchorX: dartx.viewportAnchorX = Symbol("dartx.viewportAnchorX"),
    $viewportAnchorY: dartx.viewportAnchorY = Symbol("dartx.viewportAnchorY"),
    $extensions: dartx.extensions = Symbol("dartx.extensions"),
    _deltaX: dart.privateName(html$, "_deltaX"),
    _deltaY: dart.privateName(html$, "_deltaY"),
    $deltaZ: dartx.deltaZ = Symbol("dartx.deltaZ"),
    $deltaMode: dartx.deltaMode = Symbol("dartx.deltaMode"),
    _wheelDelta: dart.privateName(html$, "_wheelDelta"),
    _wheelDeltaX: dart.privateName(html$, "_wheelDeltaX"),
    _hasInitMouseScrollEvent: dart.privateName(html$, "_hasInitMouseScrollEvent"),
    _initMouseScrollEvent: dart.privateName(html$, "_initMouseScrollEvent"),
    _hasInitWheelEvent: dart.privateName(html$, "_hasInitWheelEvent"),
    _initWheelEvent: dart.privateName(html$, "_initWheelEvent"),
    $animationFrame: dartx.animationFrame = Symbol("dartx.animationFrame"),
    $document: dartx.document = Symbol("dartx.document"),
    _open2: dart.privateName(html$, "_open2"),
    _open3: dart.privateName(html$, "_open3"),
    _location: dart.privateName(html$, "_location"),
    _ensureRequestAnimationFrame: dart.privateName(html$, "_ensureRequestAnimationFrame"),
    _requestAnimationFrame: dart.privateName(html$, "_requestAnimationFrame"),
    _cancelAnimationFrame: dart.privateName(html$, "_cancelAnimationFrame"),
    _requestFileSystem: dart.privateName(html$, "_requestFileSystem"),
    $requestFileSystem: dartx.requestFileSystem = Symbol("dartx.requestFileSystem"),
    $animationWorklet: dartx.animationWorklet = Symbol("dartx.animationWorklet"),
    $applicationCache: dartx.applicationCache = Symbol("dartx.applicationCache"),
    $audioWorklet: dartx.audioWorklet = Symbol("dartx.audioWorklet"),
    $cookieStore: dartx.cookieStore = Symbol("dartx.cookieStore"),
    $customElements: dartx.customElements = Symbol("dartx.customElements"),
    $defaultStatus: dartx.defaultStatus = Symbol("dartx.defaultStatus"),
    $defaultstatus: dartx.defaultstatus = Symbol("dartx.defaultstatus"),
    $external: dartx.external = Symbol("dartx.external"),
    $history: dartx.history = Symbol("dartx.history"),
    $innerHeight: dartx.innerHeight = Symbol("dartx.innerHeight"),
    $innerWidth: dartx.innerWidth = Symbol("dartx.innerWidth"),
    $localStorage: dartx.localStorage = Symbol("dartx.localStorage"),
    $locationbar: dartx.locationbar = Symbol("dartx.locationbar"),
    $menubar: dartx.menubar = Symbol("dartx.menubar"),
    $offscreenBuffering: dartx.offscreenBuffering = Symbol("dartx.offscreenBuffering"),
    _get_opener: dart.privateName(html$, "_get_opener"),
    $opener: dartx.opener = Symbol("dartx.opener"),
    $outerHeight: dartx.outerHeight = Symbol("dartx.outerHeight"),
    $outerWidth: dartx.outerWidth = Symbol("dartx.outerWidth"),
    _pageXOffset: dart.privateName(html$, "_pageXOffset"),
    _pageYOffset: dart.privateName(html$, "_pageYOffset"),
    _get_parent: dart.privateName(html$, "_get_parent"),
    $screenLeft: dartx.screenLeft = Symbol("dartx.screenLeft"),
    $screenTop: dartx.screenTop = Symbol("dartx.screenTop"),
    $screenX: dartx.screenX = Symbol("dartx.screenX"),
    $screenY: dartx.screenY = Symbol("dartx.screenY"),
    $scrollbars: dartx.scrollbars = Symbol("dartx.scrollbars"),
    _get_self: dart.privateName(html$, "_get_self"),
    $sessionStorage: dartx.sessionStorage = Symbol("dartx.sessionStorage"),
    $speechSynthesis: dartx.speechSynthesis = Symbol("dartx.speechSynthesis"),
    $statusbar: dartx.statusbar = Symbol("dartx.statusbar"),
    $styleMedia: dartx.styleMedia = Symbol("dartx.styleMedia"),
    $toolbar: dartx.toolbar = Symbol("dartx.toolbar"),
    _get_top: dart.privateName(html$, "_get_top"),
    $visualViewport: dartx.visualViewport = Symbol("dartx.visualViewport"),
    __getter___1: dart.privateName(html$, "__getter___1"),
    __getter___2: dart.privateName(html$, "__getter___2"),
    $alert: dartx.alert = Symbol("dartx.alert"),
    $cancelIdleCallback: dartx.cancelIdleCallback = Symbol("dartx.cancelIdleCallback"),
    $confirm: dartx.confirm = Symbol("dartx.confirm"),
    $find: dartx.find = Symbol("dartx.find"),
    $getComputedStyleMap: dartx.getComputedStyleMap = Symbol("dartx.getComputedStyleMap"),
    $getMatchedCssRules: dartx.getMatchedCssRules = Symbol("dartx.getMatchedCssRules"),
    $matchMedia: dartx.matchMedia = Symbol("dartx.matchMedia"),
    $moveBy: dartx.moveBy = Symbol("dartx.moveBy"),
    _openDatabase: dart.privateName(html$, "_openDatabase"),
    $print: dartx.print = Symbol("dartx.print"),
    _requestIdleCallback_1: dart.privateName(html$, "_requestIdleCallback_1"),
    _requestIdleCallback_2: dart.privateName(html$, "_requestIdleCallback_2"),
    $requestIdleCallback: dartx.requestIdleCallback = Symbol("dartx.requestIdleCallback"),
    $resizeBy: dartx.resizeBy = Symbol("dartx.resizeBy"),
    $resizeTo: dartx.resizeTo = Symbol("dartx.resizeTo"),
    _scroll_4: dart.privateName(html$, "_scroll_4"),
    _scroll_5: dart.privateName(html$, "_scroll_5"),
    _scrollBy_4: dart.privateName(html$, "_scrollBy_4"),
    _scrollBy_5: dart.privateName(html$, "_scrollBy_5"),
    _scrollTo_4: dart.privateName(html$, "_scrollTo_4"),
    _scrollTo_5: dart.privateName(html$, "_scrollTo_5"),
    __requestFileSystem: dart.privateName(html$, "__requestFileSystem"),
    _resolveLocalFileSystemUrl: dart.privateName(html$, "_resolveLocalFileSystemUrl"),
    $resolveLocalFileSystemUrl: dartx.resolveLocalFileSystemUrl = Symbol("dartx.resolveLocalFileSystemUrl"),
    $onContentLoaded: dartx.onContentLoaded = Symbol("dartx.onContentLoaded"),
    $onDeviceMotion: dartx.onDeviceMotion = Symbol("dartx.onDeviceMotion"),
    $onDeviceOrientation: dartx.onDeviceOrientation = Symbol("dartx.onDeviceOrientation"),
    $onPageHide: dartx.onPageHide = Symbol("dartx.onPageHide"),
    $onPageShow: dartx.onPageShow = Symbol("dartx.onPageShow"),
    $onAnimationEnd: dartx.onAnimationEnd = Symbol("dartx.onAnimationEnd"),
    $onAnimationIteration: dartx.onAnimationIteration = Symbol("dartx.onAnimationIteration"),
    $onAnimationStart: dartx.onAnimationStart = Symbol("dartx.onAnimationStart"),
    $onBeforeUnload: dartx.onBeforeUnload = Symbol("dartx.onBeforeUnload"),
    $openDatabase: dartx.openDatabase = Symbol("dartx.openDatabase"),
    $pageXOffset: dartx.pageXOffset = Symbol("dartx.pageXOffset"),
    $pageYOffset: dartx.pageYOffset = Symbol("dartx.pageYOffset"),
    $scrollX: dartx.scrollX = Symbol("dartx.scrollX"),
    $scrollY: dartx.scrollY = Symbol("dartx.scrollY"),
    _BeforeUnloadEventStreamProvider__eventType: dart.privateName(html$, "_BeforeUnloadEventStreamProvider._eventType"),
    _returnValue: dart.privateName(html$, "_returnValue"),
    wrapped: dart.privateName(html$, "_WrappedEvent.wrapped"),
    _eventType: dart.privateName(html$, "_BeforeUnloadEventStreamProvider._eventType"),
    _eventType$1: dart.privateName(html$, "_eventType"),
    $focused: dartx.focused = Symbol("dartx.focused"),
    $navigate: dartx.navigate = Symbol("dartx.navigate"),
    $createExpression: dartx.createExpression = Symbol("dartx.createExpression"),
    $createNSResolver: dartx.createNSResolver = Symbol("dartx.createNSResolver"),
    $evaluate: dartx.evaluate = Symbol("dartx.evaluate"),
    $lookupNamespaceUri: dartx.lookupNamespaceUri = Symbol("dartx.lookupNamespaceUri"),
    $booleanValue: dartx.booleanValue = Symbol("dartx.booleanValue"),
    $invalidIteratorState: dartx.invalidIteratorState = Symbol("dartx.invalidIteratorState"),
    $numberValue: dartx.numberValue = Symbol("dartx.numberValue"),
    $resultType: dartx.resultType = Symbol("dartx.resultType"),
    $singleNodeValue: dartx.singleNodeValue = Symbol("dartx.singleNodeValue"),
    $snapshotLength: dartx.snapshotLength = Symbol("dartx.snapshotLength"),
    $stringValue: dartx.stringValue = Symbol("dartx.stringValue"),
    $iterateNext: dartx.iterateNext = Symbol("dartx.iterateNext"),
    $snapshotItem: dartx.snapshotItem = Symbol("dartx.snapshotItem"),
    $serializeToString: dartx.serializeToString = Symbol("dartx.serializeToString"),
    $clearParameters: dartx.clearParameters = Symbol("dartx.clearParameters"),
    $getParameter: dartx.getParameter = Symbol("dartx.getParameter"),
    $importStylesheet: dartx.importStylesheet = Symbol("dartx.importStylesheet"),
    $removeParameter: dartx.removeParameter = Symbol("dartx.removeParameter"),
    $setParameter: dartx.setParameter = Symbol("dartx.setParameter"),
    $transformToDocument: dartx.transformToDocument = Symbol("dartx.transformToDocument"),
    $transformToFragment: dartx.transformToFragment = Symbol("dartx.transformToFragment"),
    $getBudget: dartx.getBudget = Symbol("dartx.getBudget"),
    $getCost: dartx.getCost = Symbol("dartx.getCost"),
    $reserve: dartx.reserve = Symbol("dartx.reserve"),
    $read: dartx.read = Symbol("dartx.read"),
    $readText: dartx.readText = Symbol("dartx.readText"),
    $writeText: dartx.writeText = Symbol("dartx.writeText"),
    $getNamedItem: dartx.getNamedItem = Symbol("dartx.getNamedItem"),
    $getNamedItemNS: dartx.getNamedItemNS = Symbol("dartx.getNamedItemNS"),
    $removeNamedItem: dartx.removeNamedItem = Symbol("dartx.removeNamedItem"),
    $removeNamedItemNS: dartx.removeNamedItemNS = Symbol("dartx.removeNamedItemNS"),
    $setNamedItem: dartx.setNamedItem = Symbol("dartx.setNamedItem"),
    $setNamedItemNS: dartx.setNamedItemNS = Symbol("dartx.setNamedItemNS"),
    $cache: dartx.cache = Symbol("dartx.cache"),
    $redirect: dartx.redirect = Symbol("dartx.redirect"),
    _matches: dart.privateName(html$, "_matches"),
    _namespace: dart.privateName(html$, "_namespace"),
    _attr: dart.privateName(html$, "_attr"),
    _strip: dart.privateName(html$, "_strip"),
    _toHyphenedName: dart.privateName(html$, "_toHyphenedName"),
    _toCamelCase: dart.privateName(html$, "_toCamelCase"),
    _addOrSubtractToBoxModel: dart.privateName(html$, "_addOrSubtractToBoxModel"),
    _elementList: dart.privateName(html$, "_elementList"),
    _sets: dart.privateName(html$, "_sets"),
    _validateToken: dart.privateName(html_common, "_validateToken"),
    _unit: dart.privateName(html$, "_unit"),
    _eventType$2: dart.privateName(html$, "EventStreamProvider._eventType"),
    _target$2: dart.privateName(html$, "_target"),
    _useCapture: dart.privateName(html$, "_useCapture"),
    _targetList: dart.privateName(html$, "_targetList"),
    _pauseCount$1: dart.privateName(html$, "_pauseCount"),
    _onData$3: dart.privateName(html$, "_onData"),
    _tryResume: dart.privateName(html$, "_tryResume"),
    _canceled: dart.privateName(html$, "_canceled"),
    _unlisten: dart.privateName(html$, "_unlisten"),
    _type$5: dart.privateName(html$, "_type"),
    _streamController: dart.privateName(html$, "_streamController"),
    _parent$2: dart.privateName(html$, "_parent"),
    _currentTarget: dart.privateName(html$, "_currentTarget"),
    _shadowAltKey: dart.privateName(html$, "_shadowAltKey"),
    _shadowCharCode: dart.privateName(html$, "_shadowCharCode"),
    _shadowKeyCode: dart.privateName(html$, "_shadowKeyCode"),
    _realAltKey: dart.privateName(html$, "_realAltKey"),
    _realCharCode: dart.privateName(html$, "_realCharCode"),
    _realKeyCode: dart.privateName(html$, "_realKeyCode"),
    _shadowKeyIdentifier: dart.privateName(html$, "_shadowKeyIdentifier"),
    _keyIdentifier: dart.privateName(html$, "_keyIdentifier"),
    _controller$2: dart.privateName(html$, "_controller"),
    _subscriptions: dart.privateName(html$, "_subscriptions"),
    _eventTypeGetter: dart.privateName(html$, "_CustomEventStreamProvider._eventTypeGetter"),
    _eventTypeGetter$1: dart.privateName(html$, "_eventTypeGetter"),
    _keyDownList: dart.privateName(html$, "_keyDownList"),
    _stream$3: dart.privateName(html$, "_stream"),
    _capsLockOn: dart.privateName(html$, "_capsLockOn"),
    _determineKeyCodeForKeypress: dart.privateName(html$, "_determineKeyCodeForKeypress"),
    _findCharCodeKeyDown: dart.privateName(html$, "_findCharCodeKeyDown"),
    _firesKeyPressEvent: dart.privateName(html$, "_firesKeyPressEvent"),
    _normalizeKeyCodes: dart.privateName(html$, "_normalizeKeyCodes"),
    _validators: dart.privateName(html$, "_validators"),
    _templateAttrs: dart.privateName(html$, "_templateAttrs"),
    _list$19: dart.privateName(html$, "_list"),
    _iterator$3: dart.privateName(html$, "_iterator"),
    _current$4: dart.privateName(html$, "_current"),
    _array: dart.privateName(html$, "_array"),
    _isConsoleDefined: dart.privateName(html$, "_isConsoleDefined"),
    _interceptor: dart.privateName(html$, "_interceptor"),
    _constructor: dart.privateName(html$, "_constructor"),
    _nativeType: dart.privateName(html$, "_nativeType"),
    _window: dart.privateName(html$, "_window"),
    _history: dart.privateName(html$, "_history"),
    _hiddenAnchor: dart.privateName(html$, "_hiddenAnchor"),
    _loc: dart.privateName(html$, "_loc"),
    _removeNode: dart.privateName(html$, "_removeNode"),
    _sanitizeElement: dart.privateName(html$, "_sanitizeElement"),
    _sanitizeUntrustedElement: dart.privateName(html$, "_sanitizeUntrustedElement"),
    alpha: dart.privateName(html_common, "ContextAttributes.alpha"),
    antialias: dart.privateName(html_common, "ContextAttributes.antialias"),
    depth: dart.privateName(html_common, "ContextAttributes.depth"),
    premultipliedAlpha: dart.privateName(html_common, "ContextAttributes.premultipliedAlpha"),
    preserveDrawingBuffer: dart.privateName(html_common, "ContextAttributes.preserveDrawingBuffer"),
    stencil: dart.privateName(html_common, "ContextAttributes.stencil"),
    failIfMajorPerformanceCaveat: dart.privateName(html_common, "ContextAttributes.failIfMajorPerformanceCaveat"),
    data$1: dart.privateName(html_common, "_TypedImageData.data"),
    height$1: dart.privateName(html_common, "_TypedImageData.height"),
    width$1: dart.privateName(html_common, "_TypedImageData.width"),
    _childNodes: dart.privateName(html_common, "_childNodes"),
    _node: dart.privateName(html_common, "_node"),
    _iterable$2: dart.privateName(html_common, "_iterable"),
    _filtered: dart.privateName(html_common, "_filtered"),
    $farthestViewportElement: dartx.farthestViewportElement = Symbol("dartx.farthestViewportElement"),
    $nearestViewportElement: dartx.nearestViewportElement = Symbol("dartx.nearestViewportElement"),
    $getBBox: dartx.getBBox = Symbol("dartx.getBBox"),
    $getCtm: dartx.getCtm = Symbol("dartx.getCtm"),
    $getScreenCtm: dartx.getScreenCtm = Symbol("dartx.getScreenCtm"),
    $requiredExtensions: dartx.requiredExtensions = Symbol("dartx.requiredExtensions"),
    $systemLanguage: dartx.systemLanguage = Symbol("dartx.systemLanguage"),
    _children$1: dart.privateName(svg$, "_children"),
    _svgClassName: dart.privateName(svg$, "_svgClassName"),
    $ownerSvgElement: dartx.ownerSvgElement = Symbol("dartx.ownerSvgElement"),
    $viewportElement: dartx.viewportElement = Symbol("dartx.viewportElement"),
    $unitType: dartx.unitType = Symbol("dartx.unitType"),
    $valueAsString: dartx.valueAsString = Symbol("dartx.valueAsString"),
    $valueInSpecifiedUnits: dartx.valueInSpecifiedUnits = Symbol("dartx.valueInSpecifiedUnits"),
    $convertToSpecifiedUnits: dartx.convertToSpecifiedUnits = Symbol("dartx.convertToSpecifiedUnits"),
    $newValueSpecifiedUnits: dartx.newValueSpecifiedUnits = Symbol("dartx.newValueSpecifiedUnits"),
    $targetElement: dartx.targetElement = Symbol("dartx.targetElement"),
    $beginElement: dartx.beginElement = Symbol("dartx.beginElement"),
    $beginElementAt: dartx.beginElementAt = Symbol("dartx.beginElementAt"),
    $endElement: dartx.endElement = Symbol("dartx.endElement"),
    $endElementAt: dartx.endElementAt = Symbol("dartx.endElementAt"),
    $getCurrentTime: dartx.getCurrentTime = Symbol("dartx.getCurrentTime"),
    $getSimpleDuration: dartx.getSimpleDuration = Symbol("dartx.getSimpleDuration"),
    $getStartTime: dartx.getStartTime = Symbol("dartx.getStartTime"),
    $animVal: dartx.animVal = Symbol("dartx.animVal"),
    $baseVal: dartx.baseVal = Symbol("dartx.baseVal"),
    $cx: dartx.cx = Symbol("dartx.cx"),
    $cy: dartx.cy = Symbol("dartx.cy"),
    $r: dartx.r = Symbol("dartx.r"),
    $pathLength: dartx.pathLength = Symbol("dartx.pathLength"),
    $getPointAtLength: dartx.getPointAtLength = Symbol("dartx.getPointAtLength"),
    $getTotalLength: dartx.getTotalLength = Symbol("dartx.getTotalLength"),
    $isPointInFill: dartx.isPointInFill = Symbol("dartx.isPointInFill"),
    $clipPathUnits: dartx.clipPathUnits = Symbol("dartx.clipPathUnits"),
    $rx: dartx.rx = Symbol("dartx.rx"),
    $ry: dartx.ry = Symbol("dartx.ry"),
    $in1: dartx.in1 = Symbol("dartx.in1"),
    $in2: dartx.in2 = Symbol("dartx.in2"),
    $k1: dartx.k1 = Symbol("dartx.k1"),
    $k2: dartx.k2 = Symbol("dartx.k2"),
    $k3: dartx.k3 = Symbol("dartx.k3"),
    $k4: dartx.k4 = Symbol("dartx.k4"),
    $operator: dartx.operator = Symbol("dartx.operator"),
    $bias: dartx.bias = Symbol("dartx.bias"),
    $divisor: dartx.divisor = Symbol("dartx.divisor"),
    $edgeMode: dartx.edgeMode = Symbol("dartx.edgeMode"),
    $kernelMatrix: dartx.kernelMatrix = Symbol("dartx.kernelMatrix"),
    $kernelUnitLengthX: dartx.kernelUnitLengthX = Symbol("dartx.kernelUnitLengthX"),
    $kernelUnitLengthY: dartx.kernelUnitLengthY = Symbol("dartx.kernelUnitLengthY"),
    $orderX: dartx.orderX = Symbol("dartx.orderX"),
    $orderY: dartx.orderY = Symbol("dartx.orderY"),
    $preserveAlpha: dartx.preserveAlpha = Symbol("dartx.preserveAlpha"),
    $targetX: dartx.targetX = Symbol("dartx.targetX"),
    $targetY: dartx.targetY = Symbol("dartx.targetY"),
    $diffuseConstant: dartx.diffuseConstant = Symbol("dartx.diffuseConstant"),
    $surfaceScale: dartx.surfaceScale = Symbol("dartx.surfaceScale"),
    $xChannelSelector: dartx.xChannelSelector = Symbol("dartx.xChannelSelector"),
    $yChannelSelector: dartx.yChannelSelector = Symbol("dartx.yChannelSelector"),
    $azimuth: dartx.azimuth = Symbol("dartx.azimuth"),
    $elevation: dartx.elevation = Symbol("dartx.elevation"),
    $stdDeviationX: dartx.stdDeviationX = Symbol("dartx.stdDeviationX"),
    $stdDeviationY: dartx.stdDeviationY = Symbol("dartx.stdDeviationY"),
    $setStdDeviation: dartx.setStdDeviation = Symbol("dartx.setStdDeviation"),
    $preserveAspectRatio: dartx.preserveAspectRatio = Symbol("dartx.preserveAspectRatio"),
    $dx: dartx.dx = Symbol("dartx.dx"),
    $dy: dartx.dy = Symbol("dartx.dy"),
    $specularConstant: dartx.specularConstant = Symbol("dartx.specularConstant"),
    $specularExponent: dartx.specularExponent = Symbol("dartx.specularExponent"),
    $limitingConeAngle: dartx.limitingConeAngle = Symbol("dartx.limitingConeAngle"),
    $pointsAtX: dartx.pointsAtX = Symbol("dartx.pointsAtX"),
    $pointsAtY: dartx.pointsAtY = Symbol("dartx.pointsAtY"),
    $pointsAtZ: dartx.pointsAtZ = Symbol("dartx.pointsAtZ"),
    $baseFrequencyX: dartx.baseFrequencyX = Symbol("dartx.baseFrequencyX"),
    $baseFrequencyY: dartx.baseFrequencyY = Symbol("dartx.baseFrequencyY"),
    $numOctaves: dartx.numOctaves = Symbol("dartx.numOctaves"),
    $seed: dartx.seed = Symbol("dartx.seed"),
    $stitchTiles: dartx.stitchTiles = Symbol("dartx.stitchTiles"),
    $filterUnits: dartx.filterUnits = Symbol("dartx.filterUnits"),
    $primitiveUnits: dartx.primitiveUnits = Symbol("dartx.primitiveUnits"),
    $viewBox: dartx.viewBox = Symbol("dartx.viewBox"),
    $numberOfItems: dartx.numberOfItems = Symbol("dartx.numberOfItems"),
    __setter__$1: dart.privateName(svg$, "__setter__"),
    $appendItem: dartx.appendItem = Symbol("dartx.appendItem"),
    $getItem: dartx.getItem = Symbol("dartx.getItem"),
    $initialize: dartx.initialize = Symbol("dartx.initialize"),
    $insertItemBefore: dartx.insertItemBefore = Symbol("dartx.insertItemBefore"),
    $removeItem: dartx.removeItem = Symbol("dartx.removeItem"),
    $replaceItem: dartx.replaceItem = Symbol("dartx.replaceItem"),
    $x1: dartx.x1 = Symbol("dartx.x1"),
    $x2: dartx.x2 = Symbol("dartx.x2"),
    $y1: dartx.y1 = Symbol("dartx.y1"),
    $y2: dartx.y2 = Symbol("dartx.y2"),
    $gradientTransform: dartx.gradientTransform = Symbol("dartx.gradientTransform"),
    $gradientUnits: dartx.gradientUnits = Symbol("dartx.gradientUnits"),
    $spreadMethod: dartx.spreadMethod = Symbol("dartx.spreadMethod"),
    $markerHeight: dartx.markerHeight = Symbol("dartx.markerHeight"),
    $markerUnits: dartx.markerUnits = Symbol("dartx.markerUnits"),
    $markerWidth: dartx.markerWidth = Symbol("dartx.markerWidth"),
    $orientAngle: dartx.orientAngle = Symbol("dartx.orientAngle"),
    $orientType: dartx.orientType = Symbol("dartx.orientType"),
    $refX: dartx.refX = Symbol("dartx.refX"),
    $refY: dartx.refY = Symbol("dartx.refY"),
    $setOrientToAngle: dartx.setOrientToAngle = Symbol("dartx.setOrientToAngle"),
    $setOrientToAuto: dartx.setOrientToAuto = Symbol("dartx.setOrientToAuto"),
    $maskContentUnits: dartx.maskContentUnits = Symbol("dartx.maskContentUnits"),
    $maskUnits: dartx.maskUnits = Symbol("dartx.maskUnits"),
    $scaleNonUniform: dartx.scaleNonUniform = Symbol("dartx.scaleNonUniform"),
    $patternContentUnits: dartx.patternContentUnits = Symbol("dartx.patternContentUnits"),
    $patternTransform: dartx.patternTransform = Symbol("dartx.patternTransform"),
    $patternUnits: dartx.patternUnits = Symbol("dartx.patternUnits"),
    $animatedPoints: dartx.animatedPoints = Symbol("dartx.animatedPoints"),
    $points: dartx.points = Symbol("dartx.points"),
    $meetOrSlice: dartx.meetOrSlice = Symbol("dartx.meetOrSlice"),
    $fr: dartx.fr = Symbol("dartx.fr"),
    $fx: dartx.fx = Symbol("dartx.fx"),
    $fy: dartx.fy = Symbol("dartx.fy"),
    $gradientOffset: dartx.gradientOffset = Symbol("dartx.gradientOffset"),
    _element$3: dart.privateName(svg$, "_element"),
    $currentScale: dartx.currentScale = Symbol("dartx.currentScale"),
    $currentTranslate: dartx.currentTranslate = Symbol("dartx.currentTranslate"),
    $animationsPaused: dartx.animationsPaused = Symbol("dartx.animationsPaused"),
    $checkEnclosure: dartx.checkEnclosure = Symbol("dartx.checkEnclosure"),
    $checkIntersection: dartx.checkIntersection = Symbol("dartx.checkIntersection"),
    $createSvgAngle: dartx.createSvgAngle = Symbol("dartx.createSvgAngle"),
    $createSvgLength: dartx.createSvgLength = Symbol("dartx.createSvgLength"),
    $createSvgMatrix: dartx.createSvgMatrix = Symbol("dartx.createSvgMatrix"),
    $createSvgNumber: dartx.createSvgNumber = Symbol("dartx.createSvgNumber"),
    $createSvgPoint: dartx.createSvgPoint = Symbol("dartx.createSvgPoint"),
    $createSvgRect: dartx.createSvgRect = Symbol("dartx.createSvgRect"),
    $createSvgTransform: dartx.createSvgTransform = Symbol("dartx.createSvgTransform"),
    $createSvgTransformFromMatrix: dartx.createSvgTransformFromMatrix = Symbol("dartx.createSvgTransformFromMatrix"),
    $deselectAll: dartx.deselectAll = Symbol("dartx.deselectAll"),
    $forceRedraw: dartx.forceRedraw = Symbol("dartx.forceRedraw"),
    $getEnclosureList: dartx.getEnclosureList = Symbol("dartx.getEnclosureList"),
    $getIntersectionList: dartx.getIntersectionList = Symbol("dartx.getIntersectionList"),
    $pauseAnimations: dartx.pauseAnimations = Symbol("dartx.pauseAnimations"),
    $setCurrentTime: dartx.setCurrentTime = Symbol("dartx.setCurrentTime"),
    $suspendRedraw: dartx.suspendRedraw = Symbol("dartx.suspendRedraw"),
    $unpauseAnimations: dartx.unpauseAnimations = Symbol("dartx.unpauseAnimations"),
    $unsuspendRedraw: dartx.unsuspendRedraw = Symbol("dartx.unsuspendRedraw"),
    $unsuspendRedrawAll: dartx.unsuspendRedrawAll = Symbol("dartx.unsuspendRedrawAll"),
    $zoomAndPan: dartx.zoomAndPan = Symbol("dartx.zoomAndPan"),
    $lengthAdjust: dartx.lengthAdjust = Symbol("dartx.lengthAdjust"),
    $getCharNumAtPosition: dartx.getCharNumAtPosition = Symbol("dartx.getCharNumAtPosition"),
    $getComputedTextLength: dartx.getComputedTextLength = Symbol("dartx.getComputedTextLength"),
    $getEndPositionOfChar: dartx.getEndPositionOfChar = Symbol("dartx.getEndPositionOfChar"),
    $getExtentOfChar: dartx.getExtentOfChar = Symbol("dartx.getExtentOfChar"),
    $getNumberOfChars: dartx.getNumberOfChars = Symbol("dartx.getNumberOfChars"),
    $getRotationOfChar: dartx.getRotationOfChar = Symbol("dartx.getRotationOfChar"),
    $getStartPositionOfChar: dartx.getStartPositionOfChar = Symbol("dartx.getStartPositionOfChar"),
    $getSubStringLength: dartx.getSubStringLength = Symbol("dartx.getSubStringLength"),
    $selectSubString: dartx.selectSubString = Symbol("dartx.selectSubString"),
    $spacing: dartx.spacing = Symbol("dartx.spacing"),
    $setMatrix: dartx.setMatrix = Symbol("dartx.setMatrix"),
    $setRotate: dartx.setRotate = Symbol("dartx.setRotate"),
    $setScale: dartx.setScale = Symbol("dartx.setScale"),
    $setSkewX: dartx.setSkewX = Symbol("dartx.setSkewX"),
    $setSkewY: dartx.setSkewY = Symbol("dartx.setSkewY"),
    $setTranslate: dartx.setTranslate = Symbol("dartx.setTranslate"),
    $consolidate: dartx.consolidate = Symbol("dartx.consolidate"),
    $fftSize: dartx.fftSize = Symbol("dartx.fftSize"),
    $frequencyBinCount: dartx.frequencyBinCount = Symbol("dartx.frequencyBinCount"),
    $maxDecibels: dartx.maxDecibels = Symbol("dartx.maxDecibels"),
    $minDecibels: dartx.minDecibels = Symbol("dartx.minDecibels"),
    $smoothingTimeConstant: dartx.smoothingTimeConstant = Symbol("dartx.smoothingTimeConstant"),
    $getByteFrequencyData: dartx.getByteFrequencyData = Symbol("dartx.getByteFrequencyData"),
    $getByteTimeDomainData: dartx.getByteTimeDomainData = Symbol("dartx.getByteTimeDomainData"),
    $getFloatFrequencyData: dartx.getFloatFrequencyData = Symbol("dartx.getFloatFrequencyData"),
    $getFloatTimeDomainData: dartx.getFloatTimeDomainData = Symbol("dartx.getFloatTimeDomainData"),
    $channelCount: dartx.channelCount = Symbol("dartx.channelCount"),
    $channelCountMode: dartx.channelCountMode = Symbol("dartx.channelCountMode"),
    $channelInterpretation: dartx.channelInterpretation = Symbol("dartx.channelInterpretation"),
    $context: dartx.context = Symbol("dartx.context"),
    $numberOfInputs: dartx.numberOfInputs = Symbol("dartx.numberOfInputs"),
    $numberOfOutputs: dartx.numberOfOutputs = Symbol("dartx.numberOfOutputs"),
    _connect: dart.privateName(web_audio, "_connect"),
    $connectNode: dartx.connectNode = Symbol("dartx.connectNode"),
    $connectParam: dartx.connectParam = Symbol("dartx.connectParam"),
    $numberOfChannels: dartx.numberOfChannels = Symbol("dartx.numberOfChannels"),
    $sampleRate: dartx.sampleRate = Symbol("dartx.sampleRate"),
    $copyFromChannel: dartx.copyFromChannel = Symbol("dartx.copyFromChannel"),
    $copyToChannel: dartx.copyToChannel = Symbol("dartx.copyToChannel"),
    $getChannelData: dartx.getChannelData = Symbol("dartx.getChannelData"),
    $detune: dartx.detune = Symbol("dartx.detune"),
    $loopEnd: dartx.loopEnd = Symbol("dartx.loopEnd"),
    $loopStart: dartx.loopStart = Symbol("dartx.loopStart"),
    $start2: dartx.start2 = Symbol("dartx.start2"),
    $baseLatency: dartx.baseLatency = Symbol("dartx.baseLatency"),
    _getOutputTimestamp_1: dart.privateName(web_audio, "_getOutputTimestamp_1"),
    $getOutputTimestamp: dartx.getOutputTimestamp = Symbol("dartx.getOutputTimestamp"),
    $suspend: dartx.suspend = Symbol("dartx.suspend"),
    $createGain: dartx.createGain = Symbol("dartx.createGain"),
    $createScriptProcessor: dartx.createScriptProcessor = Symbol("dartx.createScriptProcessor"),
    _decodeAudioData: dart.privateName(web_audio, "_decodeAudioData"),
    $decodeAudioData: dartx.decodeAudioData = Symbol("dartx.decodeAudioData"),
    $destination: dartx.destination = Symbol("dartx.destination"),
    $listener: dartx.listener = Symbol("dartx.listener"),
    $createAnalyser: dartx.createAnalyser = Symbol("dartx.createAnalyser"),
    $createBiquadFilter: dartx.createBiquadFilter = Symbol("dartx.createBiquadFilter"),
    $createBuffer: dartx.createBuffer = Symbol("dartx.createBuffer"),
    $createBufferSource: dartx.createBufferSource = Symbol("dartx.createBufferSource"),
    $createChannelMerger: dartx.createChannelMerger = Symbol("dartx.createChannelMerger"),
    $createChannelSplitter: dartx.createChannelSplitter = Symbol("dartx.createChannelSplitter"),
    $createConstantSource: dartx.createConstantSource = Symbol("dartx.createConstantSource"),
    $createConvolver: dartx.createConvolver = Symbol("dartx.createConvolver"),
    $createDelay: dartx.createDelay = Symbol("dartx.createDelay"),
    $createDynamicsCompressor: dartx.createDynamicsCompressor = Symbol("dartx.createDynamicsCompressor"),
    $createIirFilter: dartx.createIirFilter = Symbol("dartx.createIirFilter")
  };
  var S$4 = {
    $createMediaElementSource: dartx.createMediaElementSource = Symbol("dartx.createMediaElementSource"),
    $createMediaStreamDestination: dartx.createMediaStreamDestination = Symbol("dartx.createMediaStreamDestination"),
    $createMediaStreamSource: dartx.createMediaStreamSource = Symbol("dartx.createMediaStreamSource"),
    $createOscillator: dartx.createOscillator = Symbol("dartx.createOscillator"),
    $createPanner: dartx.createPanner = Symbol("dartx.createPanner"),
    _createPeriodicWave_1: dart.privateName(web_audio, "_createPeriodicWave_1"),
    _createPeriodicWave_2: dart.privateName(web_audio, "_createPeriodicWave_2"),
    $createPeriodicWave: dartx.createPeriodicWave = Symbol("dartx.createPeriodicWave"),
    $createStereoPanner: dartx.createStereoPanner = Symbol("dartx.createStereoPanner"),
    $createWaveShaper: dartx.createWaveShaper = Symbol("dartx.createWaveShaper"),
    $maxChannelCount: dartx.maxChannelCount = Symbol("dartx.maxChannelCount"),
    $forwardX: dartx.forwardX = Symbol("dartx.forwardX"),
    $forwardY: dartx.forwardY = Symbol("dartx.forwardY"),
    $forwardZ: dartx.forwardZ = Symbol("dartx.forwardZ"),
    $positionZ: dartx.positionZ = Symbol("dartx.positionZ"),
    $upX: dartx.upX = Symbol("dartx.upX"),
    $upY: dartx.upY = Symbol("dartx.upY"),
    $upZ: dartx.upZ = Symbol("dartx.upZ"),
    $setOrientation: dartx.setOrientation = Symbol("dartx.setOrientation"),
    $maxValue: dartx.maxValue = Symbol("dartx.maxValue"),
    $minValue: dartx.minValue = Symbol("dartx.minValue"),
    $cancelAndHoldAtTime: dartx.cancelAndHoldAtTime = Symbol("dartx.cancelAndHoldAtTime"),
    $cancelScheduledValues: dartx.cancelScheduledValues = Symbol("dartx.cancelScheduledValues"),
    $exponentialRampToValueAtTime: dartx.exponentialRampToValueAtTime = Symbol("dartx.exponentialRampToValueAtTime"),
    $linearRampToValueAtTime: dartx.linearRampToValueAtTime = Symbol("dartx.linearRampToValueAtTime"),
    $setTargetAtTime: dartx.setTargetAtTime = Symbol("dartx.setTargetAtTime"),
    $setValueAtTime: dartx.setValueAtTime = Symbol("dartx.setValueAtTime"),
    $setValueCurveAtTime: dartx.setValueCurveAtTime = Symbol("dartx.setValueCurveAtTime"),
    _getItem$1: dart.privateName(web_audio, "_getItem"),
    $inputBuffer: dartx.inputBuffer = Symbol("dartx.inputBuffer"),
    $outputBuffer: dartx.outputBuffer = Symbol("dartx.outputBuffer"),
    $playbackTime: dartx.playbackTime = Symbol("dartx.playbackTime"),
    __getter__$1: dart.privateName(web_audio, "__getter__"),
    $registerProcessor: dartx.registerProcessor = Symbol("dartx.registerProcessor"),
    $parameters: dartx.parameters = Symbol("dartx.parameters"),
    $Q: dartx.Q = Symbol("dartx.Q"),
    $frequency: dartx.frequency = Symbol("dartx.frequency"),
    $gain: dartx.gain = Symbol("dartx.gain"),
    $getFrequencyResponse: dartx.getFrequencyResponse = Symbol("dartx.getFrequencyResponse"),
    $normalize: dartx.normalize = Symbol("dartx.normalize"),
    $delayTime: dartx.delayTime = Symbol("dartx.delayTime"),
    $attack: dartx.attack = Symbol("dartx.attack"),
    $knee: dartx.knee = Symbol("dartx.knee"),
    $ratio: dartx.ratio = Symbol("dartx.ratio"),
    $reduction: dartx.reduction = Symbol("dartx.reduction"),
    $release: dartx.release = Symbol("dartx.release"),
    $threshold: dartx.threshold = Symbol("dartx.threshold"),
    $mediaElement: dartx.mediaElement = Symbol("dartx.mediaElement"),
    $mediaStream: dartx.mediaStream = Symbol("dartx.mediaStream"),
    $renderedBuffer: dartx.renderedBuffer = Symbol("dartx.renderedBuffer"),
    $startRendering: dartx.startRendering = Symbol("dartx.startRendering"),
    $suspendFor: dartx.suspendFor = Symbol("dartx.suspendFor"),
    $setPeriodicWave: dartx.setPeriodicWave = Symbol("dartx.setPeriodicWave"),
    $coneInnerAngle: dartx.coneInnerAngle = Symbol("dartx.coneInnerAngle"),
    $coneOuterAngle: dartx.coneOuterAngle = Symbol("dartx.coneOuterAngle"),
    $coneOuterGain: dartx.coneOuterGain = Symbol("dartx.coneOuterGain"),
    $distanceModel: dartx.distanceModel = Symbol("dartx.distanceModel"),
    $maxDistance: dartx.maxDistance = Symbol("dartx.maxDistance"),
    $orientationX: dartx.orientationX = Symbol("dartx.orientationX"),
    $orientationY: dartx.orientationY = Symbol("dartx.orientationY"),
    $orientationZ: dartx.orientationZ = Symbol("dartx.orientationZ"),
    $panningModel: dartx.panningModel = Symbol("dartx.panningModel"),
    $refDistance: dartx.refDistance = Symbol("dartx.refDistance"),
    $rolloffFactor: dartx.rolloffFactor = Symbol("dartx.rolloffFactor"),
    $bufferSize: dartx.bufferSize = Symbol("dartx.bufferSize"),
    $setEventListener: dartx.setEventListener = Symbol("dartx.setEventListener"),
    $onAudioProcess: dartx.onAudioProcess = Symbol("dartx.onAudioProcess"),
    $pan: dartx.pan = Symbol("dartx.pan"),
    $curve: dartx.curve = Symbol("dartx.curve"),
    $oversample: dartx.oversample = Symbol("dartx.oversample"),
    $drawArraysInstancedAngle: dartx.drawArraysInstancedAngle = Symbol("dartx.drawArraysInstancedAngle"),
    $drawElementsInstancedAngle: dartx.drawElementsInstancedAngle = Symbol("dartx.drawElementsInstancedAngle"),
    $vertexAttribDivisorAngle: dartx.vertexAttribDivisorAngle = Symbol("dartx.vertexAttribDivisorAngle"),
    $offscreenCanvas: dartx.offscreenCanvas = Symbol("dartx.offscreenCanvas"),
    $statusMessage: dartx.statusMessage = Symbol("dartx.statusMessage"),
    $getTranslatedShaderSource: dartx.getTranslatedShaderSource = Symbol("dartx.getTranslatedShaderSource"),
    $drawBuffersWebgl: dartx.drawBuffersWebgl = Symbol("dartx.drawBuffersWebgl"),
    $beginQueryExt: dartx.beginQueryExt = Symbol("dartx.beginQueryExt"),
    $createQueryExt: dartx.createQueryExt = Symbol("dartx.createQueryExt"),
    $deleteQueryExt: dartx.deleteQueryExt = Symbol("dartx.deleteQueryExt"),
    $endQueryExt: dartx.endQueryExt = Symbol("dartx.endQueryExt"),
    $getQueryExt: dartx.getQueryExt = Symbol("dartx.getQueryExt"),
    $getQueryObjectExt: dartx.getQueryObjectExt = Symbol("dartx.getQueryObjectExt"),
    $isQueryExt: dartx.isQueryExt = Symbol("dartx.isQueryExt"),
    $queryCounterExt: dartx.queryCounterExt = Symbol("dartx.queryCounterExt"),
    $getBufferSubDataAsync: dartx.getBufferSubDataAsync = Symbol("dartx.getBufferSubDataAsync"),
    $loseContext: dartx.loseContext = Symbol("dartx.loseContext"),
    $restoreContext: dartx.restoreContext = Symbol("dartx.restoreContext"),
    $bindVertexArray: dartx.bindVertexArray = Symbol("dartx.bindVertexArray"),
    $createVertexArray: dartx.createVertexArray = Symbol("dartx.createVertexArray"),
    $deleteVertexArray: dartx.deleteVertexArray = Symbol("dartx.deleteVertexArray"),
    $isVertexArray: dartx.isVertexArray = Symbol("dartx.isVertexArray"),
    $drawingBufferHeight: dartx.drawingBufferHeight = Symbol("dartx.drawingBufferHeight"),
    $drawingBufferWidth: dartx.drawingBufferWidth = Symbol("dartx.drawingBufferWidth"),
    $activeTexture: dartx.activeTexture = Symbol("dartx.activeTexture"),
    $attachShader: dartx.attachShader = Symbol("dartx.attachShader"),
    $bindAttribLocation: dartx.bindAttribLocation = Symbol("dartx.bindAttribLocation"),
    $bindBuffer: dartx.bindBuffer = Symbol("dartx.bindBuffer"),
    $bindFramebuffer: dartx.bindFramebuffer = Symbol("dartx.bindFramebuffer"),
    $bindRenderbuffer: dartx.bindRenderbuffer = Symbol("dartx.bindRenderbuffer"),
    $bindTexture: dartx.bindTexture = Symbol("dartx.bindTexture"),
    $blendColor: dartx.blendColor = Symbol("dartx.blendColor"),
    $blendEquation: dartx.blendEquation = Symbol("dartx.blendEquation"),
    $blendEquationSeparate: dartx.blendEquationSeparate = Symbol("dartx.blendEquationSeparate"),
    $blendFunc: dartx.blendFunc = Symbol("dartx.blendFunc"),
    $blendFuncSeparate: dartx.blendFuncSeparate = Symbol("dartx.blendFuncSeparate"),
    $bufferData: dartx.bufferData = Symbol("dartx.bufferData"),
    $bufferSubData: dartx.bufferSubData = Symbol("dartx.bufferSubData"),
    $checkFramebufferStatus: dartx.checkFramebufferStatus = Symbol("dartx.checkFramebufferStatus"),
    $clearColor: dartx.clearColor = Symbol("dartx.clearColor"),
    $clearDepth: dartx.clearDepth = Symbol("dartx.clearDepth"),
    $clearStencil: dartx.clearStencil = Symbol("dartx.clearStencil"),
    $colorMask: dartx.colorMask = Symbol("dartx.colorMask"),
    $compileShader: dartx.compileShader = Symbol("dartx.compileShader"),
    $compressedTexImage2D: dartx.compressedTexImage2D = Symbol("dartx.compressedTexImage2D"),
    $compressedTexSubImage2D: dartx.compressedTexSubImage2D = Symbol("dartx.compressedTexSubImage2D"),
    $copyTexImage2D: dartx.copyTexImage2D = Symbol("dartx.copyTexImage2D"),
    $copyTexSubImage2D: dartx.copyTexSubImage2D = Symbol("dartx.copyTexSubImage2D"),
    $createFramebuffer: dartx.createFramebuffer = Symbol("dartx.createFramebuffer"),
    $createProgram: dartx.createProgram = Symbol("dartx.createProgram"),
    $createRenderbuffer: dartx.createRenderbuffer = Symbol("dartx.createRenderbuffer"),
    $createShader: dartx.createShader = Symbol("dartx.createShader"),
    $createTexture: dartx.createTexture = Symbol("dartx.createTexture"),
    $cullFace: dartx.cullFace = Symbol("dartx.cullFace"),
    $deleteBuffer: dartx.deleteBuffer = Symbol("dartx.deleteBuffer"),
    $deleteFramebuffer: dartx.deleteFramebuffer = Symbol("dartx.deleteFramebuffer"),
    $deleteProgram: dartx.deleteProgram = Symbol("dartx.deleteProgram"),
    $deleteRenderbuffer: dartx.deleteRenderbuffer = Symbol("dartx.deleteRenderbuffer"),
    $deleteShader: dartx.deleteShader = Symbol("dartx.deleteShader"),
    $deleteTexture: dartx.deleteTexture = Symbol("dartx.deleteTexture"),
    $depthFunc: dartx.depthFunc = Symbol("dartx.depthFunc"),
    $depthMask: dartx.depthMask = Symbol("dartx.depthMask"),
    $depthRange: dartx.depthRange = Symbol("dartx.depthRange"),
    $detachShader: dartx.detachShader = Symbol("dartx.detachShader"),
    $disableVertexAttribArray: dartx.disableVertexAttribArray = Symbol("dartx.disableVertexAttribArray"),
    $drawArrays: dartx.drawArrays = Symbol("dartx.drawArrays"),
    $drawElements: dartx.drawElements = Symbol("dartx.drawElements"),
    $enableVertexAttribArray: dartx.enableVertexAttribArray = Symbol("dartx.enableVertexAttribArray"),
    $flush: dartx.flush = Symbol("dartx.flush"),
    $framebufferRenderbuffer: dartx.framebufferRenderbuffer = Symbol("dartx.framebufferRenderbuffer"),
    $framebufferTexture2D: dartx.framebufferTexture2D = Symbol("dartx.framebufferTexture2D"),
    $frontFace: dartx.frontFace = Symbol("dartx.frontFace"),
    $generateMipmap: dartx.generateMipmap = Symbol("dartx.generateMipmap"),
    $getActiveAttrib: dartx.getActiveAttrib = Symbol("dartx.getActiveAttrib"),
    $getActiveUniform: dartx.getActiveUniform = Symbol("dartx.getActiveUniform"),
    $getAttachedShaders: dartx.getAttachedShaders = Symbol("dartx.getAttachedShaders"),
    $getAttribLocation: dartx.getAttribLocation = Symbol("dartx.getAttribLocation"),
    $getBufferParameter: dartx.getBufferParameter = Symbol("dartx.getBufferParameter"),
    _getContextAttributes_1$1: dart.privateName(web_gl, "_getContextAttributes_1"),
    $getError: dartx.getError = Symbol("dartx.getError"),
    $getExtension: dartx.getExtension = Symbol("dartx.getExtension"),
    $getFramebufferAttachmentParameter: dartx.getFramebufferAttachmentParameter = Symbol("dartx.getFramebufferAttachmentParameter"),
    $getProgramInfoLog: dartx.getProgramInfoLog = Symbol("dartx.getProgramInfoLog"),
    $getProgramParameter: dartx.getProgramParameter = Symbol("dartx.getProgramParameter"),
    $getRenderbufferParameter: dartx.getRenderbufferParameter = Symbol("dartx.getRenderbufferParameter"),
    $getShaderInfoLog: dartx.getShaderInfoLog = Symbol("dartx.getShaderInfoLog"),
    $getShaderParameter: dartx.getShaderParameter = Symbol("dartx.getShaderParameter"),
    $getShaderPrecisionFormat: dartx.getShaderPrecisionFormat = Symbol("dartx.getShaderPrecisionFormat"),
    $getShaderSource: dartx.getShaderSource = Symbol("dartx.getShaderSource"),
    $getSupportedExtensions: dartx.getSupportedExtensions = Symbol("dartx.getSupportedExtensions"),
    $getTexParameter: dartx.getTexParameter = Symbol("dartx.getTexParameter"),
    $getUniform: dartx.getUniform = Symbol("dartx.getUniform"),
    $getUniformLocation: dartx.getUniformLocation = Symbol("dartx.getUniformLocation"),
    $getVertexAttrib: dartx.getVertexAttrib = Symbol("dartx.getVertexAttrib"),
    $getVertexAttribOffset: dartx.getVertexAttribOffset = Symbol("dartx.getVertexAttribOffset"),
    $hint: dartx.hint = Symbol("dartx.hint"),
    $isBuffer: dartx.isBuffer = Symbol("dartx.isBuffer"),
    $isEnabled: dartx.isEnabled = Symbol("dartx.isEnabled"),
    $isFramebuffer: dartx.isFramebuffer = Symbol("dartx.isFramebuffer"),
    $isProgram: dartx.isProgram = Symbol("dartx.isProgram"),
    $isRenderbuffer: dartx.isRenderbuffer = Symbol("dartx.isRenderbuffer"),
    $isShader: dartx.isShader = Symbol("dartx.isShader"),
    $isTexture: dartx.isTexture = Symbol("dartx.isTexture"),
    $linkProgram: dartx.linkProgram = Symbol("dartx.linkProgram"),
    $pixelStorei: dartx.pixelStorei = Symbol("dartx.pixelStorei"),
    $polygonOffset: dartx.polygonOffset = Symbol("dartx.polygonOffset"),
    _readPixels: dart.privateName(web_gl, "_readPixels"),
    $renderbufferStorage: dartx.renderbufferStorage = Symbol("dartx.renderbufferStorage"),
    $sampleCoverage: dartx.sampleCoverage = Symbol("dartx.sampleCoverage"),
    $scissor: dartx.scissor = Symbol("dartx.scissor"),
    $shaderSource: dartx.shaderSource = Symbol("dartx.shaderSource"),
    $stencilFunc: dartx.stencilFunc = Symbol("dartx.stencilFunc"),
    $stencilFuncSeparate: dartx.stencilFuncSeparate = Symbol("dartx.stencilFuncSeparate"),
    $stencilMask: dartx.stencilMask = Symbol("dartx.stencilMask"),
    $stencilMaskSeparate: dartx.stencilMaskSeparate = Symbol("dartx.stencilMaskSeparate"),
    $stencilOp: dartx.stencilOp = Symbol("dartx.stencilOp"),
    $stencilOpSeparate: dartx.stencilOpSeparate = Symbol("dartx.stencilOpSeparate"),
    _texImage2D_1: dart.privateName(web_gl, "_texImage2D_1"),
    _texImage2D_2: dart.privateName(web_gl, "_texImage2D_2"),
    _texImage2D_3: dart.privateName(web_gl, "_texImage2D_3"),
    _texImage2D_4: dart.privateName(web_gl, "_texImage2D_4"),
    _texImage2D_5: dart.privateName(web_gl, "_texImage2D_5"),
    _texImage2D_6: dart.privateName(web_gl, "_texImage2D_6"),
    $texImage2D: dartx.texImage2D = Symbol("dartx.texImage2D"),
    $texParameterf: dartx.texParameterf = Symbol("dartx.texParameterf"),
    $texParameteri: dartx.texParameteri = Symbol("dartx.texParameteri"),
    _texSubImage2D_1: dart.privateName(web_gl, "_texSubImage2D_1"),
    _texSubImage2D_2: dart.privateName(web_gl, "_texSubImage2D_2"),
    _texSubImage2D_3: dart.privateName(web_gl, "_texSubImage2D_3"),
    _texSubImage2D_4: dart.privateName(web_gl, "_texSubImage2D_4"),
    _texSubImage2D_5: dart.privateName(web_gl, "_texSubImage2D_5"),
    _texSubImage2D_6: dart.privateName(web_gl, "_texSubImage2D_6"),
    $texSubImage2D: dartx.texSubImage2D = Symbol("dartx.texSubImage2D"),
    $uniform1f: dartx.uniform1f = Symbol("dartx.uniform1f"),
    $uniform1fv: dartx.uniform1fv = Symbol("dartx.uniform1fv"),
    $uniform1i: dartx.uniform1i = Symbol("dartx.uniform1i"),
    $uniform1iv: dartx.uniform1iv = Symbol("dartx.uniform1iv"),
    $uniform2f: dartx.uniform2f = Symbol("dartx.uniform2f"),
    $uniform2fv: dartx.uniform2fv = Symbol("dartx.uniform2fv"),
    $uniform2i: dartx.uniform2i = Symbol("dartx.uniform2i"),
    $uniform2iv: dartx.uniform2iv = Symbol("dartx.uniform2iv"),
    $uniform3f: dartx.uniform3f = Symbol("dartx.uniform3f"),
    $uniform3fv: dartx.uniform3fv = Symbol("dartx.uniform3fv"),
    $uniform3i: dartx.uniform3i = Symbol("dartx.uniform3i"),
    $uniform3iv: dartx.uniform3iv = Symbol("dartx.uniform3iv"),
    $uniform4f: dartx.uniform4f = Symbol("dartx.uniform4f"),
    $uniform4fv: dartx.uniform4fv = Symbol("dartx.uniform4fv"),
    $uniform4i: dartx.uniform4i = Symbol("dartx.uniform4i"),
    $uniform4iv: dartx.uniform4iv = Symbol("dartx.uniform4iv"),
    $uniformMatrix2fv: dartx.uniformMatrix2fv = Symbol("dartx.uniformMatrix2fv"),
    $uniformMatrix3fv: dartx.uniformMatrix3fv = Symbol("dartx.uniformMatrix3fv"),
    $uniformMatrix4fv: dartx.uniformMatrix4fv = Symbol("dartx.uniformMatrix4fv"),
    $useProgram: dartx.useProgram = Symbol("dartx.useProgram"),
    $validateProgram: dartx.validateProgram = Symbol("dartx.validateProgram"),
    $vertexAttrib1f: dartx.vertexAttrib1f = Symbol("dartx.vertexAttrib1f"),
    $vertexAttrib1fv: dartx.vertexAttrib1fv = Symbol("dartx.vertexAttrib1fv"),
    $vertexAttrib2f: dartx.vertexAttrib2f = Symbol("dartx.vertexAttrib2f"),
    $vertexAttrib2fv: dartx.vertexAttrib2fv = Symbol("dartx.vertexAttrib2fv"),
    $vertexAttrib3f: dartx.vertexAttrib3f = Symbol("dartx.vertexAttrib3f"),
    $vertexAttrib3fv: dartx.vertexAttrib3fv = Symbol("dartx.vertexAttrib3fv"),
    $vertexAttrib4f: dartx.vertexAttrib4f = Symbol("dartx.vertexAttrib4f"),
    $vertexAttrib4fv: dartx.vertexAttrib4fv = Symbol("dartx.vertexAttrib4fv"),
    $vertexAttribPointer: dartx.vertexAttribPointer = Symbol("dartx.vertexAttribPointer"),
    $viewport: dartx.viewport = Symbol("dartx.viewport"),
    $readPixels: dartx.readPixels = Symbol("dartx.readPixels"),
    $texImage2DUntyped: dartx.texImage2DUntyped = Symbol("dartx.texImage2DUntyped"),
    $texImage2DTyped: dartx.texImage2DTyped = Symbol("dartx.texImage2DTyped"),
    $texSubImage2DUntyped: dartx.texSubImage2DUntyped = Symbol("dartx.texSubImage2DUntyped"),
    $texSubImage2DTyped: dartx.texSubImage2DTyped = Symbol("dartx.texSubImage2DTyped"),
    $bufferDataTyped: dartx.bufferDataTyped = Symbol("dartx.bufferDataTyped"),
    $bufferSubDataTyped: dartx.bufferSubDataTyped = Symbol("dartx.bufferSubDataTyped"),
    $beginQuery: dartx.beginQuery = Symbol("dartx.beginQuery"),
    $beginTransformFeedback: dartx.beginTransformFeedback = Symbol("dartx.beginTransformFeedback"),
    $bindBufferBase: dartx.bindBufferBase = Symbol("dartx.bindBufferBase"),
    $bindBufferRange: dartx.bindBufferRange = Symbol("dartx.bindBufferRange"),
    $bindSampler: dartx.bindSampler = Symbol("dartx.bindSampler"),
    $bindTransformFeedback: dartx.bindTransformFeedback = Symbol("dartx.bindTransformFeedback"),
    $blitFramebuffer: dartx.blitFramebuffer = Symbol("dartx.blitFramebuffer"),
    $bufferData2: dartx.bufferData2 = Symbol("dartx.bufferData2"),
    $bufferSubData2: dartx.bufferSubData2 = Symbol("dartx.bufferSubData2"),
    $clearBufferfi: dartx.clearBufferfi = Symbol("dartx.clearBufferfi"),
    $clearBufferfv: dartx.clearBufferfv = Symbol("dartx.clearBufferfv"),
    $clearBufferiv: dartx.clearBufferiv = Symbol("dartx.clearBufferiv"),
    $clearBufferuiv: dartx.clearBufferuiv = Symbol("dartx.clearBufferuiv"),
    $clientWaitSync: dartx.clientWaitSync = Symbol("dartx.clientWaitSync"),
    $compressedTexImage2D2: dartx.compressedTexImage2D2 = Symbol("dartx.compressedTexImage2D2"),
    $compressedTexImage2D3: dartx.compressedTexImage2D3 = Symbol("dartx.compressedTexImage2D3"),
    $compressedTexImage3D: dartx.compressedTexImage3D = Symbol("dartx.compressedTexImage3D"),
    $compressedTexImage3D2: dartx.compressedTexImage3D2 = Symbol("dartx.compressedTexImage3D2"),
    $compressedTexSubImage2D2: dartx.compressedTexSubImage2D2 = Symbol("dartx.compressedTexSubImage2D2"),
    $compressedTexSubImage2D3: dartx.compressedTexSubImage2D3 = Symbol("dartx.compressedTexSubImage2D3"),
    $compressedTexSubImage3D: dartx.compressedTexSubImage3D = Symbol("dartx.compressedTexSubImage3D"),
    $compressedTexSubImage3D2: dartx.compressedTexSubImage3D2 = Symbol("dartx.compressedTexSubImage3D2"),
    $copyBufferSubData: dartx.copyBufferSubData = Symbol("dartx.copyBufferSubData"),
    $copyTexSubImage3D: dartx.copyTexSubImage3D = Symbol("dartx.copyTexSubImage3D"),
    $createQuery: dartx.createQuery = Symbol("dartx.createQuery"),
    $createSampler: dartx.createSampler = Symbol("dartx.createSampler"),
    $createTransformFeedback: dartx.createTransformFeedback = Symbol("dartx.createTransformFeedback"),
    $deleteQuery: dartx.deleteQuery = Symbol("dartx.deleteQuery"),
    $deleteSampler: dartx.deleteSampler = Symbol("dartx.deleteSampler"),
    $deleteSync: dartx.deleteSync = Symbol("dartx.deleteSync"),
    $deleteTransformFeedback: dartx.deleteTransformFeedback = Symbol("dartx.deleteTransformFeedback"),
    $drawArraysInstanced: dartx.drawArraysInstanced = Symbol("dartx.drawArraysInstanced"),
    $drawBuffers: dartx.drawBuffers = Symbol("dartx.drawBuffers"),
    $drawElementsInstanced: dartx.drawElementsInstanced = Symbol("dartx.drawElementsInstanced"),
    $drawRangeElements: dartx.drawRangeElements = Symbol("dartx.drawRangeElements"),
    $endQuery: dartx.endQuery = Symbol("dartx.endQuery"),
    $endTransformFeedback: dartx.endTransformFeedback = Symbol("dartx.endTransformFeedback"),
    $fenceSync: dartx.fenceSync = Symbol("dartx.fenceSync"),
    $framebufferTextureLayer: dartx.framebufferTextureLayer = Symbol("dartx.framebufferTextureLayer"),
    $getActiveUniformBlockName: dartx.getActiveUniformBlockName = Symbol("dartx.getActiveUniformBlockName"),
    $getActiveUniformBlockParameter: dartx.getActiveUniformBlockParameter = Symbol("dartx.getActiveUniformBlockParameter"),
    $getActiveUniforms: dartx.getActiveUniforms = Symbol("dartx.getActiveUniforms"),
    $getBufferSubData: dartx.getBufferSubData = Symbol("dartx.getBufferSubData"),
    $getFragDataLocation: dartx.getFragDataLocation = Symbol("dartx.getFragDataLocation"),
    $getIndexedParameter: dartx.getIndexedParameter = Symbol("dartx.getIndexedParameter"),
    $getInternalformatParameter: dartx.getInternalformatParameter = Symbol("dartx.getInternalformatParameter"),
    $getQuery: dartx.getQuery = Symbol("dartx.getQuery"),
    $getQueryParameter: dartx.getQueryParameter = Symbol("dartx.getQueryParameter"),
    $getSamplerParameter: dartx.getSamplerParameter = Symbol("dartx.getSamplerParameter"),
    $getSyncParameter: dartx.getSyncParameter = Symbol("dartx.getSyncParameter"),
    $getTransformFeedbackVarying: dartx.getTransformFeedbackVarying = Symbol("dartx.getTransformFeedbackVarying"),
    $getUniformBlockIndex: dartx.getUniformBlockIndex = Symbol("dartx.getUniformBlockIndex"),
    _getUniformIndices_1: dart.privateName(web_gl, "_getUniformIndices_1"),
    $getUniformIndices: dartx.getUniformIndices = Symbol("dartx.getUniformIndices"),
    $invalidateFramebuffer: dartx.invalidateFramebuffer = Symbol("dartx.invalidateFramebuffer"),
    $invalidateSubFramebuffer: dartx.invalidateSubFramebuffer = Symbol("dartx.invalidateSubFramebuffer"),
    $isQuery: dartx.isQuery = Symbol("dartx.isQuery"),
    $isSampler: dartx.isSampler = Symbol("dartx.isSampler"),
    $isSync: dartx.isSync = Symbol("dartx.isSync"),
    $isTransformFeedback: dartx.isTransformFeedback = Symbol("dartx.isTransformFeedback"),
    $pauseTransformFeedback: dartx.pauseTransformFeedback = Symbol("dartx.pauseTransformFeedback"),
    $readBuffer: dartx.readBuffer = Symbol("dartx.readBuffer"),
    $readPixels2: dartx.readPixels2 = Symbol("dartx.readPixels2"),
    $renderbufferStorageMultisample: dartx.renderbufferStorageMultisample = Symbol("dartx.renderbufferStorageMultisample"),
    $resumeTransformFeedback: dartx.resumeTransformFeedback = Symbol("dartx.resumeTransformFeedback"),
    $samplerParameterf: dartx.samplerParameterf = Symbol("dartx.samplerParameterf"),
    $samplerParameteri: dartx.samplerParameteri = Symbol("dartx.samplerParameteri"),
    _texImage2D2_1: dart.privateName(web_gl, "_texImage2D2_1"),
    _texImage2D2_2: dart.privateName(web_gl, "_texImage2D2_2"),
    _texImage2D2_3: dart.privateName(web_gl, "_texImage2D2_3"),
    _texImage2D2_4: dart.privateName(web_gl, "_texImage2D2_4"),
    _texImage2D2_5: dart.privateName(web_gl, "_texImage2D2_5"),
    _texImage2D2_6: dart.privateName(web_gl, "_texImage2D2_6"),
    _texImage2D2_7: dart.privateName(web_gl, "_texImage2D2_7"),
    $texImage2D2: dartx.texImage2D2 = Symbol("dartx.texImage2D2"),
    _texImage3D_1: dart.privateName(web_gl, "_texImage3D_1"),
    _texImage3D_2: dart.privateName(web_gl, "_texImage3D_2"),
    _texImage3D_3: dart.privateName(web_gl, "_texImage3D_3"),
    _texImage3D_4: dart.privateName(web_gl, "_texImage3D_4"),
    _texImage3D_5: dart.privateName(web_gl, "_texImage3D_5"),
    _texImage3D_6: dart.privateName(web_gl, "_texImage3D_6"),
    _texImage3D_7: dart.privateName(web_gl, "_texImage3D_7"),
    _texImage3D_8: dart.privateName(web_gl, "_texImage3D_8"),
    $texImage3D: dartx.texImage3D = Symbol("dartx.texImage3D"),
    $texStorage2D: dartx.texStorage2D = Symbol("dartx.texStorage2D"),
    $texStorage3D: dartx.texStorage3D = Symbol("dartx.texStorage3D"),
    _texSubImage2D2_1: dart.privateName(web_gl, "_texSubImage2D2_1"),
    _texSubImage2D2_2: dart.privateName(web_gl, "_texSubImage2D2_2"),
    _texSubImage2D2_3: dart.privateName(web_gl, "_texSubImage2D2_3"),
    _texSubImage2D2_4: dart.privateName(web_gl, "_texSubImage2D2_4"),
    _texSubImage2D2_5: dart.privateName(web_gl, "_texSubImage2D2_5"),
    _texSubImage2D2_6: dart.privateName(web_gl, "_texSubImage2D2_6"),
    _texSubImage2D2_7: dart.privateName(web_gl, "_texSubImage2D2_7"),
    $texSubImage2D2: dartx.texSubImage2D2 = Symbol("dartx.texSubImage2D2"),
    _texSubImage3D_1: dart.privateName(web_gl, "_texSubImage3D_1"),
    _texSubImage3D_2: dart.privateName(web_gl, "_texSubImage3D_2"),
    _texSubImage3D_3: dart.privateName(web_gl, "_texSubImage3D_3"),
    _texSubImage3D_4: dart.privateName(web_gl, "_texSubImage3D_4"),
    _texSubImage3D_5: dart.privateName(web_gl, "_texSubImage3D_5"),
    _texSubImage3D_6: dart.privateName(web_gl, "_texSubImage3D_6"),
    _texSubImage3D_7: dart.privateName(web_gl, "_texSubImage3D_7"),
    _texSubImage3D_8: dart.privateName(web_gl, "_texSubImage3D_8"),
    $texSubImage3D: dartx.texSubImage3D = Symbol("dartx.texSubImage3D"),
    _transformFeedbackVaryings_1: dart.privateName(web_gl, "_transformFeedbackVaryings_1"),
    $transformFeedbackVaryings: dartx.transformFeedbackVaryings = Symbol("dartx.transformFeedbackVaryings"),
    $uniform1fv2: dartx.uniform1fv2 = Symbol("dartx.uniform1fv2"),
    $uniform1iv2: dartx.uniform1iv2 = Symbol("dartx.uniform1iv2"),
    $uniform1ui: dartx.uniform1ui = Symbol("dartx.uniform1ui"),
    $uniform1uiv: dartx.uniform1uiv = Symbol("dartx.uniform1uiv"),
    $uniform2fv2: dartx.uniform2fv2 = Symbol("dartx.uniform2fv2"),
    $uniform2iv2: dartx.uniform2iv2 = Symbol("dartx.uniform2iv2"),
    $uniform2ui: dartx.uniform2ui = Symbol("dartx.uniform2ui"),
    $uniform2uiv: dartx.uniform2uiv = Symbol("dartx.uniform2uiv"),
    $uniform3fv2: dartx.uniform3fv2 = Symbol("dartx.uniform3fv2"),
    $uniform3iv2: dartx.uniform3iv2 = Symbol("dartx.uniform3iv2"),
    $uniform3ui: dartx.uniform3ui = Symbol("dartx.uniform3ui"),
    $uniform3uiv: dartx.uniform3uiv = Symbol("dartx.uniform3uiv"),
    $uniform4fv2: dartx.uniform4fv2 = Symbol("dartx.uniform4fv2"),
    $uniform4iv2: dartx.uniform4iv2 = Symbol("dartx.uniform4iv2"),
    $uniform4ui: dartx.uniform4ui = Symbol("dartx.uniform4ui"),
    $uniform4uiv: dartx.uniform4uiv = Symbol("dartx.uniform4uiv"),
    $uniformBlockBinding: dartx.uniformBlockBinding = Symbol("dartx.uniformBlockBinding"),
    $uniformMatrix2fv2: dartx.uniformMatrix2fv2 = Symbol("dartx.uniformMatrix2fv2"),
    $uniformMatrix2x3fv: dartx.uniformMatrix2x3fv = Symbol("dartx.uniformMatrix2x3fv"),
    $uniformMatrix2x4fv: dartx.uniformMatrix2x4fv = Symbol("dartx.uniformMatrix2x4fv"),
    $uniformMatrix3fv2: dartx.uniformMatrix3fv2 = Symbol("dartx.uniformMatrix3fv2"),
    $uniformMatrix3x2fv: dartx.uniformMatrix3x2fv = Symbol("dartx.uniformMatrix3x2fv"),
    $uniformMatrix3x4fv: dartx.uniformMatrix3x4fv = Symbol("dartx.uniformMatrix3x4fv"),
    $uniformMatrix4fv2: dartx.uniformMatrix4fv2 = Symbol("dartx.uniformMatrix4fv2"),
    $uniformMatrix4x2fv: dartx.uniformMatrix4x2fv = Symbol("dartx.uniformMatrix4x2fv"),
    $uniformMatrix4x3fv: dartx.uniformMatrix4x3fv = Symbol("dartx.uniformMatrix4x3fv"),
    $vertexAttribDivisor: dartx.vertexAttribDivisor = Symbol("dartx.vertexAttribDivisor"),
    $vertexAttribI4i: dartx.vertexAttribI4i = Symbol("dartx.vertexAttribI4i"),
    $vertexAttribI4iv: dartx.vertexAttribI4iv = Symbol("dartx.vertexAttribI4iv"),
    $vertexAttribI4ui: dartx.vertexAttribI4ui = Symbol("dartx.vertexAttribI4ui"),
    $vertexAttribI4uiv: dartx.vertexAttribI4uiv = Symbol("dartx.vertexAttribI4uiv"),
    $vertexAttribIPointer: dartx.vertexAttribIPointer = Symbol("dartx.vertexAttribIPointer"),
    $waitSync: dartx.waitSync = Symbol("dartx.waitSync"),
    $precision: dartx.precision = Symbol("dartx.precision"),
    $rangeMax: dartx.rangeMax = Symbol("dartx.rangeMax"),
    $rangeMin: dartx.rangeMin = Symbol("dartx.rangeMin"),
    $lastUploadedVideoFrameWasSkipped: dartx.lastUploadedVideoFrameWasSkipped = Symbol("dartx.lastUploadedVideoFrameWasSkipped"),
    $lastUploadedVideoHeight: dartx.lastUploadedVideoHeight = Symbol("dartx.lastUploadedVideoHeight"),
    $lastUploadedVideoTimestamp: dartx.lastUploadedVideoTimestamp = Symbol("dartx.lastUploadedVideoTimestamp"),
    $lastUploadedVideoWidth: dartx.lastUploadedVideoWidth = Symbol("dartx.lastUploadedVideoWidth"),
    _changeVersion: dart.privateName(web_sql, "_changeVersion"),
    $changeVersion: dartx.changeVersion = Symbol("dartx.changeVersion"),
    _readTransaction: dart.privateName(web_sql, "_readTransaction"),
    $readTransaction: dartx.readTransaction = Symbol("dartx.readTransaction"),
    $transaction_future: dartx.transaction_future = Symbol("dartx.transaction_future"),
    $insertId: dartx.insertId = Symbol("dartx.insertId"),
    $rowsAffected: dartx.rowsAffected = Symbol("dartx.rowsAffected"),
    _item_1: dart.privateName(web_sql, "_item_1"),
    _executeSql: dart.privateName(web_sql, "_executeSql"),
    $executeSql: dartx.executeSql = Symbol("dartx.executeSql")
  };
  var S$5 = {
    _: () => S$5
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S, S$, S$0, S$1, S$2, S$3, S$4, S$5);
  const CT = Object.create({
    _: () => (C, CT)
  });
  var C = Array(946).fill(void 0);
  var I = [
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/classes.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/errors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/operations.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/rtti.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/runtime.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/types.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/ddc_runtime/utils.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/core_patch.dart",
    "dart:core",
    "dart:_runtime",
    "org-dartlang-sdk:///dart-sdk/lib/core/invocation.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/debugger.dart",
    "dart:_debugger",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/profile.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/foreign_helper.dart",
    "dart:_foreign_helper",
    "dart:_interceptors",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/interceptors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_array.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_number.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_string.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/internal.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/list.dart",
    "dart:collection",
    "dart:_internal",
    "org-dartlang-sdk:///dart-sdk/lib/core/num.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/async_cast.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream.dart",
    "dart:async",
    "org-dartlang-sdk:///dart-sdk/lib/convert/converter.dart",
    "dart:convert",
    "org-dartlang-sdk:///dart-sdk/lib/internal/bytes_builder.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/cast.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/iterable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/maps.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/errors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/iterable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/linked_list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/iterable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/sort.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/internal_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/internal/symbol.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/isolate_helper.dart",
    "dart:_isolate_helper",
    "dart:_js_helper",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/annotations.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/linked_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/identity_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/custom_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/regexp_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/string_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_rti.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/native_helper.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/js_primitives.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/metadata.dart",
    "dart:_metadata",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/private/native_typed_data.dart",
    "dart:_native_typed_data",
    "dart:typed_data",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/async_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/async_error.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/broadcast_stream_controller.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_controller.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/deferred_load.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/future.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/future_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/schedule_microtask.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_pipe.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/stream_transformers.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/timer.dart",
    "org-dartlang-sdk:///dart-sdk/lib/async/zone.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/collection_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/collections.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/hash_set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/iterator.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/linked_hash_map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/linked_hash_set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/linked_list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/queue.dart",
    "org-dartlang-sdk:///dart-sdk/lib/collection/splay_tree.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/convert_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/string_conversion.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/ascii.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/encoding.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/codec.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/byte_conversion.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/base64.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/chunked_conversion.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/html_escape.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/json.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/latin1.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/line_splitter.dart",
    "org-dartlang-sdk:///dart-sdk/lib/convert/utf.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/developer_patch.dart",
    "dart:developer",
    "org-dartlang-sdk:///dart-sdk/lib/developer/extension.dart",
    "org-dartlang-sdk:///dart-sdk/lib/developer/profiler.dart",
    "org-dartlang-sdk:///dart-sdk/lib/developer/service.dart",
    "org-dartlang-sdk:///dart-sdk/lib/developer/timeline.dart",
    "dart:io",
    "org-dartlang-sdk:///dart-sdk/lib/io/common.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/io_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/data_transformer.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/directory.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/directory_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/file_system_entity.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/embedder_config.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/file.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/file_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/io_resource_info.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/io_sink.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/link.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/network_policy.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/network_profiling.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/overrides.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/platform_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/process.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/secure_server_socket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/secure_socket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/socket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/security_context.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/service_object.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/stdio.dart",
    "org-dartlang-sdk:///dart-sdk/lib/io/string_transformer.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/isolate_patch.dart",
    "dart:isolate",
    "org-dartlang-sdk:///dart-sdk/lib/isolate/isolate.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/js_patch.dart",
    "dart:js",
    "org-dartlang-sdk:///dart-sdk/lib/js/js.dart",
    "org-dartlang-sdk:///dart-sdk/lib/js_util/js_util.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/math_patch.dart",
    "dart:math",
    "org-dartlang-sdk:///dart-sdk/lib/math/point.dart",
    "org-dartlang-sdk:///dart-sdk/lib/math/rectangle.dart",
    "org-dartlang-sdk:///dart-sdk/lib/typed_data/typed_data.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_internal/js_dev_runtime/patch/typed_data_patch.dart",
    "org-dartlang-sdk:///dart-sdk/lib/typed_data/unmodifiable_typed_data.dart",
    "org-dartlang-sdk:///dart-sdk/lib/indexed_db/dart2js/indexed_db_dart2js.dart",
    "dart:indexed_db",
    "org-dartlang-sdk:///dart-sdk/lib/html/dart2js/html_dart2js.dart",
    "dart:html",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/css_class_set.dart",
    "dart:html_common",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/conversions.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/conversions_dart2js.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/device.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/filtered_element_list.dart",
    "org-dartlang-sdk:///dart-sdk/lib/html/html_common/lists.dart",
    "org-dartlang-sdk:///dart-sdk/lib/svg/dart2js/svg_dart2js.dart",
    "dart:svg",
    "org-dartlang-sdk:///dart-sdk/lib/web_audio/dart2js/web_audio_dart2js.dart",
    "dart:web_audio",
    "dart:web_gl",
    "org-dartlang-sdk:///dart-sdk/lib/web_gl/dart2js/web_gl_dart2js.dart",
    "org-dartlang-sdk:///dart-sdk/lib/web_sql/dart2js/web_sql_dart2js.dart",
    "dart:web_sql",
    "org-dartlang-sdk:///dart-sdk/lib/core/map.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/annotations.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/bool.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/comparable.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/date_time.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/duration.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/errors.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/exceptions.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/set.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/stacktrace.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/string.dart",
    "org-dartlang-sdk:///dart-sdk/lib/core/uri.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/ui.dart",
    "dart:ui",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/channel_buffers.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/compositing.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/geometry.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/hash_codes.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/painting.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/path.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/path_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/platform_dispatcher.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/pointer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/semantics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/text.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/tile_mode.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/window.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/initialization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/lerp.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/ui/src/ui/test_embedding.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine.dart",
    "dart:_engine",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/alarm_clock.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/assets.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/bitmap_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/browser_detection.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/canvaskit_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/canvaskit_api.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/color_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/skia_object_cache.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/embedded_views.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/fonts.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/font_fallbacks.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/image.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/image_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/interval_tree.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/layer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/layer_scene_builder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/layer_tree.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/mask_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/n_way_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/path.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/painting.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/path_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/picture.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/picture_recorder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/platform_message.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/raster_cache.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/rasterizer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/shader.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/surface.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/text.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/util.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/vertices.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/viewport_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvas_pool.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/clipboard.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/dom_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/engine_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/dom_renderer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/frame_reference.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/navigation/history.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/navigation/url_strategy.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/backdrop_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/surface.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/clip.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/color_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/debug_canvas_reuse_overlay.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/image_filter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/offset.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/opacity.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/painting.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/conic.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/cubic.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_metrics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_ref.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_utils.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_windings.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/picture.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/platform_view.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/recording_canvas.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/render_vertices.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/scene.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/scene_builder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/shaders/normalized_gradient.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/shaders/shader.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/shaders/shader_builder.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/surface_stats.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/transform.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html_image_codec.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/keyboard.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/onscreen_logging.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/picture.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/platform_dispatcher.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/pointer_binding.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/pointer_converter.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/profiler.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/rrect_renderer.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/accessibility.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/checkable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/semantics.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/image.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/incrementable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/label_and_value.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/live_region.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/scrollable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/semantics_helper.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/tappable.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/semantics/text_field.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/text_editing.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/buffers.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/message_codec.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/message_codecs.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/services/serialization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/shadow.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/test_embedding.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/font_collection.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/layout_service.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/line_break_properties.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/line_breaker.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/measurement.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/paint_service.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/paragraph.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/canvas_paragraph.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/ruler.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/unicode_range.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/word_break_properties.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text/word_breaker.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/autofill_hint.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/input_type.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/text_editing/text_capitalization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/ulps.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/util.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/vector_math.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/web_experiments.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/window.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/canvaskit/initialization.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/path_to_svg.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/html/path/tangent.dart",
    "org-dartlang-sdk:///flutter_web_sdk/lib/_engine/engine/validators.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http.dart",
    "dart:_http",
    "org-dartlang-sdk:///dart-sdk/lib/_http/crypto.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_date.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_headers.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_impl.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_parser.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/http_session.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/overrides.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/websocket.dart",
    "org-dartlang-sdk:///dart-sdk/lib/_http/websocket_impl.dart",
    "dart:_js_annotations"
  ];
  var _jsError$ = dart.privateName(dart, "_jsError");
  var _type$ = dart.privateName(dart, "_type");
  dart.applyMixin = function applyMixin(to, from) {
    to[dart._mixin] = from;
    let toProto = to.prototype;
    let fromProto = from.prototype;
    dart._copyMembers(toProto, fromProto);
    dart._mixinSignature(to, from, dart._methodSig);
    dart._mixinSignature(to, from, dart._fieldSig);
    dart._mixinSignature(to, from, dart._getterSig);
    dart._mixinSignature(to, from, dart._setterSig);
    let mixinOnFn = from[dart.mixinOn];
    if (mixinOnFn != null) {
      let proto = mixinOnFn(to.__proto__).prototype;
      dart._copyMembers(toProto, proto);
    }
  };
  dart._copyMembers = function _copyMembers(to, from) {
    let names = dart.getOwnNamesAndSymbols(from);
    for (let i = 0, n = names.length; i < n; i = i + 1) {
      let name = names[i];
      if (name === "constructor") continue;
      dart._copyMember(to, from, name);
    }
    return to;
  };
  dart._copyMember = function _copyMember(to, from, name) {
    let desc = dart.getOwnPropertyDescriptor(from, name);
    if (name == Symbol.iterator) {
      let existing = dart.getOwnPropertyDescriptor(to, name);
      if (existing != null) {
        if (existing.writable) {
          to[name] = desc.value;
        }
        return;
      }
    }
    let getter = desc.get;
    let setter = desc.set;
    if (getter != null) {
      if (setter == null) {
        let obj = desc.set = {
          __proto__: to.__proto__,
          set [name](x) {
            return super[name] = x;
          }
        };
        desc.set = dart.getOwnPropertyDescriptor(obj, name).set;
      }
    } else if (setter != null) {
      if (getter == null) {
        let obj = desc.get = {
          __proto__: to.__proto__,
          get [name]() {
            return super[name];
          }
        };
        desc.get = dart.getOwnPropertyDescriptor(obj, name).get;
      }
    }
    dart.defineProperty(to, name, desc);
  };
  dart._mixinSignature = function _mixinSignature(to, from, kind) {
    to[kind] = () => {
      let baseMembers = dart._getMembers(to.__proto__, kind);
      let fromMembers = dart._getMembers(from, kind);
      if (fromMembers == null) return baseMembers;
      let toSignature = {__proto__: baseMembers};
      dart.copyProperties(toSignature, fromMembers);
      return toSignature;
    };
  };
  dart.getMixin = function getMixin(clazz) {
    return Object.hasOwnProperty.call(clazz, dart._mixin) ? clazz[dart._mixin] : null;
  };
  dart.getImplements = function getImplements(clazz) {
    return Object.hasOwnProperty.call(clazz, dart.implements) ? clazz[dart.implements] : null;
  };
  dart.normalizeFutureOr = function normalizeFutureOr(typeConstructor, setBaseClass) {
    let genericFutureOrType = dart.generic(typeConstructor, setBaseClass);
    function normalize(typeArg) {
      if (typeArg == void 0) return dart.dynamic;
      if (dart._isTop(typeArg) || typeArg === core.Object || typeArg instanceof dart.LegacyType && typeArg.type === core.Object) {
        return typeArg;
      }
      if (typeArg === dart.Never) {
        return async.Future$(typeArg);
      }
      if (typeArg === core.Null) {
        return dart.nullable(async.Future$(typeArg));
      }
      let genericType = genericFutureOrType(typeArg);
      genericType[dart._originalDeclaration] = normalize;
      dart.addTypeCaches(genericType);
      function is_FutureOr(obj) {
        return typeArg.is(obj) || async.Future$(typeArg).is(obj);
      }
      genericType.is = is_FutureOr;
      function as_FutureOr(obj) {
        if (obj == null && typeArg instanceof dart.LegacyType) {
          return obj;
        }
        if (typeArg.is(obj) || async.Future$(typeArg).is(obj)) {
          return obj;
        }
        return dart.as(obj, async.FutureOr$(typeArg));
      }
      genericType.as = as_FutureOr;
      return genericType;
    }
    return normalize;
  };
  dart.generic = function generic(typeConstructor, setBaseClass) {
    let length = typeConstructor.length;
    if (length < 1) {
      dart.throwInternalError('must have at least one generic type argument');
    }
    let resultMap = new Map();
    function makeGenericType(...args) {
      if (args.length != length && args.length != 0) {
        dart.throwInternalError('requires ' + length + ' or 0 type arguments');
      }
      while (args.length < length)
        args.push(dart.dynamic);
      let value = resultMap;
      for (let i = 0; i < length; i++) {
        let arg = args[i];
        if (arg == null) {
          dart.throwInternalError('type arguments should not be null: ' + typeConstructor);
        }
        let map = value;
        value = map.get(arg);
        if (value === void 0) {
          if (i + 1 == length) {
            value = typeConstructor.apply(null, args);
            if (value) {
              value[dart._typeArguments] = args;
              value[dart._originalDeclaration] = makeGenericType;
            }
            map.set(arg, value);
            if (setBaseClass != null) setBaseClass.apply(null, args);
          } else {
            value = new Map();
            map.set(arg, value);
          }
        }
      }
      return value;
    }
    makeGenericType[dart._genericTypeCtor] = typeConstructor;
    dart.addTypeCaches(makeGenericType);
    return makeGenericType;
  };
  dart.getGenericClass = function getGenericClass(type) {
    return dart.safeGetOwnProperty(type, dart._originalDeclaration);
  };
  dart.getGenericArgs = function getGenericArgs(type) {
    return dart.safeGetOwnProperty(type, dart._typeArguments);
  };
  dart.getGenericArgVariances = function getGenericArgVariances(type) {
    return dart.safeGetOwnProperty(type, dart._variances);
  };
  dart.setGenericArgVariances = function setGenericArgVariances(f, variances) {
    return f[dart._variances] = variances;
  };
  dart.getGenericTypeFormals = function getGenericTypeFormals(genericClass) {
    return dart._typeFormalsFromFunction(dart.getGenericTypeCtor(genericClass));
  };
  dart.instantiateClass = function instantiateClass(genericClass, typeArgs) {
    if (genericClass == null) dart.nullFailed(I[0], 287, 32, "genericClass");
    if (typeArgs == null) dart.nullFailed(I[0], 287, 59, "typeArgs");
    return genericClass.apply(null, typeArgs);
  };
  dart.getConstructors = function getConstructors(value) {
    return dart._getMembers(value, dart._constructorSig);
  };
  dart.getMethods = function getMethods(value) {
    return dart._getMembers(value, dart._methodSig);
  };
  dart.getFields = function getFields(value) {
    return dart._getMembers(value, dart._fieldSig);
  };
  dart.getGetters = function getGetters(value) {
    return dart._getMembers(value, dart._getterSig);
  };
  dart.getSetters = function getSetters(value) {
    return dart._getMembers(value, dart._setterSig);
  };
  dart.getStaticMethods = function getStaticMethods(value) {
    return dart._getMembers(value, dart._staticMethodSig);
  };
  dart.getStaticFields = function getStaticFields(value) {
    return dart._getMembers(value, dart._staticFieldSig);
  };
  dart.getStaticGetters = function getStaticGetters(value) {
    return dart._getMembers(value, dart._staticGetterSig);
  };
  dart.getStaticSetters = function getStaticSetters(value) {
    return dart._getMembers(value, dart._staticSetterSig);
  };
  dart.getGenericTypeCtor = function getGenericTypeCtor(value) {
    return value[dart._genericTypeCtor];
  };
  dart.getType = function getType(obj) {
    if (obj == null) return core.Object;
    let constructor = obj.constructor;
    return constructor ? constructor : dart.global.Object.prototype.constructor;
  };
  dart.getLibraryUri = function getLibraryUri(value) {
    return value[dart._libraryUri];
  };
  dart.setLibraryUri = function setLibraryUri(f, uri) {
    return f[dart._libraryUri] = uri;
  };
  dart.isJsInterop = function isJsInterop(obj) {
    if (obj == null) return false;
    if (typeof obj === "function") {
      return obj[dart._runtimeType] == null;
    }
    if (typeof obj !== "object") return false;
    if (obj[dart._extensionType] != null) return false;
    return !(obj instanceof core.Object);
  };
  dart.getMethodType = function getMethodType(type, name) {
    let m = dart.getMethods(type);
    return m != null ? m[name] : null;
  };
  dart.getSetterType = function getSetterType(type, name) {
    let setters = dart.getSetters(type);
    if (setters != null) {
      let type = setters[name];
      if (type != null) {
        return type;
      }
    }
    let fields = dart.getFields(type);
    if (fields != null) {
      let fieldInfo = fields[name];
      if (fieldInfo != null && !fieldInfo.isFinal) {
        return fieldInfo.type;
      }
    }
    return null;
  };
  dart.finalFieldType = function finalFieldType(type, metadata) {
    return {type: type, isFinal: true, metadata: metadata};
  };
  dart.fieldType = function fieldType(type, metadata) {
    return {type: type, isFinal: false, metadata: metadata};
  };
  dart.classGetConstructorType = function classGetConstructorType(cls, name) {
    if (cls == null) return null;
    if (name == null) name = "new";
    let ctors = dart.getConstructors(cls);
    return ctors != null ? ctors[name] : null;
  };
  dart.setMethodSignature = function setMethodSignature(f, sigF) {
    return f[dart._methodSig] = sigF;
  };
  dart.setFieldSignature = function setFieldSignature(f, sigF) {
    return f[dart._fieldSig] = sigF;
  };
  dart.setGetterSignature = function setGetterSignature(f, sigF) {
    return f[dart._getterSig] = sigF;
  };
  dart.setSetterSignature = function setSetterSignature(f, sigF) {
    return f[dart._setterSig] = sigF;
  };
  dart.setConstructorSignature = function setConstructorSignature(f, sigF) {
    return f[dart._constructorSig] = sigF;
  };
  dart.setStaticMethodSignature = function setStaticMethodSignature(f, sigF) {
    return f[dart._staticMethodSig] = sigF;
  };
  dart.setStaticFieldSignature = function setStaticFieldSignature(f, sigF) {
    return f[dart._staticFieldSig] = sigF;
  };
  dart.setStaticGetterSignature = function setStaticGetterSignature(f, sigF) {
    return f[dart._staticGetterSig] = sigF;
  };
  dart.setStaticSetterSignature = function setStaticSetterSignature(f, sigF) {
    return f[dart._staticSetterSig] = sigF;
  };
  dart._getMembers = function _getMembers(type, kind) {
    let sig = type[kind];
    return typeof sig == "function" ? type[kind] = sig() : sig;
  };
  dart._hasMember = function _hasMember(type, kind, name) {
    let sig = dart._getMembers(type, kind);
    return sig != null && name in sig;
  };
  dart.hasMethod = function hasMethod(type, name) {
    return dart._hasMember(type, dart._methodSig, name);
  };
  dart.hasGetter = function hasGetter(type, name) {
    return dart._hasMember(type, dart._getterSig, name);
  };
  dart.hasSetter = function hasSetter(type, name) {
    return dart._hasMember(type, dart._setterSig, name);
  };
  dart.hasField = function hasField(type, name) {
    return dart._hasMember(type, dart._fieldSig, name);
  };
  dart._installProperties = function _installProperties(jsProto, dartType, installedParent) {
    if (dartType === core.Object) {
      dart._installPropertiesForObject(jsProto);
      return;
    }
    let dartSupertype = dartType.__proto__;
    if (dartSupertype !== installedParent) {
      dart._installProperties(jsProto, dartSupertype, installedParent);
    }
    let dartProto = dartType.prototype;
    dart.copyTheseProperties(jsProto, dartProto, dart.getOwnPropertySymbols(dartProto));
  };
  dart._installPropertiesForObject = function _installPropertiesForObject(jsProto) {
    let coreObjProto = core.Object.prototype;
    let names = dart.getOwnPropertyNames(coreObjProto);
    for (let i = 0, n = names.length; i < n; i = i + 1) {
      let name = names[i];
      if (name === "constructor") continue;
      let desc = dart.getOwnPropertyDescriptor(coreObjProto, name);
      dart.defineProperty(jsProto, dart.dartx[name], desc);
    }
  };
  dart._installPropertiesForGlobalObject = function _installPropertiesForGlobalObject(jsProto) {
    dart._installPropertiesForObject(jsProto);
    jsProto[dartx.toString] = function() {
      return this.toString();
    };
    dart.identityEquals == null ? dart.identityEquals = jsProto[dartx._equals] : null;
  };
  dart._applyExtension = function _applyExtension(jsType, dartExtType) {
    if (jsType == null) return;
    let jsProto = jsType.prototype;
    if (jsProto == null) return;
    if (dartExtType === core.Object) {
      dart._installPropertiesForGlobalObject(jsProto);
      return;
    }
    if (jsType === dart.global.Object) {
      let extName = dartExtType.name;
      dart._warn("Attempting to install properties from non-Object type '" + extName + "' onto the native JS Object.");
      return;
    }
    dart._installProperties(jsProto, dartExtType, jsProto[dart._extensionType]);
    if (dartExtType !== _interceptors.JSFunction) {
      jsProto[dart._extensionType] = dartExtType;
    }
    jsType[dart._methodSig] = dartExtType[dart._methodSig];
    jsType[dart._fieldSig] = dartExtType[dart._fieldSig];
    jsType[dart._getterSig] = dartExtType[dart._getterSig];
    jsType[dart._setterSig] = dartExtType[dart._setterSig];
  };
  dart.applyExtension = function applyExtension(name, nativeObject) {
    let dartExtType = dart._extensionMap.get(name);
    let jsType = nativeObject.constructor;
    dart._applyExtension(jsType, dartExtType);
  };
  dart.applyAllExtensions = function applyAllExtensions(global) {
    dart._extensionMap.forEach((dartExtType, name) => dart._applyExtension(global[name], dartExtType));
  };
  dart.registerExtension = function registerExtension(name, dartExtType) {
    dart._extensionMap.set(name, dartExtType);
    let jsType = dart.global[name];
    dart._applyExtension(jsType, dartExtType);
  };
  dart.applyExtensionForTesting = function applyExtensionForTesting(name) {
    let dartExtType = dart._extensionMap.get(name);
    let jsType = dart.global[name];
    dart._applyExtension(jsType, dartExtType);
  };
  dart.defineExtensionMethods = function defineExtensionMethods(type, memberNames) {
    if (memberNames == null) dart.nullFailed(I[0], 563, 39, "memberNames");
    let proto = type.prototype;
    for (let name of memberNames) {
      proto[dartx[name]] = proto[name];
    }
  };
  dart.defineExtensionAccessors = function defineExtensionAccessors(type, memberNames) {
    if (memberNames == null) dart.nullFailed(I[0], 571, 46, "memberNames");
    let proto = type.prototype;
    for (let name of memberNames) {
      let member = null;
      let p = proto;
      for (;; p = p.__proto__) {
        member = dart.getOwnPropertyDescriptor(p, name);
        if (member != null) break;
      }
      dart.defineProperty(proto, dartx[name], member);
    }
  };
  dart.definePrimitiveHashCode = function definePrimitiveHashCode(proto) {
    dart.defineProperty(proto, dart.identityHashCode_, dart.getOwnPropertyDescriptor(proto, $hashCode));
  };
  dart.setBaseClass = function setBaseClass(derived, base) {
    derived.prototype.__proto__ = base.prototype;
    derived.__proto__ = base;
  };
  dart.setExtensionBaseClass = function setExtensionBaseClass(dartType, jsType) {
    let dartProto = dartType.prototype;
    dartProto[dart._extensionType] = dartType;
    dartProto.__proto__ = jsType.prototype;
  };
  dart.addTypeTests = function addTypeTests(ctor, isClass) {
    if (isClass == null) isClass = Symbol("_is_" + ctor.name);
    ctor.prototype[isClass] = true;
    ctor.is = function is_C(obj) {
      return obj != null && (obj[isClass] || dart.is(obj, this));
    };
    ctor.as = function as_C(obj) {
      if (obj != null && obj[isClass]) return obj;
      return dart.as(obj, this);
    };
  };
  dart.addTypeCaches = function addTypeCaches(type) {
    type[dart._cachedLegacy] = void 0;
    type[dart._cachedNullable] = void 0;
    let subtypeCacheMap = new Map();
    type[dart._subtypeCache] = subtypeCacheMap;
    dart._cacheMaps.push(subtypeCacheMap);
  };
  dart.argumentError = function argumentError(value) {
    dart.throw(new core.ArgumentError.value(value));
  };
  dart.throwUnimplementedError = function throwUnimplementedError(message) {
    if (message == null) dart.nullFailed(I[1], 16, 32, "message");
    dart.throw(new core.UnimplementedError.new(message));
  };
  dart.throwDeferredIsLoadedError = function throwDeferredIsLoadedError(enclosingLibrary, importPrefix) {
    dart.throw(new _js_helper.DeferredNotLoadedError.new(enclosingLibrary, importPrefix));
  };
  dart.assertFailed = function assertFailed(message, fileUri = null, line = null, column = null, conditionSource = null) {
    dart.throw(new _js_helper.AssertionErrorImpl.new(message, fileUri, line, column, conditionSource));
  };
  dart._checkModuleNullSafetyMode = function _checkModuleNullSafetyMode(isModuleSound) {
    if (isModuleSound !== false) {
      let sdkMode = false ? "sound" : "unsound";
      let moduleMode = isModuleSound ? "sound" : "unsound";
      dart.throw(new core.AssertionError.new("The null safety mode of the Dart SDK module " + "(" + sdkMode + ") does not match the null safety mode of this module " + "(" + moduleMode + ")."));
    }
  };
  dart._nullFailedMessage = function _nullFailedMessage(variableName) {
    return "A null value was passed into a non-nullable parameter: " + dart.str(variableName) + ".";
  };
  dart.nullFailed = function nullFailed(fileUri, line, column, variable) {
    if (dart._nonNullAsserts) {
      dart.throw(new _js_helper.AssertionErrorImpl.new(dart._nullFailedMessage(variable), fileUri, line, column, dart.str(variable) + " != null"));
    }
    let key = dart.str(fileUri) + ":" + dart.str(line) + ":" + dart.str(column);
    if (!dart._nullFailedSet.has(key)) {
      dart._nullFailedSet.add(key);
      dart._nullWarn(dart._nullFailedMessage(variable));
    }
  };
  dart.throwLateInitializationError = function throwLateInitializationError(name) {
    if (name == null) dart.nullFailed(I[1], 66, 37, "name");
    dart.throw(new _internal.LateError.new(name));
  };
  dart.throwCyclicInitializationError = function throwCyclicInitializationError(field = null) {
    dart.throw(new core.CyclicInitializationError.new(field));
  };
  dart.throwNullValueError = function throwNullValueError() {
    dart.throw(new core.NoSuchMethodError.new(null, new _internal.Symbol.new("<Unexpected Null Value>"), null, null));
  };
  dart.castError = function castError(obj, expectedType) {
    let actualType = dart.getReifiedType(obj);
    let message = dart._castErrorMessage(actualType, expectedType);
    dart.throw(new _js_helper.TypeErrorImpl.new(message));
  };
  dart._castErrorMessage = function _castErrorMessage(from, to) {
    return "Expected a value of type '" + dart.typeName(to) + "', " + "but got one of type '" + dart.typeName(from) + "'";
  };
  dart.getThrown = function getThrown(error) {
    if (error != null) {
      let value = error[dart._thrownValue];
      if (value != null) return value;
    }
    return error;
  };
  dart.stackTrace = function stackTrace(error) {
    if (!(error instanceof Error)) {
      return new dart._StackTrace.missing(error);
    }
    let trace = error[dart._stackTrace];
    if (trace != null) return trace;
    return error[dart._stackTrace] = new dart._StackTrace.new(error);
  };
  dart.stackTraceForError = function stackTraceForError(error) {
    if (error == null) dart.nullFailed(I[1], 164, 37, "error");
    return dart.stackTrace(error[dart._jsError]);
  };
  dart.rethrow = function rethrow_(error) {
    if (error == null) dart.nullFailed(I[1], 173, 22, "error");
    throw error;
  };
  dart.throw = function throw_(exception) {
    throw new dart.DartError(exception);
  };
  dart.createErrorWithStack = function createErrorWithStack(exception, trace) {
    if (exception == null) dart.nullFailed(I[1], 256, 37, "exception");
    if (trace == null) {
      let error = exception[dart._jsError];
      return error != null ? error : new dart.DartError(exception);
    }
    if (dart._StackTrace.is(trace)) {
      let originalError = trace[_jsError$];
      if (core.identical(exception, dart.getThrown(originalError))) {
        return originalError;
      }
    }
    return new dart.RethrownDartError(exception, trace);
  };
  dart.stackPrint = function stackPrint(error) {
    if (error == null) dart.nullFailed(I[1], 274, 24, "error");
    console.log(error.stack ? error.stack : "No stack trace for: " + error);
  };
  dart.bind = function bind(obj, name, method) {
    if (obj == null) obj = _interceptors.jsNull;
    if (method == null) method = obj[name];
    let f = method.bind(obj);
    f._boundObject = obj;
    f._boundMethod = method;
    f[dart._runtimeType] = dart.getMethodType(dart.getType(obj), name);
    return f;
  };
  dart.bindCall = function bindCall(obj, name) {
    if (obj == null) return null;
    let ftype = dart.getMethodType(dart.getType(obj), name);
    if (ftype == null) return null;
    let method = obj[name];
    let f = method.bind(obj);
    f._boundObject = obj;
    f._boundMethod = method;
    f[dart._runtimeType] = ftype;
    return f;
  };
  dart.gbind = function gbind(f, ...typeArgs) {
    if (typeArgs == null) dart.nullFailed(I[2], 85, 29, "typeArgs");
    let type = f[dart._runtimeType];
    type.checkBounds(typeArgs);
    let result = (...args) => f.apply(null, typeArgs.concat(args));
    return dart.fn(result, type.instantiate(typeArgs));
  };
  dart.dloadRepl = function dloadRepl(obj, field) {
    return dart.dload(obj, dart.replNameLookup(obj, field));
  };
  dart.dload = function dload(obj, field) {
    if (typeof obj == "function" && field == "call") {
      return obj;
    }
    let f = dart._canonicalMember(obj, field);
    _debugger.trackCall(obj);
    if (f != null) {
      let type = dart.getType(obj);
      if (dart.test(dart.hasField(type, f)) || dart.test(dart.hasGetter(type, f))) return obj[f];
      if (dart.test(dart.hasMethod(type, f))) return dart.bind(obj, f, null);
      if (dart.test(dart.isJsInterop(obj))) return obj[f];
    }
    return dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [], {isGetter: true}));
  };
  dart._stripGenericArguments = function _stripGenericArguments(type) {
    let genericClass = dart.getGenericClass(type);
    if (genericClass != null) return genericClass();
    return type;
  };
  dart.dputRepl = function dputRepl(obj, field, value) {
    return dart.dput(obj, dart.replNameLookup(obj, field), value);
  };
  dart.dput = function dput(obj, field, value) {
    let f = dart._canonicalMember(obj, field);
    _debugger.trackCall(obj);
    if (f != null) {
      let setterType = dart.getSetterType(dart.getType(obj), f);
      if (setterType != null) {
        return obj[f] = setterType.as(value);
      }
      if (dart.test(dart.isJsInterop(obj))) return obj[f] = value;
    }
    dart.noSuchMethod(obj, new dart.InvocationImpl.new(field, [value], {isSetter: true}));
    return value;
  };
  dart._argumentErrors = function _argumentErrors(type, actuals, namedActuals) {
    if (type == null) dart.nullFailed(I[2], 147, 38, "type");
    if (actuals == null) dart.nullFailed(I[2], 147, 49, "actuals");
    let actualsCount = actuals.length;
    let required = type.args;
    let requiredCount = required.length;
    if (actualsCount < requiredCount) {
      return "Dynamic call with too few arguments. " + "Expected: " + dart.str(requiredCount) + " Actual: " + dart.str(actualsCount);
    }
    let extras = actualsCount - requiredCount;
    let optionals = type.optionals;
    if (extras > optionals.length) {
      return "Dynamic call with too many arguments. " + "Expected: " + dart.str(requiredCount) + " Actual: " + dart.str(actualsCount);
    }
    let names = null;
    let named = type.named;
    let requiredNamed = type.requiredNamed;
    if (namedActuals != null) {
      names = dart.getOwnPropertyNames(namedActuals);
      for (let name of names) {
        if (!(named.hasOwnProperty(name) || requiredNamed.hasOwnProperty(name))) {
          return "Dynamic call with unexpected named argument '" + dart.str(name) + "'.";
        }
      }
    }
    let requiredNames = dart.getOwnPropertyNames(requiredNamed);
    if (dart.test(requiredNames[$isNotEmpty])) {
      let missingRequired = namedActuals == null ? requiredNames : requiredNames[$where](name => !namedActuals.hasOwnProperty(name));
      if (dart.test(missingRequired[$isNotEmpty])) {
        let error = "Dynamic call with missing required named arguments: " + dart.str(missingRequired[$join](", ")) + ".";
        if (!false) {
          dart._nullWarn(error);
        } else {
          return error;
        }
      }
    }
    for (let i = 0; i < requiredCount; i = i + 1) {
      required[i].as(actuals[i]);
    }
    for (let i = 0; i < extras; i = i + 1) {
      optionals[i].as(actuals[i + requiredCount]);
    }
    if (names != null) {
      for (let name of names) {
        (named[name] || requiredNamed[name]).as(namedActuals[name]);
      }
    }
    return null;
  };
  dart._toSymbolName = function _toSymbolName(symbol) {
    let str = symbol.toString();
    return str.substring(7, str.length - 1);
  };
  dart._toDisplayName = function _toDisplayName(name) {
    if (name[0] === '_') {
      switch (name) {
        case '_get':
        {
          return '[]';
        }
        case '_set':
        {
          return '[]=';
        }
        case '_negate':
        {
          return 'unary-';
        }
        case '_constructor':
        case '_prototype':
        {
          return name.substring(1);
        }
      }
    }
    return name;
  };
  dart._dartSymbol = function _dartSymbol(name) {
    return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name), name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name)));
  };
  dart._setterSymbol = function _setterSymbol(name) {
    return typeof name === "symbol" ? dart.const(new _js_helper.PrivateSymbol.new(dart._toSymbolName(name) + "=", name)) : dart.const(new _internal.Symbol.new(dart._toDisplayName(name) + "="));
  };
  dart._checkAndCall = function _checkAndCall(f, ftype, obj, typeArgs, args, named, displayName) {
    _debugger.trackCall(obj);
    let originalTarget = obj === void 0 ? f : obj;
    function callNSM(errorMessage) {
      return dart.noSuchMethod(originalTarget, new dart.InvocationImpl.new(displayName, args, {namedArguments: named, typeArguments: typeArgs || [], isMethod: true, failureMessage: errorMessage}));
    }
    if (f == null) return callNSM('Dynamic call of null.');
    if (!(f instanceof Function)) {
      if (f != null) {
        originalTarget = f;
        f = dart.bindCall(f, dart._canonicalMember(f, "call"));
        ftype = null;
        displayName = "call";
      }
      if (f == null) return callNSM("Dynamic call of object has no instance method 'call'.");
    }
    if (ftype == null) ftype = f[dart._runtimeType];
    if (ftype == null) {
      if (typeArgs != null) {
        dart.throwTypeError('call to JS object `' + obj + '` with type arguments <' + typeArgs + '> is not supported.');
      }
      if (named != null) args.push(named);
      return f.apply(obj, args);
    }
    if (ftype instanceof dart.GenericFunctionType) {
      let formalCount = ftype.formalCount;
      if (typeArgs == null) {
        typeArgs = ftype.instantiateDefaultBounds();
      } else if (typeArgs.length != formalCount) {
        return callNSM('Dynamic call with incorrect number of type arguments. ' + 'Expected: ' + formalCount + ' Actual: ' + typeArgs.length);
      } else {
        ftype.checkBounds(typeArgs);
      }
      ftype = ftype.instantiate(typeArgs);
    } else if (typeArgs != null) {
      return callNSM('Dynamic call with unexpected type arguments. ' + 'Expected: 0 Actual: ' + typeArgs.length);
    }
    let errorMessage = dart._argumentErrors(ftype, args, named);
    if (errorMessage == null) {
      if (typeArgs != null) args = typeArgs.concat(args);
      if (named != null) args.push(named);
      return f.apply(obj, args);
    }
    return callNSM(errorMessage);
  };
  dart.dcall = function dcall(f, args, named = null) {
    return dart._checkAndCall(f, null, void 0, null, args, named, f.name);
  };
  dart.dgcall = function dgcall(f, typeArgs, args, named = null) {
    return dart._checkAndCall(f, null, void 0, typeArgs, args, named, f.name || 'call');
  };
  dart.replNameLookup = function replNameLookup(object, field) {
    let rawField = field;
    if (typeof field == 'symbol') {
      if (field in object) return field;
      field = field.toString();
      field = field.substring('Symbol('.length, field.length - 1);
    } else if (field.charAt(0) != '_') {
      return field;
    }
    if (field in object) return field;
    let proto = object;
    while (proto !== null) {
      let symbols = Object.getOwnPropertySymbols(proto);
      let target = 'Symbol(' + field + ')';
      for (let s = 0; s < symbols.length; s++) {
        let sym = symbols[s];
        if (target == sym.toString()) return sym;
      }
      proto = proto.__proto__;
    }
    return rawField;
  };
  dart.callMethod = function callMethod(obj, name, typeArgs, args, named, displayName) {
    if (typeof obj == "function" && name == "call") {
      return dart.dgcall(obj, typeArgs, args, named);
    }
    let symbol = dart._canonicalMember(obj, name);
    if (symbol == null) {
      return dart.noSuchMethod(obj, new dart.InvocationImpl.new(displayName, T$.ListOfObjectN().as(args), {isMethod: true}));
    }
    let f = obj != null ? obj[symbol] : null;
    let type = dart.getType(obj);
    let ftype = dart.getMethodType(type, symbol);
    return dart._checkAndCall(f, ftype, obj, typeArgs, args, named, displayName);
  };
  dart.dsend = function dsend(obj, method, args, named = null) {
    return dart.callMethod(obj, method, null, args, named, method);
  };
  dart.dgsend = function dgsend(obj, typeArgs, method, args, named = null) {
    return dart.callMethod(obj, method, typeArgs, args, named, method);
  };
  dart.dsendRepl = function dsendRepl(obj, method, args, named = null) {
    return dart.callMethod(obj, dart.replNameLookup(obj, method), null, args, named, method);
  };
  dart.dgsendRepl = function dgsendRepl(obj, typeArgs, method, args, named = null) {
    return dart.callMethod(obj, dart.replNameLookup(obj, method), typeArgs, args, named, method);
  };
  dart.dindex = function dindex(obj, index) {
    return dart.callMethod(obj, "_get", null, [index], null, "[]");
  };
  dart.dsetindex = function dsetindex(obj, index, value) {
    return dart.callMethod(obj, "_set", null, [index, value], null, "[]=");
  };
  dart.is = function instanceOf(obj, type) {
    if (obj == null) {
      return type === core.Null || dart._isTop(type) || type instanceof dart.NullableType;
    }
    return dart.isSubtypeOf(dart.getReifiedType(obj), type);
  };
  dart.as = function cast(obj, type) {
    if (obj == null && !false) {
      dart._nullWarnOnType(type);
      return obj;
    } else {
      let actual = dart.getReifiedType(obj);
      if (dart.isSubtypeOf(actual, type)) return obj;
    }
    return dart.castError(obj, type);
  };
  dart.test = function test(obj) {
    if (obj == null) dart.throw(new _js_helper.BooleanConversionAssertionError.new());
    return obj;
  };
  dart.dtest = function dtest(obj) {
    if (!(typeof obj == 'boolean')) {
      dart.booleanConversionFailed(false ? obj : dart.test(T$.boolN().as(obj)));
      dart.throw(new _internal.ReachabilityError.new("`null` encountered as the result from expression with type `Never`."));
    }
    return obj;
  };
  dart.booleanConversionFailed = function booleanConversionFailed(obj) {
    let actual = dart.typeName(dart.getReifiedType(obj));
    dart.throw(new _js_helper.TypeErrorImpl.new("type '" + actual + "' is not a 'bool' in boolean expression"));
  };
  dart.asInt = function asInt(obj) {
    if (Math.floor(obj) != obj) {
      if (obj == null && !false) {
        dart._nullWarnOnType(core.int);
        return null;
      } else {
        dart.castError(obj, core.int);
      }
    }
    return obj;
  };
  dart.asNullableInt = function asNullableInt(obj) {
    return obj == null ? null : dart.asInt(obj);
  };
  dart.notNull = function _notNull(x) {
    if (x == null) dart.throwNullValueError();
    return x;
  };
  dart.nullCast = function nullCast(x, type) {
    if (x == null) {
      if (!false) {
        dart._nullWarnOnType(type);
      } else {
        dart.castError(x, type);
      }
    }
    return x;
  };
  dart.nullCheck = function nullCheck(x) {
    if (x == null) dart.throw(new _js_helper.TypeErrorImpl.new("Unexpected null value."));
    return x;
  };
  dart._lookupNonTerminal = function _lookupNonTerminal(map, key) {
    if (map == null) dart.nullFailed(I[2], 529, 34, "map");
    let result = map.get(key);
    if (result != null) return result;
    map.set(key, result = new Map());
    return dart.nullCheck(result);
  };
  dart.constMap = function constMap(K, V, elements) {
    if (elements == null) dart.nullFailed(I[2], 536, 34, "elements");
    let count = elements[$length];
    let map = dart._lookupNonTerminal(dart.constantMaps, count);
    for (let i = 0; i < count; i = i + 1) {
      map = dart._lookupNonTerminal(map, elements[i]);
    }
    map = dart._lookupNonTerminal(map, dart.wrapType(K));
    let result = map.get(V);
    if (result != null) return result;
    result = new (_js_helper.ImmutableMap$(K, V)).from(elements);
    map.set(V, result);
    return result;
  };
  dart._createImmutableSet = function _createImmutableSet(E, elements) {
    if (elements == null) dart.nullFailed(I[2], 554, 42, "elements");
    dart._immutableSetConstructor == null ? dart._immutableSetConstructor = dart.getLibrary("dart:collection")._ImmutableSet$ : null;
    return new (dart._immutableSetConstructor(E)).from(elements);
  };
  dart.constSet = function constSet(E, elements) {
    if (elements == null) dart.nullFailed(I[2], 560, 31, "elements");
    let count = elements[$length];
    let map = dart._lookupNonTerminal(dart.constantSets, count);
    for (let i = 0; i < count; i = i + 1) {
      map = dart._lookupNonTerminal(map, elements[i]);
    }
    let result = map.get(E);
    if (result != null) return result;
    result = dart._createImmutableSet(E, elements);
    map.set(E, result);
    return result;
  };
  dart.multiKeyPutIfAbsent = function multiKeyPutIfAbsent(map, keys, valueFn) {
    for (let k of keys) {
      let value = map.get(k);
      if (!value) {
        map.set(k, value = new Map());
      }
      map = value;
    }
    if (map.has(dart._value)) return map.get(dart._value);
    let value = valueFn();
    map.set(dart._value, value);
    return value;
  };
  dart.const = function const_(obj) {
    let names = dart.getOwnNamesAndSymbols(obj);
    let count = names.length;
    let map = dart._lookupNonTerminal(dart.constants, count);
    for (let i = 0; i < count; i++) {
      let name = names[i];
      map = dart._lookupNonTerminal(map, name);
      map = dart._lookupNonTerminal(map, obj[name]);
    }
    let type = dart.getReifiedType(obj);
    let value = map.get(type);
    if (value) return value;
    map.set(type, obj);
    return obj;
  };
  dart.constList = function constList(elements, elementType) {
    let count = elements.length;
    let map = dart._lookupNonTerminal(dart.constantLists, count);
    for (let i = 0; i < count; i++) {
      map = dart._lookupNonTerminal(map, elements[i]);
    }
    let value = map.get(elementType);
    if (value) return value;
    _interceptors.JSArray$(elementType).unmodifiable(elements);
    map.set(elementType, elements);
    return elements;
  };
  dart.constFn = function constFn(x) {
    return () => x;
  };
  dart.extensionSymbol = function extensionSymbol(name) {
    if (name == null) dart.nullFailed(I[2], 678, 24, "name");
    return dartx[name];
  };
  dart.equals = function equals(x, y) {
    return x == null ? y == null : x[$_equals](y);
  };
  dart.hashCode = function hashCode(obj) {
    return obj == null ? 0 : obj[$hashCode];
  };
  dart.toString = function _toString(obj) {
    if (obj == null) return "null";
    if (typeof obj == 'string') return obj;
    return obj[$toString]();
  };
  dart.str = function str(obj) {
    if (obj == null) return "null";
    if (typeof obj == 'string') return obj;
    return core.String.as(dart.notNull(obj[$toString]()));
  };
  dart.noSuchMethod = function noSuchMethod(obj, invocation) {
    if (invocation == null) dart.nullFailed(I[2], 714, 30, "invocation");
    if (obj == null) dart.defaultNoSuchMethod(obj, invocation);
    return obj[$noSuchMethod](invocation);
  };
  dart.defaultNoSuchMethod = function defaultNoSuchMethod(obj, i) {
    if (i == null) dart.nullFailed(I[2], 720, 37, "i");
    dart.throw(new core.NoSuchMethodError.withInvocation(obj, i));
  };
  dart.runtimeType = function runtimeType(obj) {
    return obj == null ? dart.wrapType(core.Null) : obj[dartx.runtimeType];
  };
  dart._canonicalMember = function _canonicalMember(obj, name) {
    if (typeof name === "symbol") return name;
    if (obj != null && obj[dart._extensionType] != null) {
      return dartx[name];
    }
    if (name == "constructor" || name == "prototype") {
      name = "+" + name;
    }
    return name;
  };
  dart.loadLibrary = function loadLibrary(enclosingLibrary, importPrefix) {
    let result = dart.deferredImports.get(enclosingLibrary);
    if (dart.test(result === void 0)) {
      dart.deferredImports.set(enclosingLibrary, result = new Set());
    }
    result.add(importPrefix);
    return async.Future.value();
  };
  dart.checkDeferredIsLoaded = function checkDeferredIsLoaded(enclosingLibrary, importPrefix) {
    let loaded = dart.deferredImports.get(enclosingLibrary);
    if (dart.test(loaded === void 0) || dart.test(!loaded.has(importPrefix))) {
      dart.throwDeferredIsLoadedError(enclosingLibrary, importPrefix);
    }
  };
  dart.defineLazy = function defineLazy(to, from, useOldSemantics) {
    if (useOldSemantics == null) dart.nullFailed(I[2], 795, 32, "useOldSemantics");
    for (let name of dart.getOwnNamesAndSymbols(from)) {
      if (dart.test(useOldSemantics)) {
        dart.defineLazyFieldOld(to, name, dart.getOwnPropertyDescriptor(from, name));
      } else {
        dart.defineLazyField(to, name, dart.getOwnPropertyDescriptor(from, name));
      }
    }
  };
  dart.defineLazyField = function defineLazyField(to, name, desc) {
    const initializer = desc.get;
    const final = desc.set == null;
    let initialized = false;
    let init = initializer;
    let value = null;
    let savedLocals = false;
    desc.get = function() {
      if (init == null) return value;
      if (final && initialized) dart.throwLateInitializationError(name);
      if (!savedLocals) {
        dart._resetFields.push(() => {
          init = initializer;
          value = null;
          savedLocals = false;
          initialized = false;
        });
        savedLocals = true;
      }
      initialized = true;
      try {
        value = init();
      } catch (e) {
        initialized = false;
        throw e;
      }
      init = null;
      return value;
    };
    desc.configurable = true;
    if (desc.set != null) {
      desc.set = function(x) {
        init = null;
        value = x;
      };
    }
    return dart.defineProperty(to, name, desc);
  };
  dart.defineLazyFieldOld = function defineLazyFieldOld(to, name, desc) {
    const initializer = desc.get;
    let init = initializer;
    let value = null;
    desc.get = function() {
      if (init == null) return value;
      let f = init;
      init = dart.throwCyclicInitializationError;
      if (f === init) f(name);
      dart._resetFields.push(() => {
        init = initializer;
        value = null;
      });
      try {
        value = f();
        init = null;
        return value;
      } catch (e) {
        init = null;
        value = null;
        throw e;
      }
    };
    desc.configurable = true;
    if (desc.set != null) {
      desc.set = function(x) {
        init = null;
        value = x;
      };
    }
    return dart.defineProperty(to, name, desc);
  };
  dart.checkNativeNonNull = function checkNativeNonNull(variable) {
    if (dart._nativeNonNullAsserts && variable == null) {
      dart.throw(new _js_helper.TypeErrorImpl.new("      Unexpected null value encountered in Dart web platform libraries.\n      This may be a bug in the Dart SDK APIs. If you would like to report a bug\n      or disable this error, you can use the following instructions:\n      https://github.com/dart-lang/sdk/tree/master/sdk/lib/html/doc/NATIVE_NULL_ASSERTIONS.md\n    "));
    }
    return variable;
  };
  dart.fn = function fn(closure, type) {
    closure[dart._runtimeType] = type;
    return closure;
  };
  dart.lazyFn = function lazyFn(closure, computeType) {
    if (computeType == null) dart.nullFailed(I[3], 63, 35, "computeType");
    dart.defineAccessor(closure, dart._runtimeType, {
      get: () => dart.defineValue(closure, dart._runtimeType, computeType()),
      set: value => dart.defineValue(closure, dart._runtimeType, value),
      configurable: true
    });
    return closure;
  };
  dart.getFunctionType = function getFunctionType(obj) {
    let args = Array(obj.length).fill(dart.dynamic);
    return dart.fnType(dart.bottom, args, void 0);
  };
  dart.getReifiedType = function getReifiedType(obj) {
    switch (typeof obj) {
      case "object":
      {
        if (obj == null) return core.Null;
        if (obj instanceof core.Object) {
          return obj.constructor;
        }
        let result = obj[dart._extensionType];
        if (result == null) return dart.jsobject;
        return result;
      }
      case "function":
      {
        let result = obj[dart._runtimeType];
        if (result != null) return result;
        return dart.jsobject;
      }
      case "undefined":
      {
        return core.Null;
      }
      case "number":
      {
        return Math.floor(obj) == obj ? core.int : core.double;
      }
      case "boolean":
      {
        return core.bool;
      }
      case "string":
      {
        return core.String;
      }
      case "symbol":
      default:
      {
        return dart.jsobject;
      }
    }
  };
  dart.getModuleName = function getModuleName(module) {
    if (module == null) dart.nullFailed(I[3], 117, 30, "module");
    return module[dart._moduleName];
  };
  dart.getModuleNames = function getModuleNames() {
    return Array.from(dart._loadedModules.keys());
  };
  dart.getSourceMap = function getSourceMap(moduleName) {
    if (moduleName == null) dart.nullFailed(I[3], 127, 29, "moduleName");
    return dart._loadedSourceMaps.get(moduleName);
  };
  dart.getModuleLibraries = function getModuleLibraries(name) {
    if (name == null) dart.nullFailed(I[3], 132, 27, "name");
    let module = dart._loadedModules.get(name);
    if (module == null) return null;
    module[dart._moduleName] = name;
    return module;
  };
  dart.getModulePartMap = function getModulePartMap(name) {
    if (name == null) dart.nullFailed(I[3], 140, 25, "name");
    return dart._loadedPartMaps.get(name);
  };
  dart.trackLibraries = function trackLibraries(moduleName, libraries, parts, sourceMap) {
    if (moduleName == null) dart.nullFailed(I[3], 144, 12, "moduleName");
    if (libraries == null) dart.nullFailed(I[3], 144, 31, "libraries");
    if (parts == null) dart.nullFailed(I[3], 144, 49, "parts");
    if (typeof parts == 'string') {
      sourceMap = parts;
      parts = {};
    }
    dart._loadedSourceMaps.set(moduleName, sourceMap);
    dart._loadedModules.set(moduleName, libraries);
    dart._loadedPartMaps.set(moduleName, parts);
    dart._libraries = null;
    dart._libraryObjects = null;
    dart._parts = null;
  };
  dart._computeLibraryMetadata = function _computeLibraryMetadata() {
    dart._libraries = T$.JSArrayOfString().of([]);
    dart._libraryObjects = new (T$.IdentityMapOfString$ObjectN()).new();
    dart._parts = new (T$.IdentityMapOfString$ListNOfString()).new();
    let modules = dart.getModuleNames();
    for (let name of modules) {
      let module = dart.getModuleLibraries(name);
      let libraries = dart.getOwnPropertyNames(module)[$cast](core.String);
      dart.nullCheck(dart._libraries)[$addAll](libraries);
      for (let library of libraries) {
        dart.nullCheck(dart._libraryObjects)[$_set](library, module[library]);
      }
      let partMap = dart.getModulePartMap(name);
      libraries = dart.getOwnPropertyNames(partMap)[$cast](core.String);
      for (let library of libraries) {
        dart.nullCheck(dart._parts)[$_set](library, T$.ListOfString().from(partMap[library]));
      }
    }
  };
  dart.getLibrary = function getLibrary(uri) {
    if (uri == null) dart.nullFailed(I[3], 192, 27, "uri");
    if (dart._libraryObjects == null) {
      dart._computeLibraryMetadata();
    }
    return dart.nullCheck(dart._libraryObjects)[$_get](uri);
  };
  dart.getLibraries = function getLibraries() {
    if (dart._libraries == null) {
      dart._computeLibraryMetadata();
    }
    return dart.nullCheck(dart._libraries);
  };
  dart.getParts = function getParts(libraryUri) {
    let t0;
    if (libraryUri == null) dart.nullFailed(I[3], 222, 30, "libraryUri");
    if (dart._parts == null) {
      dart._computeLibraryMetadata();
    }
    t0 = dart.nullCheck(dart._parts)[$_get](libraryUri);
    return t0 == null ? T$.JSArrayOfString().of([]) : t0;
  };
  dart.polyfill = function polyfill(window) {
    if (window[dart._polyfilled]) return false;
    window[dart._polyfilled] = true;
    if (typeof window.NodeList !== "undefined") {
      window.NodeList.prototype.get = function(i) {
        return this[i];
      };
      window.NamedNodeMap.prototype.get = function(i) {
        return this[i];
      };
      window.DOMTokenList.prototype.get = function(i) {
        return this[i];
      };
      window.HTMLCollection.prototype.get = function(i) {
        return this[i];
      };
      if (typeof window.PannerNode == "undefined") {
        let audioContext;
        if (typeof window.AudioContext == "undefined" && typeof window.webkitAudioContext != "undefined") {
          audioContext = new window.webkitAudioContext();
        } else {
          audioContext = new window.AudioContext();
          window.StereoPannerNode = audioContext.createStereoPanner().constructor;
        }
        window.PannerNode = audioContext.createPanner().constructor;
      }
      if (typeof window.AudioSourceNode == "undefined") {
        window.AudioSourceNode = MediaElementAudioSourceNode.__proto__;
      }
      if (typeof window.FontFaceSet == "undefined") {
        if (typeof window.document.fonts != "undefined") {
          window.FontFaceSet = window.document.fonts.__proto__.constructor;
        }
      }
      if (typeof window.MemoryInfo == "undefined") {
        if (typeof window.performance.memory != "undefined") {
          window.MemoryInfo = function() {
          };
          window.MemoryInfo.prototype = window.performance.memory.__proto__;
        }
      }
      if (typeof window.Geolocation == "undefined") {
        window.Geolocation == window.navigator.geolocation.constructor;
      }
      if (typeof window.Animation == "undefined") {
        let d = window.document.createElement('div');
        if (typeof d.animate != "undefined") {
          window.Animation = d.animate(d).constructor;
        }
      }
      if (typeof window.SourceBufferList == "undefined") {
        if ('MediaSource' in window) {
          window.SourceBufferList = new window.MediaSource().sourceBuffers.constructor;
        }
      }
      if (typeof window.SpeechRecognition == "undefined") {
        window.SpeechRecognition = window.webkitSpeechRecognition;
        window.SpeechRecognitionError = window.webkitSpeechRecognitionError;
        window.SpeechRecognitionEvent = window.webkitSpeechRecognitionEvent;
      }
    }
    return true;
  };
  dart.trackProfile = function trackProfile(flag) {
    if (flag == null) dart.nullFailed(I[4], 141, 24, "flag");
    dart.__trackProfile = flag;
  };
  dart.setStartAsyncSynchronously = function setStartAsyncSynchronously(value = true) {
    if (value == null) dart.nullFailed(I[4], 166, 39, "value");
    dart.startAsyncSynchronously = value;
  };
  dart.hotRestart = function hotRestart() {
    dart.hotRestartIteration = dart.notNull(dart.hotRestartIteration) + 1;
    for (let f of dart._resetFields)
      f();
    dart._resetFields[$clear]();
    for (let m of dart._cacheMaps)
      m.clear();
    dart._cacheMaps[$clear]();
    dart._nullComparisonSet.clear();
    dart.constantMaps.clear();
    dart.deferredImports.clear();
  };
  dart._throwInvalidFlagError = function _throwInvalidFlagError(message) {
    if (message == null) dart.nullFailed(I[5], 15, 31, "message");
    return dart.throw(new core.UnsupportedError.new("Invalid flag combination.\n" + dart.str(message)));
  };
  dart.weakNullSafetyWarnings = function weakNullSafetyWarnings(showWarnings) {
    if (showWarnings == null) dart.nullFailed(I[5], 25, 34, "showWarnings");
    if (dart.test(showWarnings) && false) {
      dart._throwInvalidFlagError("Null safety violations cannot be shown as warnings when running with " + "sound null safety.");
    }
    dart._weakNullSafetyWarnings = showWarnings;
  };
  dart.weakNullSafetyErrors = function weakNullSafetyErrors(showErrors) {
    if (showErrors == null) dart.nullFailed(I[5], 42, 32, "showErrors");
    if (dart.test(showErrors) && false) {
      dart._throwInvalidFlagError("Null safety violations are already thrown as errors when running with " + "sound null safety.");
    }
    if (dart.test(showErrors) && dart._weakNullSafetyWarnings) {
      dart._throwInvalidFlagError("Null safety violations can be shown as warnings or thrown as errors, " + "not both.");
    }
    dart._weakNullSafetyErrors = showErrors;
  };
  dart.nonNullAsserts = function nonNullAsserts(enable) {
    if (enable == null) dart.nullFailed(I[5], 66, 26, "enable");
    dart._nonNullAsserts = enable;
  };
  dart.nativeNonNullAsserts = function nativeNonNullAsserts(enable) {
    if (enable == null) dart.nullFailed(I[5], 78, 32, "enable");
    dart._nativeNonNullAsserts = enable;
  };
  dart._isJsObject = function _isJsObject(obj) {
    return dart.getReifiedType(obj) === dart.jsobject;
  };
  dart.assertInterop = function assertInterop(f) {
    if (f == null) dart.nullFailed(I[5], 164, 39, "f");
    if (!(dart._isJsObject(f) || !(f instanceof dart.global.Function))) dart.assertFailed("Dart function requires `allowInterop` to be passed to JavaScript.", I[5], 166, 7, "_isJsObject(f) ||\n          !JS<bool>('bool', '# instanceof #.Function', f, global_)");
    return f;
  };
  dart.isDartFunction = function isDartFunction(obj) {
    return obj instanceof Function && obj[dart._runtimeType] != null;
  };
  dart.tearoffInterop = function tearoffInterop(f) {
    if (!dart._isJsObject(f) || f == null) return f;
    let ret = dart._assertInteropExpando._get(f);
    if (ret == null) {
      ret = function(...arguments$) {
        var args = arguments$.map(dart.assertInterop);
        return f.apply(this, args);
      };
      dart._assertInteropExpando._set(f, ret);
    }
    return ret;
  };
  dart._warn = function _warn(arg) {
    console.warn(arg);
  };
  dart._nullWarn = function _nullWarn(message) {
    if (dart._weakNullSafetyWarnings) {
      dart._warn(dart.str(message) + "\n" + "This will become a failure when runtime null safety is enabled.");
    } else if (dart._weakNullSafetyErrors) {
      dart.throw(new _js_helper.TypeErrorImpl.new(core.String.as(message)));
    }
  };
  dart._nullWarnOnType = function _nullWarnOnType(type) {
    let result = dart._nullComparisonSet.has(type);
    if (!dart.test(result)) {
      dart._nullComparisonSet.add(type);
      dart._nullWarn("Null is not a subtype of " + dart.str(type) + ".");
    }
  };
  dart.lazyJSType = function lazyJSType(getJSTypeCallback, name) {
    if (getJSTypeCallback == null) dart.nullFailed(I[5], 304, 23, "getJSTypeCallback");
    if (name == null) dart.nullFailed(I[5], 304, 49, "name");
    let ret = dart._lazyJSTypes.get(name);
    if (ret == null) {
      ret = new dart.LazyJSType.new(getJSTypeCallback, name);
      dart._lazyJSTypes.set(name, ret);
    }
    return ret;
  };
  dart.anonymousJSType = function anonymousJSType(name) {
    if (name == null) dart.nullFailed(I[5], 313, 24, "name");
    let ret = dart._anonymousJSTypes.get(name);
    if (ret == null) {
      ret = new dart.AnonymousJSType.new(name);
      dart._anonymousJSTypes.set(name, ret);
    }
    return ret;
  };
  dart.nullable = function nullable(type) {
    let cached = type[dart._cachedNullable];
    if (cached !== void 0) {
      return cached;
    }
    let cachedType = dart._computeNullable(type);
    type[dart._cachedNullable] = cachedType;
    return cachedType;
  };
  dart._computeNullable = function _computeNullable(type) {
    if (type instanceof dart.LegacyType) {
      return dart.nullable(type.type);
    }
    if (type instanceof dart.NullableType || dart._isTop(type) || type === core.Null || dart._isFutureOr(type) && dart.getGenericArgs(type)[0] instanceof dart.NullableType) {
      return type;
    }
    if (type === dart.Never) return core.Null;
    return new dart.NullableType.new(type);
  };
  dart.legacy = function legacy(type) {
    let cached = type[dart._cachedLegacy];
    if (cached !== void 0) {
      return cached;
    }
    let cachedType = dart._computeLegacy(type);
    type[dart._cachedLegacy] = cachedType;
    return cachedType;
  };
  dart._computeLegacy = function _computeLegacy(type) {
    if (type instanceof dart.LegacyType || type instanceof dart.NullableType || dart._isTop(type) || type === core.Null) {
      return type;
    }
    return new dart.LegacyType.new(type);
  };
  dart.wrapType = function wrapType(type, isNormalized = false) {
    if (type.hasOwnProperty(dart._typeObject)) {
      return type[dart._typeObject];
    }
    let result = isNormalized ? new dart._Type.new(core.Object.as(type)) : type instanceof dart.LegacyType ? dart.wrapType(type.type) : dart._canonicalizeNormalizedTypeObject(type);
    type[dart._typeObject] = result;
    return result;
  };
  dart._canonicalizeNormalizedTypeObject = function _canonicalizeNormalizedTypeObject(type) {
    if (!!(type instanceof dart.LegacyType)) dart.assertFailed(null, I[5], 528, 10, "!_jsInstanceOf(type, LegacyType)");
    function normalizeHelper(a) {
      return dart.unwrapType(dart.wrapType(a));
    }
    if (type instanceof dart.GenericFunctionTypeIdentifier) {
      return dart.wrapType(type, true);
    }
    if (type instanceof dart.FunctionType) {
      let normReturnType = normalizeHelper(dart.dload(type, 'returnType'));
      let normArgs = dart.dsend(dart.dsend(dart.dload(type, 'args'), 'map', [normalizeHelper]), 'toList', []);
      if (dart.global.Object.keys(dart.dload(type, 'named')).length === 0 && dart.global.Object.keys(dart.dload(type, 'requiredNamed')).length === 0) {
        if (dart.dtest(dart.dload(dart.dload(type, 'optionals'), 'isEmpty'))) {
          let normType = dart.fnType(normReturnType, core.List.as(normArgs));
          return dart.wrapType(normType, true);
        }
        let normOptionals = dart.dsend(dart.dsend(dart.dload(type, 'optionals'), 'map', [normalizeHelper]), 'toList', []);
        let normType = dart.fnType(normReturnType, core.List.as(normArgs), normOptionals);
        return dart.wrapType(normType, true);
      }
      let normNamed = {};
      dart._transformJSObject(dart.dload(type, 'named'), normNamed, normalizeHelper);
      let normRequiredNamed = {};
      dart._transformJSObject(dart.dload(type, 'requiredNamed'), normRequiredNamed, normalizeHelper);
      let normType = dart.fnType(normReturnType, core.List.as(normArgs), normNamed, normRequiredNamed);
      return dart.wrapType(normType, true);
    }
    if (type instanceof dart.GenericFunctionType) {
      let formals = dart._getCanonicalTypeFormals(core.int.as(dart.dload(dart.dload(type, 'typeFormals'), 'length')));
      let normBounds = core.List.as(dart.dsend(dart.dsend(dart.dsend(type, 'instantiateTypeBounds', [formals]), 'map', [normalizeHelper]), 'toList', []));
      let substitutedTypes = [];
      if (dart.test(normBounds[$contains](dart.Never))) {
        for (let i = 0; i < dart.notNull(formals[$length]); i = i + 1) {
          let substitutedType = normBounds[$_get](i);
          while (dart.test(formals[$contains](substitutedType))) {
            substitutedType = normBounds[$_get](formals[$indexOf](dart.TypeVariable.as(substitutedType)));
          }
          if (dart.equals(substitutedType, dart.Never)) {
            substitutedTypes[$add](dart.Never);
          } else {
            substitutedTypes[$add](formals[$_get](i));
          }
        }
      } else {
        substitutedTypes = formals;
      }
      let normFunc = dart.FunctionType.as(normalizeHelper(dart.dsend(type, 'instantiate', [substitutedTypes])));
      let typeObjectIdKey = [];
      typeObjectIdKey.push(...normBounds);
      typeObjectIdKey.push(normFunc);
      let memoizedId = dart._memoizeArray(dart._gFnTypeTypeMap, typeObjectIdKey, () => new dart.GenericFunctionTypeIdentifier.new(formals, normBounds, normFunc));
      return dart.wrapType(memoizedId, true);
    }
    let args = dart.getGenericArgs(type);
    let normType = null;
    if (args == null || dart.test(args[$isEmpty])) {
      normType = type;
    } else {
      let genericClass = dart.getGenericClass(type);
      let normArgs = args[$map](core.Object, normalizeHelper)[$toList]();
      normType = genericClass(...normArgs);
    }
    return dart.wrapType(normType, true);
  };
  dart._transformJSObject = function _transformJSObject(srcObject, dstObject, transform) {
    if (transform == null) dart.nullFailed(I[5], 610, 56, "transform");
    for (let key of dart.global.Object.keys(srcObject)) {
      dstObject[key] = dart.dcall(transform, [srcObject[key]]);
    }
  };
  dart.unwrapType = function unwrapType(obj) {
    if (obj == null) dart.nullFailed(I[5], 621, 24, "obj");
    return obj[_type$];
  };
  dart._getCanonicalTypeFormals = function _getCanonicalTypeFormals(count) {
    if (count == null) dart.nullFailed(I[5], 666, 49, "count");
    while (dart.notNull(count) > dart.notNull(dart._typeVariablePool[$length])) {
      dart._fillTypeVariable();
    }
    return dart._typeVariablePool[$sublist](0, count);
  };
  dart._fillTypeVariable = function _fillTypeVariable() {
    if (dart.notNull(dart._typeVariablePool[$length]) < 26) {
      dart._typeVariablePool[$add](new dart.TypeVariable.new(core.String.fromCharCode(65 + dart.notNull(dart._typeVariablePool[$length]))));
    } else {
      dart._typeVariablePool[$add](new dart.TypeVariable.new("T" + dart.str(dart.notNull(dart._typeVariablePool[$length]) - 26)));
    }
  };
  dart._memoizeArray = function _memoizeArray(map, arr, create) {
    if (create == null) dart.nullFailed(I[5], 688, 32, "create");
    return (() => {
      let len = arr.length;
      map = dart._lookupNonTerminal(map, len);
      for (var i = 0; i < len - 1; ++i) {
        map = dart._lookupNonTerminal(map, arr[i]);
      }
      let result = map.get(arr[len - 1]);
      if (result !== void 0) return result;
      map.set(arr[len - 1], result = create());
      return result;
    })();
  };
  dart._canonicalizeArray = function _canonicalizeArray(array, map) {
    if (array == null) dart.nullFailed(I[5], 700, 30, "array");
    return dart._memoizeArray(map, array, () => array);
  };
  dart._canonicalizeNamed = function _canonicalizeNamed(named, map) {
    let key = [];
    let names = dart.getOwnPropertyNames(named);
    for (var i = 0; i < names.length; ++i) {
      let name = names[i];
      let type = named[name];
      key.push(name);
      key.push(type);
    }
    return dart._memoizeArray(map, key, () => named);
  };
  dart._createSmall = function _createSmall(returnType, required) {
    if (required == null) dart.nullFailed(I[5], 720, 44, "required");
    return (() => {
      let count = required.length;
      let map = dart._fnTypeSmallMap[count];
      for (var i = 0; i < count; ++i) {
        map = dart._lookupNonTerminal(map, required[i]);
      }
      let result = map.get(returnType);
      if (result !== void 0) return result;
      result = new dart.FunctionType.new(core.Type.as(returnType), required, [], {}, {});
      map.set(returnType, result);
      return result;
    })();
  };
  dart._typeFormalsFromFunction = function _typeFormalsFromFunction(typeConstructor) {
    let str = typeConstructor.toString();
    let hasParens = str[$_get](0) === "(";
    let end = str[$indexOf](hasParens ? ")" : "=>");
    if (hasParens) {
      return str[$substring](1, end)[$split](",")[$map](dart.TypeVariable, n => {
        if (n == null) dart.nullFailed(I[5], 1152, 15, "n");
        return new dart.TypeVariable.new(n[$trim]());
      })[$toList]();
    } else {
      return T$.JSArrayOfTypeVariable().of([new dart.TypeVariable.new(str[$substring](0, end)[$trim]())]);
    }
  };
  dart.fnType = function fnType(returnType, args, optional = null, requiredNamed = null) {
    if (args == null) dart.nullFailed(I[5], 1160, 38, "args");
    return dart.FunctionType.create(returnType, args, optional, requiredNamed);
  };
  dart.gFnType = function gFnType(instantiateFn, typeBounds) {
    return new dart.GenericFunctionType.new(instantiateFn, typeBounds);
  };
  dart.isType = function isType(obj) {
    return obj[dart._runtimeType] === core.Type;
  };
  dart.checkTypeBound = function checkTypeBound(type, bound, name) {
    if (!dart.isSubtypeOf(type, bound)) {
      dart.throwTypeError("type `" + dart.str(type) + "` does not extend `" + dart.str(bound) + "` of `" + name + "`.");
    }
  };
  dart.typeName = function typeName(type) {
    if (type === void 0) return "undefined type";
    if (type === null) return "null type";
    if (type instanceof dart.DartType) {
      return type.toString();
    }
    let tag = type[dart._runtimeType];
    if (tag === core.Type) {
      let name = type.name;
      let args = dart.getGenericArgs(type);
      if (args == null) return name;
      if (dart.getGenericClass(type) == _interceptors.JSArray$) name = 'List';
      let result = name;
      result += '<';
      for (let i = 0; i < args.length; ++i) {
        if (i > 0) result += ', ';
        result += dart.typeName(args[i]);
      }
      result += '>';
      return result;
    }
    if (tag) return "Not a type: " + tag.name;
    return "JSObject<" + type.name + ">";
  };
  dart._isFunctionSubtype = function _isFunctionSubtype(ft1, ft2, strictMode) {
    let ret1 = ft1.returnType;
    let ret2 = ft2.returnType;
    let args1 = ft1.args;
    let args2 = ft2.args;
    if (args1.length > args2.length) {
      return false;
    }
    for (let i = 0; i < args1.length; ++i) {
      if (!dart._isSubtype(args2[i], args1[i], strictMode)) {
        return false;
      }
    }
    let optionals1 = ft1.optionals;
    let optionals2 = ft2.optionals;
    if (args1.length + optionals1.length < args2.length + optionals2.length) {
      return false;
    }
    let j = 0;
    for (let i = args1.length; i < args2.length; ++i, ++j) {
      if (!dart._isSubtype(args2[i], optionals1[j], strictMode)) {
        return false;
      }
    }
    for (let i = 0; i < optionals2.length; ++i, ++j) {
      if (!dart._isSubtype(optionals2[i], optionals1[j], strictMode)) {
        return false;
      }
    }
    let named1 = ft1.named;
    let requiredNamed1 = ft1.requiredNamed;
    let named2 = ft2.named;
    let requiredNamed2 = ft2.requiredNamed;
    if (!strictMode) {
      named1 = Object.assign({}, named1, requiredNamed1);
      named2 = Object.assign({}, named2, requiredNamed2);
      requiredNamed1 = {};
      requiredNamed2 = {};
    }
    let names = dart.getOwnPropertyNames(requiredNamed1);
    for (let i = 0; i < names.length; ++i) {
      let name = names[i];
      let n2 = requiredNamed2[name];
      if (n2 === void 0) {
        return false;
      }
    }
    names = dart.getOwnPropertyNames(named2);
    for (let i = 0; i < names.length; ++i) {
      let name = names[i];
      let n1 = named1[name];
      let n2 = named2[name];
      if (n1 === void 0) {
        return false;
      }
      if (!dart._isSubtype(n2, n1, strictMode)) {
        return false;
      }
    }
    names = dart.getOwnPropertyNames(requiredNamed2);
    for (let i = 0; i < names.length; ++i) {
      let name = names[i];
      let n1 = named1[name] || requiredNamed1[name];
      let n2 = requiredNamed2[name];
      if (n1 === void 0) {
        return false;
      }
      if (!dart._isSubtype(n2, n1, strictMode)) {
        return false;
      }
    }
    return dart._isSubtype(ret1, ret2, strictMode);
  };
  dart.isSubtypeOf = function isSubtypeOf(t1, t2) {
    let map = t1[dart._subtypeCache];
    let result = map.get(t2);
    if (result !== void 0) return result;
    let validSubtype = dart._isSubtype(t1, t2, true);
    if (!validSubtype && !false) {
      validSubtype = dart._isSubtype(t1, t2, false);
      if (validSubtype) {
        dart._nullWarn(dart.str(t1) + " is not a subtype of " + dart.str(t2) + ".");
      }
    }
    map.set(t2, validSubtype);
    return validSubtype;
  };
  dart._isBottom = function _isBottom(type, strictMode) {
    return type === dart.Never || !strictMode && type === core.Null;
  };
  dart._isTop = function _isTop(type) {
    if (type instanceof dart.NullableType) return type.type === core.Object;
    return type === dart.dynamic || type === dart.void;
  };
  dart._isFutureOr = function _isFutureOr(type) {
    let genericClass = dart.getGenericClass(type);
    return genericClass && genericClass === async.FutureOr$;
  };
  dart._isSubtype = function _isSubtype(t1, t2, strictMode) {
    if (!strictMode) {
      if (t1 instanceof dart.NullableType) {
        t1 = t1.type;
      }
      if (t2 instanceof dart.NullableType) {
        t2 = t2.type;
      }
    }
    if (t1 === t2) {
      return true;
    }
    if (dart._isTop(t2) || dart._isBottom(t1, strictMode)) {
      return true;
    }
    if (t1 === dart.dynamic || t1 === dart.void) {
      return dart._isSubtype(dart.nullable(core.Object), t2, strictMode);
    }
    if (t2 === core.Object) {
      if (dart._isFutureOr(t1)) {
        let t1TypeArg = dart.getGenericArgs(t1)[0];
        return dart._isSubtype(t1TypeArg, core.Object, strictMode);
      }
      if (t1 instanceof dart.LegacyType) {
        return dart._isSubtype(t1.type, t2, strictMode);
      }
      if (t1 === core.Null || t1 instanceof dart.NullableType) {
        return false;
      }
      return true;
    }
    if (t1 === core.Null) {
      if (dart._isFutureOr(t2)) {
        let t2TypeArg = dart.getGenericArgs(t2)[0];
        return dart._isSubtype(core.Null, t2TypeArg, strictMode);
      }
      return t2 === core.Null || t2 instanceof dart.LegacyType || t2 instanceof dart.NullableType;
    }
    if (t1 instanceof dart.LegacyType) {
      return dart._isSubtype(t1.type, t2, strictMode);
    }
    if (t2 instanceof dart.LegacyType) {
      return dart._isSubtype(t1, dart.nullable(t2.type), strictMode);
    }
    if (dart._isFutureOr(t1)) {
      let t1TypeArg = dart.getGenericArgs(t1)[0];
      if (dart._isFutureOr(t2)) {
        let t2TypeArg = dart.getGenericArgs(t2)[0];
        if (dart._isSubtype(t1TypeArg, t2TypeArg, strictMode)) {
          return true;
        }
      }
      let t1Future = async.Future$(t1TypeArg);
      return dart._isSubtype(t1Future, t2, strictMode) && dart._isSubtype(t1TypeArg, t2, strictMode);
    }
    if (t1 instanceof dart.NullableType) {
      return dart._isSubtype(t1.type, t2, strictMode) && dart._isSubtype(core.Null, t2, strictMode);
    }
    if (dart._isFutureOr(t2)) {
      let t2TypeArg = dart.getGenericArgs(t2)[0];
      let t2Future = async.Future$(t2TypeArg);
      return dart._isSubtype(t1, t2Future, strictMode) || dart._isSubtype(t1, t2TypeArg, strictMode);
    }
    if (t2 instanceof dart.NullableType) {
      return dart._isSubtype(t1, t2.type, strictMode) || dart._isSubtype(t1, core.Null, strictMode);
    }
    if (!(t2 instanceof dart.AbstractFunctionType)) {
      if (t1 instanceof dart.AbstractFunctionType) {
        return t2 === core.Function;
      }
      if (t1 === dart.jsobject && t2 instanceof dart.AnonymousJSType) {
        return true;
      }
      return dart._isInterfaceSubtype(t1, t2, strictMode);
    }
    if (!(t1 instanceof dart.AbstractFunctionType)) {
      return false;
    }
    if (t1 instanceof dart.GenericFunctionType) {
      if (!(t2 instanceof dart.GenericFunctionType)) {
        return false;
      }
      let formalCount = t1.formalCount;
      if (formalCount !== t2.formalCount) {
        return false;
      }
      let fresh = t2.typeFormals;
      if (t1.hasTypeBounds || t2.hasTypeBounds) {
        let t1Bounds = t1.instantiateTypeBounds(fresh);
        let t2Bounds = t2.instantiateTypeBounds(fresh);
        for (let i = 0; i < formalCount; i++) {
          if (t1Bounds[i] != t2Bounds[i]) {
            if (!(dart._isSubtype(t1Bounds[i], t2Bounds[i], strictMode) && dart._isSubtype(t2Bounds[i], t1Bounds[i], strictMode))) {
              return false;
            }
          }
        }
      }
      t1 = t1.instantiate(fresh);
      t2 = t2.instantiate(fresh);
    } else if (t2 instanceof dart.GenericFunctionType) {
      return false;
    }
    return dart._isFunctionSubtype(t1, t2, strictMode);
  };
  dart._isInterfaceSubtype = function _isInterfaceSubtype(t1, t2, strictMode) {
    if (t1 instanceof dart.LazyJSType) t1 = t1.rawJSTypeForCheck();
    if (t2 instanceof dart.LazyJSType) t2 = t2.rawJSTypeForCheck();
    if (t1 === t2) {
      return true;
    }
    if (t1 === core.Object) {
      return false;
    }
    if (t1 === core.Function || t2 === core.Function) {
      return false;
    }
    if (t1 == null) {
      return t2 === core.Object || t2 === dart.dynamic;
    }
    let raw1 = dart.getGenericClass(t1);
    let raw2 = dart.getGenericClass(t2);
    if (raw1 != null && raw1 == raw2) {
      let typeArguments1 = dart.getGenericArgs(t1);
      let typeArguments2 = dart.getGenericArgs(t2);
      if (typeArguments1.length != typeArguments2.length) {
        dart.assertFailed();
      }
      let variances = dart.getGenericArgVariances(t1);
      for (let i = 0; i < typeArguments1.length; ++i) {
        if (variances === void 0 || variances[i] == 1) {
          if (!dart._isSubtype(typeArguments1[i], typeArguments2[i], strictMode)) {
            return false;
          }
        } else if (variances[i] == 2) {
          if (!dart._isSubtype(typeArguments2[i], typeArguments1[i], strictMode)) {
            return false;
          }
        } else if (variances[i] == 3) {
          if (!dart._isSubtype(typeArguments1[i], typeArguments2[i], strictMode) || !dart._isSubtype(typeArguments2[i], typeArguments1[i], strictMode)) {
            return false;
          }
        }
      }
      return true;
    }
    if (dart._isInterfaceSubtype(t1.__proto__, t2, strictMode)) {
      return true;
    }
    let m1 = dart.getMixin(t1);
    if (m1 != null && dart._isInterfaceSubtype(m1, t2, strictMode)) {
      return true;
    }
    let getInterfaces = dart.getImplements(t1);
    if (getInterfaces) {
      for (let i1 of getInterfaces()) {
        if (dart._isInterfaceSubtype(i1, t2, strictMode)) {
          return true;
        }
      }
    }
    return false;
  };
  dart.extractTypeArguments = function extractTypeArguments(T, instance, f) {
    if (f == null) dart.nullFailed(I[5], 1666, 54, "f");
    if (instance == null) {
      dart.throw(new core.ArgumentError.new("Cannot extract type of null instance."));
    }
    let type = T;
    type = type.type || type;
    if (dart.AbstractFunctionType.is(type) || dart._isFutureOr(type)) {
      dart.throw(new core.ArgumentError.new("Cannot extract from non-class type (" + dart.str(type) + ")."));
    }
    let typeArguments = dart.getGenericArgs(type);
    if (dart.test(dart.nullCheck(typeArguments)[$isEmpty])) {
      dart.throw(new core.ArgumentError.new("Cannot extract from non-generic type (" + dart.str(type) + ")."));
    }
    let supertype = dart._getMatchingSupertype(dart.getReifiedType(instance), type);
    if (!(supertype != null)) dart.assertFailed(null, I[5], 1684, 10, "supertype != null");
    let typeArgs = dart.getGenericArgs(supertype);
    if (!(typeArgs != null && dart.test(typeArgs[$isNotEmpty]))) dart.assertFailed(null, I[5], 1686, 10, "typeArgs != null && typeArgs.isNotEmpty");
    return dart.dgcall(f, typeArgs, []);
  };
  dart._getMatchingSupertype = function _getMatchingSupertype(subtype, supertype) {
    if (supertype == null) dart.nullFailed(I[5], 2047, 55, "supertype");
    if (core.identical(subtype, supertype)) return supertype;
    if (subtype == null || subtype === core.Object) return null;
    let subclass = dart.getGenericClass(subtype);
    let superclass = dart.getGenericClass(supertype);
    if (subclass != null && core.identical(subclass, superclass)) {
      return subtype;
    }
    let result = dart._getMatchingSupertype(subtype.__proto__, supertype);
    if (result != null) return result;
    let mixin = dart.getMixin(subtype);
    if (mixin != null) {
      result = dart._getMatchingSupertype(mixin, supertype);
      if (result != null) return result;
    }
    let getInterfaces = dart.getImplements(subtype);
    if (getInterfaces != null) {
      for (let iface of getInterfaces()) {
        result = dart._getMatchingSupertype(iface, supertype);
        if (result != null) return result;
      }
    }
    return null;
  };
  dart.defineValue = function defineValue(obj, name, value) {
    dart.defineAccessor(obj, name, {value: value, configurable: true, writable: true});
    return value;
  };
  dart.throwTypeError = function throwTypeError(message) {
    if (message == null) dart.nullFailed(I[6], 39, 28, "message");
    dart.throw(new _js_helper.TypeErrorImpl.new(message));
  };
  dart.throwInternalError = function throwInternalError(message) {
    if (message == null) dart.nullFailed(I[6], 44, 32, "message");
    throw Error(message);
  };
  dart.getOwnNamesAndSymbols = function getOwnNamesAndSymbols(obj) {
    let names = dart.getOwnPropertyNames(obj);
    let symbols = dart.getOwnPropertySymbols(obj);
    return names.concat(symbols);
  };
  dart.safeGetOwnProperty = function safeGetOwnProperty(obj, name) {
    if (obj.hasOwnProperty(name)) return obj[name];
  };
  dart.copyTheseProperties = function copyTheseProperties(to, from, names) {
    for (let i = 0, n = names.length; i < n; i = i + 1) {
      let name = names[i];
      if (dart.equals(name, "constructor")) continue;
      dart.copyProperty(to, from, name);
    }
    return to;
  };
  dart.copyProperty = function copyProperty(to, from, name) {
    let desc = dart.getOwnPropertyDescriptor(from, name);
    if (name == Symbol.iterator) {
      let existing = dart.getOwnPropertyDescriptor(to, name);
      if (existing != null) {
        if (existing.writable) {
          to[name] = desc.value;
        }
        return;
      }
    }
    dart.defineProperty(to, name, desc);
  };
  dart.export = function exportProperty(to, from, name) {
    return dart.copyProperty(to, from, name);
  };
  dart.copyProperties = function copyProperties(to, from) {
    return dart.copyTheseProperties(to, from, dart.getOwnNamesAndSymbols(from));
  };
  dart._polyfilled = Symbol("_polyfilled");
  dart.global = (function() {
    var globalState = typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : null;
    if (!globalState) {
      globalState = new Function('return this;')();
    }
    dart.polyfill(globalState);
    if (globalState.Error) {
      globalState.Error.stackTraceLimit = Infinity;
    }
    let settings = 'ddcSettings' in globalState ? globalState.ddcSettings : {};
    dart.trackProfile('trackProfile' in settings ? settings.trackProfile : false);
    return globalState;
  })();
  dart.JsSymbol = Symbol;
  dart.libraryPrototype = dart.library;
  dart.startAsyncSynchronously = true;
  dart._cacheMaps = [];
  dart._resetFields = [];
  dart.hotRestartIteration = 0;
  dart.addAsyncCallback = function() {
  };
  dart.removeAsyncCallback = function() {
  };
  dart.defineProperty = Object.defineProperty;
  dart.defineAccessor = Object.defineProperty;
  dart.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  dart.getOwnPropertyNames = Object.getOwnPropertyNames;
  dart.getOwnPropertySymbols = Object.getOwnPropertySymbols;
  dart.getPrototypeOf = Object.getPrototypeOf;
  dart._mixin = Symbol("mixin");
  dart.mixinOn = Symbol("mixinOn");
  dart.implements = Symbol("implements");
  dart._typeArguments = Symbol("typeArguments");
  dart._variances = Symbol("variances");
  dart._originalDeclaration = Symbol("originalDeclaration");
  dart.mixinNew = Symbol("dart.mixinNew");
  dart._constructorSig = Symbol("sigCtor");
  dart._methodSig = Symbol("sigMethod");
  dart._fieldSig = Symbol("sigField");
  dart._getterSig = Symbol("sigGetter");
  dart._setterSig = Symbol("sigSetter");
  dart._staticMethodSig = Symbol("sigStaticMethod");
  dart._staticFieldSig = Symbol("sigStaticField");
  dart._staticGetterSig = Symbol("sigStaticGetter");
  dart._staticSetterSig = Symbol("sigStaticSetter");
  dart._genericTypeCtor = Symbol("genericType");
  dart._libraryUri = Symbol("libraryUri");
  dart._extensionType = Symbol("extensionType");
  dart.dartx = dartx;
  dart._extensionMap = new Map();
  dart.isFuture = Symbol("_is_Future");
  dart.isIterable = Symbol("_is_Iterable");
  dart.isList = Symbol("_is_List");
  dart.isMap = Symbol("_is_Map");
  dart.isStream = Symbol("_is_Stream");
  dart.isStreamSubscription = Symbol("_is_StreamSubscription");
  dart.identityEquals = null;
  dart._runtimeType = Symbol("_runtimeType");
  dart._moduleName = Symbol("_moduleName");
  dart._loadedModules = new Map();
  dart._loadedPartMaps = new Map();
  dart._loadedSourceMaps = new Map();
  dart._libraries = null;
  dart._libraryObjects = null;
  dart._parts = null;
  dart._weakNullSafetyWarnings = false;
  dart._weakNullSafetyErrors = false;
  dart._nonNullAsserts = false;
  dart._nativeNonNullAsserts = false;
  dart.metadata = Symbol("metadata");
  dart._nullComparisonSet = new Set();
  dart._lazyJSTypes = new Map();
  dart._anonymousJSTypes = new Map();
  dart._cachedNullable = Symbol("cachedNullable");
  dart._cachedLegacy = Symbol("cachedLegacy");
  dart._subtypeCache = Symbol("_subtypeCache");
  core.Object = class Object {
    constructor() {
      throw Error("use `new " + dart.typeName(dart.getReifiedType(this)) + ".new(...)` to create a Dart object");
    }
    static is(o) {
      return o != null;
    }
    static as(o) {
      return o == null ? dart.as(o, core.Object) : o;
    }
    _equals(other) {
      if (other == null) return false;
      return this === other;
    }
    get hashCode() {
      return core.identityHashCode(this);
    }
    toString() {
      return "Instance of '" + dart.typeName(dart.getReifiedType(this)) + "'";
    }
    noSuchMethod(invocation) {
      if (invocation == null) dart.nullFailed(I[7], 60, 35, "invocation");
      return dart.defaultNoSuchMethod(this, invocation);
    }
    get runtimeType() {
      return dart.wrapType(dart.getReifiedType(this));
    }
  };
  (core.Object.new = function() {
    ;
  }).prototype = core.Object.prototype;
  dart.addTypeCaches(core.Object);
  dart.setMethodSignature(core.Object, () => ({
    __proto__: Object.create(null),
    _equals: dart.fnType(core.bool, [core.Object]),
    [$_equals]: dart.fnType(core.bool, [core.Object]),
    toString: dart.fnType(core.String, []),
    [$toString]: dart.fnType(core.String, []),
    noSuchMethod: dart.fnType(dart.dynamic, [core.Invocation]),
    [$noSuchMethod]: dart.fnType(dart.dynamic, [core.Invocation])
  }));
  dart.setGetterSignature(core.Object, () => ({
    __proto__: Object.create(null),
    hashCode: core.int,
    [$hashCode]: core.int,
    runtimeType: core.Type,
    [$runtimeType]: core.Type
  }));
  dart.setLibraryUri(core.Object, I[8]);
  dart.lazyFn(core.Object, () => core.Type);
  dart.defineExtensionMethods(core.Object, ['_equals', 'toString', 'noSuchMethod']);
  dart.defineExtensionAccessors(core.Object, ['hashCode', 'runtimeType']);
  dart.registerExtension("Object", core.Object);
  dart.DartType = class DartType extends core.Object {
    get name() {
      return this[$toString]();
    }
    is(object) {
      return dart.is(object, this);
    }
    as(object) {
      return dart.as(object, this);
    }
  };
  (dart.DartType.new = function() {
    dart.addTypeCaches(this);
  }).prototype = dart.DartType.prototype;
  dart.addTypeTests(dart.DartType);
  dart.addTypeCaches(dart.DartType);
  dart.DartType[dart.implements] = () => [core.Type];
  dart.setMethodSignature(dart.DartType, () => ({
    __proto__: dart.getMethods(dart.DartType.__proto__),
    is: dart.fnType(core.bool, [dart.dynamic]),
    as: dart.fnType(dart.dynamic, [dart.dynamic])
  }));
  dart.setGetterSignature(dart.DartType, () => ({
    __proto__: dart.getGetters(dart.DartType.__proto__),
    name: core.String
  }));
  dart.setLibraryUri(dart.DartType, I[9]);
  dart.NeverType = class NeverType extends dart.DartType {
    toString() {
      return "Never";
    }
  };
  (dart.NeverType.new = function() {
    dart.NeverType.__proto__.new.call(this);
    ;
  }).prototype = dart.NeverType.prototype;
  dart.addTypeTests(dart.NeverType);
  dart.addTypeCaches(dart.NeverType);
  dart.setLibraryUri(dart.NeverType, I[9]);
  dart.defineExtensionMethods(dart.NeverType, ['toString']);
  dart.Never = new dart.NeverType.new();
  dart.DynamicType = class DynamicType extends dart.DartType {
    toString() {
      return "dynamic";
    }
    is(object) {
      return true;
    }
    as(object) {
      return object;
    }
  };
  (dart.DynamicType.new = function() {
    dart.DynamicType.__proto__.new.call(this);
    ;
  }).prototype = dart.DynamicType.prototype;
  dart.addTypeTests(dart.DynamicType);
  dart.addTypeCaches(dart.DynamicType);
  dart.setMethodSignature(dart.DynamicType, () => ({
    __proto__: dart.getMethods(dart.DynamicType.__proto__),
    as: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(dart.DynamicType, I[9]);
  dart.defineExtensionMethods(dart.DynamicType, ['toString']);
  dart.dynamic = new dart.DynamicType.new();
  dart.VoidType = class VoidType extends dart.DartType {
    toString() {
      return "void";
    }
    is(object) {
      return true;
    }
    as(object) {
      return object;
    }
  };
  (dart.VoidType.new = function() {
    dart.VoidType.__proto__.new.call(this);
    ;
  }).prototype = dart.VoidType.prototype;
  dart.addTypeTests(dart.VoidType);
  dart.addTypeCaches(dart.VoidType);
  dart.setMethodSignature(dart.VoidType, () => ({
    __proto__: dart.getMethods(dart.VoidType.__proto__),
    as: dart.fnType(dart.nullable(core.Object), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(dart.VoidType, I[9]);
  dart.defineExtensionMethods(dart.VoidType, ['toString']);
  dart.void = new dart.VoidType.new();
  dart.JSObjectType = class JSObjectType extends dart.DartType {
    toString() {
      return "NativeJavaScriptObject";
    }
  };
  (dart.JSObjectType.new = function() {
    dart.JSObjectType.__proto__.new.call(this);
    ;
  }).prototype = dart.JSObjectType.prototype;
  dart.addTypeTests(dart.JSObjectType);
  dart.addTypeCaches(dart.JSObjectType);
  dart.setLibraryUri(dart.JSObjectType, I[9]);
  dart.defineExtensionMethods(dart.JSObjectType, ['toString']);
  dart.jsobject = new dart.JSObjectType.new();
  dart._typeObject = Symbol("typeObject");
  dart._fnTypeNamedArgMap = new Map();
  dart._fnTypeArrayArgMap = new Map();
  dart._fnTypeTypeMap = new Map();
  dart._fnTypeSmallMap = [new Map(), new Map(), new Map()];
  dart._gFnTypeTypeMap = new Map();
  dart._nullFailedSet = new Set();
  dart._thrownValue = Symbol("_thrownValue");
  dart._jsError = Symbol("_jsError");
  dart._stackTrace = Symbol("_stackTrace");
  dart.DartError = class DartError extends Error {
    constructor(error) {
      super();
      if (error == null) error = new core.NullThrownError.new();
      this[dart._thrownValue] = error;
      if (error != null && typeof error == "object" && error[dart._jsError] == null) {
        error[dart._jsError] = this;
      }
    }
    get message() {
      return dart.toString(this[dart._thrownValue]);
    }
  };
  dart.RethrownDartError = class RethrownDartError extends dart.DartError {
    constructor(error, stackTrace) {
      super(error);
      this[dart._stackTrace] = stackTrace;
    }
    get message() {
      return super.message + "\n    " + dart.toString(this[dart._stackTrace]) + "\n";
    }
  };
  dart.constantMaps = new Map();
  dart.constantSets = new Map();
  dart._immutableSetConstructor = null;
  dart._value = Symbol("_value");
  dart.constants = new Map();
  dart.constantLists = new Map();
  dart.identityHashCode_ = Symbol("_identityHashCode");
  dart.JsIterator = class JsIterator {
    constructor(dartIterator) {
      this.dartIterator = dartIterator;
    }
    next() {
      let i = this.dartIterator;
      let done = !i.moveNext();
      return {done: done, value: done ? void 0 : i.current};
    }
  };
  dart.deferredImports = new Map();
  dart.defineLazy(dart, {
    /*dart._assertInteropExpando*/get _assertInteropExpando() {
      return new (T$.ExpandoOfFunction()).new();
    },
    set _assertInteropExpando(_) {},
    /*dart.bottom*/get bottom() {
      return core.Null;
    },
    /*dart._typeVariablePool*/get _typeVariablePool() {
      return T$.JSArrayOfTypeVariable().of([]);
    }
  }, false);
  var _rawJSType = dart.privateName(dart, "_rawJSType");
  var _getRawJSTypeFn$ = dart.privateName(dart, "_getRawJSTypeFn");
  var _dartName$ = dart.privateName(dart, "_dartName");
  var _getRawJSType = dart.privateName(dart, "_getRawJSType");
  dart.LazyJSType = class LazyJSType extends dart.DartType {
    toString() {
      let raw = this[_getRawJSType]();
      return raw != null ? dart.typeName(raw) : "JSObject<" + this[_dartName$] + ">";
    }
    [_getRawJSType]() {
      let raw = this[_rawJSType];
      if (raw != null) return raw;
      try {
        raw = this[_getRawJSTypeFn$]();
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      if (raw == null) {
        dart._warn("Cannot find native JavaScript type (" + this[_dartName$] + ") for type check");
      } else {
        this[_rawJSType] = raw;
        dart._resetFields.push(() => this[_rawJSType] = null);
      }
      return raw;
    }
    rawJSTypeForCheck() {
      let t1;
      t1 = this[_getRawJSType]();
      return t1 == null ? dart.jsobject : t1;
    }
    is(obj) {
      return obj != null && (dart._isJsObject(obj) || dart.isSubtypeOf(dart.getReifiedType(obj), this));
    }
    as(obj) {
      return this.is(obj) ? obj : dart.castError(obj, this);
    }
  };
  (dart.LazyJSType.new = function(_getRawJSTypeFn, _dartName) {
    if (_getRawJSTypeFn == null) dart.nullFailed(I[5], 211, 19, "_getRawJSTypeFn");
    if (_dartName == null) dart.nullFailed(I[5], 211, 41, "_dartName");
    this[_rawJSType] = null;
    this[_getRawJSTypeFn$] = _getRawJSTypeFn;
    this[_dartName$] = _dartName;
    dart.LazyJSType.__proto__.new.call(this);
    ;
  }).prototype = dart.LazyJSType.prototype;
  dart.addTypeTests(dart.LazyJSType);
  dart.addTypeCaches(dart.LazyJSType);
  dart.setMethodSignature(dart.LazyJSType, () => ({
    __proto__: dart.getMethods(dart.LazyJSType.__proto__),
    [_getRawJSType]: dart.fnType(dart.nullable(core.Object), []),
    rawJSTypeForCheck: dart.fnType(core.Object, [])
  }));
  dart.setLibraryUri(dart.LazyJSType, I[9]);
  dart.setFieldSignature(dart.LazyJSType, () => ({
    __proto__: dart.getFields(dart.LazyJSType.__proto__),
    [_getRawJSTypeFn$]: dart.fieldType(dart.fnType(dart.dynamic, [])),
    [_dartName$]: dart.finalFieldType(core.String),
    [_rawJSType]: dart.fieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(dart.LazyJSType, ['toString']);
  dart.AnonymousJSType = class AnonymousJSType extends dart.DartType {
    toString() {
      return this[_dartName$];
    }
    is(obj) {
      return obj != null && (dart._isJsObject(obj) || dart.isSubtypeOf(dart.getReifiedType(obj), this));
    }
    as(obj) {
      return dart.test(this.is(obj)) ? obj : dart.castError(obj, this);
    }
  };
  (dart.AnonymousJSType.new = function(_dartName) {
    if (_dartName == null) dart.nullFailed(I[5], 257, 24, "_dartName");
    this[_dartName$] = _dartName;
    dart.AnonymousJSType.__proto__.new.call(this);
    ;
  }).prototype = dart.AnonymousJSType.prototype;
  dart.addTypeTests(dart.AnonymousJSType);
  dart.addTypeCaches(dart.AnonymousJSType);
  dart.setLibraryUri(dart.AnonymousJSType, I[9]);
  dart.setFieldSignature(dart.AnonymousJSType, () => ({
    __proto__: dart.getFields(dart.AnonymousJSType.__proto__),
    [_dartName$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(dart.AnonymousJSType, ['toString']);
  var type$ = dart.privateName(dart, "NullableType.type");
  dart.NullableType = class NullableType extends dart.DartType {
    get type() {
      return this[type$];
    }
    set type(value) {
      super.type = value;
    }
    get name() {
      return this.type instanceof dart.FunctionType ? "(" + dart.str(this.type) + ")?" : dart.str(this.type) + "?";
    }
    toString() {
      return this.name;
    }
    is(obj) {
      return obj == null || this.type.is(obj);
    }
    as(obj) {
      return obj == null || this.type.is(obj) ? obj : dart.as(obj, this);
    }
  };
  (dart.NullableType.new = function(type) {
    this[type$] = type;
    dart.NullableType.__proto__.new.call(this);
    ;
  }).prototype = dart.NullableType.prototype;
  dart.addTypeTests(dart.NullableType);
  dart.addTypeCaches(dart.NullableType);
  dart.setLibraryUri(dart.NullableType, I[9]);
  dart.setFieldSignature(dart.NullableType, () => ({
    __proto__: dart.getFields(dart.NullableType.__proto__),
    type: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(dart.NullableType, ['toString']);
  var type$0 = dart.privateName(dart, "LegacyType.type");
  dart.LegacyType = class LegacyType extends dart.DartType {
    get type() {
      return this[type$0];
    }
    set type(value) {
      super.type = value;
    }
    get name() {
      return dart.str(this.type);
    }
    toString() {
      return this.name;
    }
    is(obj) {
      if (obj == null) {
        return this.type === core.Object || this.type === dart.Never;
      }
      return this.type.is(obj);
    }
    as(obj) {
      return obj == null || this.type.is(obj) ? obj : dart.as(obj, this);
    }
  };
  (dart.LegacyType.new = function(type) {
    this[type$0] = type;
    dart.LegacyType.__proto__.new.call(this);
    ;
  }).prototype = dart.LegacyType.prototype;
  dart.addTypeTests(dart.LegacyType);
  dart.addTypeCaches(dart.LegacyType);
  dart.setLibraryUri(dart.LegacyType, I[9]);
  dart.setFieldSignature(dart.LegacyType, () => ({
    __proto__: dart.getFields(dart.LegacyType.__proto__),
    type: dart.finalFieldType(core.Type)
  }));
  dart.defineExtensionMethods(dart.LegacyType, ['toString']);
  dart.BottomType = class BottomType extends dart.DartType {
    toString() {
      return "bottom";
    }
  };
  (dart.BottomType.new = function() {
    dart.BottomType.__proto__.new.call(this);
    ;
  }).prototype = dart.BottomType.prototype;
  dart.addTypeTests(dart.BottomType);
  dart.addTypeCaches(dart.BottomType);
  dart.setLibraryUri(dart.BottomType, I[9]);
  dart.defineExtensionMethods(dart.BottomType, ['toString']);
  core.Type = class Type extends core.Object {};
  (core.Type.new = function() {
    ;
  }).prototype = core.Type.prototype;
  dart.addTypeTests(core.Type);
  dart.addTypeCaches(core.Type);
  dart.setLibraryUri(core.Type, I[8]);
  dart._Type = class _Type extends core.Type {
    toString() {
      return dart.typeName(this[_type$]);
    }
    get runtimeType() {
      return dart.wrapType(core.Type);
    }
  };
  (dart._Type.new = function(_type) {
    if (_type == null) dart.nullFailed(I[5], 496, 14, "_type");
    this[_type$] = _type;
    ;
  }).prototype = dart._Type.prototype;
  dart.addTypeTests(dart._Type);
  dart.addTypeCaches(dart._Type);
  dart.setLibraryUri(dart._Type, I[9]);
  dart.setFieldSignature(dart._Type, () => ({
    __proto__: dart.getFields(dart._Type.__proto__),
    [_type$]: dart.finalFieldType(core.Object)
  }));
  dart.defineExtensionMethods(dart._Type, ['toString']);
  dart.defineExtensionAccessors(dart._Type, ['runtimeType']);
  dart.AbstractFunctionType = class AbstractFunctionType extends dart.DartType {};
  (dart.AbstractFunctionType.new = function() {
    dart.AbstractFunctionType.__proto__.new.call(this);
    ;
  }).prototype = dart.AbstractFunctionType.prototype;
  dart.addTypeTests(dart.AbstractFunctionType);
  dart.addTypeCaches(dart.AbstractFunctionType);
  dart.setLibraryUri(dart.AbstractFunctionType, I[9]);
  var returnType$ = dart.privateName(dart, "FunctionType.returnType");
  var args$ = dart.privateName(dart, "FunctionType.args");
  var optionals$ = dart.privateName(dart, "FunctionType.optionals");
  var named$ = dart.privateName(dart, "FunctionType.named");
  var requiredNamed$ = dart.privateName(dart, "FunctionType.requiredNamed");
  var _stringValue = dart.privateName(dart, "_stringValue");
  var _createNameMap = dart.privateName(dart, "_createNameMap");
  dart.FunctionType = class FunctionType extends dart.AbstractFunctionType {
    get returnType() {
      return this[returnType$];
    }
    set returnType(value) {
      super.returnType = value;
    }
    get args() {
      return this[args$];
    }
    set args(value) {
      super.args = value;
    }
    get optionals() {
      return this[optionals$];
    }
    set optionals(value) {
      super.optionals = value;
    }
    get named() {
      return this[named$];
    }
    set named(value) {
      super.named = value;
    }
    get requiredNamed() {
      return this[requiredNamed$];
    }
    set requiredNamed(value) {
      super.requiredNamed = value;
    }
    static create(returnType, args, optionalArgs, requiredNamedArgs) {
      if (args == null) dart.nullFailed(I[5], 753, 24, "args");
      let noOptionalArgs = optionalArgs == null && requiredNamedArgs == null;
      if (noOptionalArgs && args.length < 3) {
        return dart._createSmall(returnType, args);
      }
      args = dart._canonicalizeArray(args, dart._fnTypeArrayArgMap);
      let keys = [];
      let create = null;
      if (noOptionalArgs) {
        keys = [returnType, args];
        create = () => new dart.FunctionType.new(core.Type.as(returnType), args, [], {}, {});
      } else if (optionalArgs instanceof Array) {
        let optionals = dart._canonicalizeArray(optionalArgs, dart._fnTypeArrayArgMap);
        keys = [returnType, args, optionals];
        create = () => new dart.FunctionType.new(core.Type.as(returnType), args, optionals, {}, {});
      } else {
        let named = dart._canonicalizeNamed(optionalArgs, dart._fnTypeNamedArgMap);
        let requiredNamed = dart._canonicalizeNamed(requiredNamedArgs, dart._fnTypeNamedArgMap);
        keys = [returnType, args, named, requiredNamed];
        create = () => new dart.FunctionType.new(core.Type.as(returnType), args, [], named, requiredNamed);
      }
      return dart._memoizeArray(dart._fnTypeTypeMap, keys, create);
    }
    toString() {
      return this.name;
    }
    get requiredParameterCount() {
      return this.args[$length];
    }
    get positionalParameterCount() {
      return dart.notNull(this.args[$length]) + dart.notNull(this.optionals[$length]);
    }
    getPositionalParameter(i) {
      if (i == null) dart.nullFailed(I[5], 792, 30, "i");
      let n = this.args[$length];
      return dart.notNull(i) < dart.notNull(n) ? this.args[$_get](i) : this.optionals[$_get](dart.notNull(i) + dart.notNull(n));
    }
    [_createNameMap](names) {
      if (names == null) dart.nullFailed(I[5], 798, 52, "names");
      let result = new (T$.IdentityMapOfString$Object()).new();
      names.sort();
      for (let i = 0; i < names.length; i = i + 1) {
        let name = names[i];
        result[$_set](name, this.named[name]);
      }
      return result;
    }
    getNamedParameters() {
      return this[_createNameMap](dart.getOwnPropertyNames(this.named)[$toList]());
    }
    getRequiredNamedParameters() {
      return this[_createNameMap](dart.getOwnPropertyNames(this.requiredNamed)[$toList]());
    }
    get name() {
      if (this[_stringValue] != null) return dart.nullCheck(this[_stringValue]);
      let buffer = "(";
      for (let i = 0; i < this.args.length; i = i + 1) {
        if (i > 0) {
          buffer = buffer + ", ";
        }
        buffer = buffer + dart.typeName(this.args[i]);
      }
      if (this.optionals.length > 0) {
        if (this.args.length > 0) buffer = buffer + ", ";
        buffer = buffer + "[";
        for (let i = 0; i < this.optionals.length; i = i + 1) {
          if (i > 0) {
            buffer = buffer + ", ";
          }
          buffer = buffer + dart.typeName(this.optionals[i]);
        }
        buffer = buffer + "]";
      } else if (Object.keys(this.named).length > 0 || Object.keys(this.requiredNamed).length > 0) {
        if (this.args.length > 0) buffer = buffer + ", ";
        buffer = buffer + "{";
        let names = dart.getOwnPropertyNames(this.named);
        names.sort();
        for (let i = 0; i < names.length; i = i + 1) {
          if (i > 0) {
            buffer = buffer + ", ";
          }
          let typeNameString = dart.typeName(this.named[names[i]]);
          buffer = buffer + (typeNameString + " " + dart.str(names[i]));
        }
        if (Object.keys(this.requiredNamed).length > 0 && names.length > 0) buffer = buffer + ", ";
        names = dart.getOwnPropertyNames(this.requiredNamed);
        names.sort();
        for (let i = 0; i < names.length; i = i + 1) {
          if (i > 0) {
            buffer = buffer + ", ";
          }
          let typeNameString = dart.typeName(this.requiredNamed[names[i]]);
          buffer = buffer + ("required " + typeNameString + " " + dart.str(names[i]));
        }
        buffer = buffer + "}";
      }
      let returnTypeName = dart.typeName(this.returnType);
      buffer = buffer + (") => " + returnTypeName);
      this[_stringValue] = buffer;
      return buffer;
    }
    is(obj) {
      if (typeof obj == "function") {
        let actual = obj[dart._runtimeType];
        return actual == null || dart.isSubtypeOf(actual, this);
      }
      return false;
    }
    as(obj) {
      if (dart.test(this.is(obj))) return obj;
      return dart.as(obj, this);
    }
  };
  (dart.FunctionType.new = function(returnType, args, optionals, named, requiredNamed) {
    if (returnType == null) dart.nullFailed(I[5], 784, 21, "returnType");
    if (args == null) dart.nullFailed(I[5], 784, 38, "args");
    if (optionals == null) dart.nullFailed(I[5], 784, 49, "optionals");
    this[_stringValue] = null;
    this[returnType$] = returnType;
    this[args$] = args;
    this[optionals$] = optionals;
    this[named$] = named;
    this[requiredNamed$] = requiredNamed;
    dart.FunctionType.__proto__.new.call(this);
    ;
  }).prototype = dart.FunctionType.prototype;
  dart.addTypeTests(dart.FunctionType);
  dart.addTypeCaches(dart.FunctionType);
  dart.setMethodSignature(dart.FunctionType, () => ({
    __proto__: dart.getMethods(dart.FunctionType.__proto__),
    getPositionalParameter: dart.fnType(dart.dynamic, [core.int]),
    [_createNameMap]: dart.fnType(core.Map$(core.String, core.Object), [core.List$(dart.nullable(core.Object))]),
    getNamedParameters: dart.fnType(core.Map$(core.String, core.Object), []),
    getRequiredNamedParameters: dart.fnType(core.Map$(core.String, core.Object), [])
  }));
  dart.setGetterSignature(dart.FunctionType, () => ({
    __proto__: dart.getGetters(dart.FunctionType.__proto__),
    requiredParameterCount: core.int,
    positionalParameterCount: core.int
  }));
  dart.setLibraryUri(dart.FunctionType, I[9]);
  dart.setFieldSignature(dart.FunctionType, () => ({
    __proto__: dart.getFields(dart.FunctionType.__proto__),
    returnType: dart.finalFieldType(core.Type),
    args: dart.finalFieldType(core.List),
    optionals: dart.finalFieldType(core.List),
    named: dart.finalFieldType(dart.dynamic),
    requiredNamed: dart.finalFieldType(dart.dynamic),
    [_stringValue]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(dart.FunctionType, ['toString']);
  var name$ = dart.privateName(dart, "TypeVariable.name");
  dart.TypeVariable = class TypeVariable extends dart.DartType {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    toString() {
      return this.name;
    }
  };
  (dart.TypeVariable.new = function(name) {
    if (name == null) dart.nullFailed(I[5], 893, 21, "name");
    this[name$] = name;
    dart.TypeVariable.__proto__.new.call(this);
    ;
  }).prototype = dart.TypeVariable.prototype;
  dart.addTypeTests(dart.TypeVariable);
  dart.addTypeCaches(dart.TypeVariable);
  dart.setLibraryUri(dart.TypeVariable, I[9]);
  dart.setFieldSignature(dart.TypeVariable, () => ({
    __proto__: dart.getFields(dart.TypeVariable.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(dart.TypeVariable, ['toString']);
  dart.Variance = class Variance extends core.Object {};
  (dart.Variance.new = function() {
    ;
  }).prototype = dart.Variance.prototype;
  dart.addTypeTests(dart.Variance);
  dart.addTypeCaches(dart.Variance);
  dart.setLibraryUri(dart.Variance, I[9]);
  dart.defineLazy(dart.Variance, {
    /*dart.Variance.unrelated*/get unrelated() {
      return 0;
    },
    /*dart.Variance.covariant*/get covariant() {
      return 1;
    },
    /*dart.Variance.contravariant*/get contravariant() {
      return 2;
    },
    /*dart.Variance.invariant*/get invariant() {
      return 3;
    }
  }, false);
  var typeFormals$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.typeFormals");
  var typeBounds$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.typeBounds");
  var $function$ = dart.privateName(dart, "GenericFunctionTypeIdentifier.function");
  dart.GenericFunctionTypeIdentifier = class GenericFunctionTypeIdentifier extends dart.AbstractFunctionType {
    get typeFormals() {
      return this[typeFormals$];
    }
    set typeFormals(value) {
      super.typeFormals = value;
    }
    get typeBounds() {
      return this[typeBounds$];
    }
    set typeBounds(value) {
      super.typeBounds = value;
    }
    get function() {
      return this[$function$];
    }
    set function(value) {
      super.function = value;
    }
    toString() {
      if (this[_stringValue] != null) return dart.nullCheck(this[_stringValue]);
      let s = "<";
      let typeFormals = this.typeFormals;
      let typeBounds = this.typeBounds;
      for (let i = 0, n = core.int.as(dart.dload(typeFormals, 'length')); i < dart.notNull(n); i = i + 1) {
        if (i !== 0) s = s + ", ";
        s = s + typeFormals[i].name;
        let bound = dart.dsend(typeBounds, '_get', [i]);
        if (bound === dart.dynamic || bound === dart.nullable(core.Object) || !false && bound === core.Object) {
          continue;
        }
        s = s + (" extends " + dart.str(bound));
      }
      s = s + (">" + dart.notNull(dart.toString(this.function)));
      return this[_stringValue] = s;
    }
  };
  (dart.GenericFunctionTypeIdentifier.new = function(typeFormals, typeBounds, $function) {
    if ($function == null) dart.nullFailed(I[5], 916, 47, "function");
    this[_stringValue] = null;
    this[typeFormals$] = typeFormals;
    this[typeBounds$] = typeBounds;
    this[$function$] = $function;
    dart.GenericFunctionTypeIdentifier.__proto__.new.call(this);
    ;
  }).prototype = dart.GenericFunctionTypeIdentifier.prototype;
  dart.addTypeTests(dart.GenericFunctionTypeIdentifier);
  dart.addTypeCaches(dart.GenericFunctionTypeIdentifier);
  dart.setLibraryUri(dart.GenericFunctionTypeIdentifier, I[9]);
  dart.setFieldSignature(dart.GenericFunctionTypeIdentifier, () => ({
    __proto__: dart.getFields(dart.GenericFunctionTypeIdentifier.__proto__),
    typeFormals: dart.finalFieldType(dart.dynamic),
    typeBounds: dart.finalFieldType(dart.dynamic),
    function: dart.finalFieldType(dart.FunctionType),
    [_stringValue]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(dart.GenericFunctionTypeIdentifier, ['toString']);
  var formalCount = dart.privateName(dart, "GenericFunctionType.formalCount");
  var _instantiateTypeBounds$ = dart.privateName(dart, "_instantiateTypeBounds");
  var _instantiateTypeParts = dart.privateName(dart, "_instantiateTypeParts");
  var _typeFormals = dart.privateName(dart, "_typeFormals");
  dart.GenericFunctionType = class GenericFunctionType extends dart.AbstractFunctionType {
    get formalCount() {
      return this[formalCount];
    }
    set formalCount(value) {
      super.formalCount = value;
    }
    get typeFormals() {
      return this[_typeFormals];
    }
    get hasTypeBounds() {
      return this[_instantiateTypeBounds$] != null;
    }
    checkBounds(typeArgs) {
      if (typeArgs == null) dart.nullFailed(I[5], 964, 33, "typeArgs");
      if (!dart.test(this.hasTypeBounds)) return;
      let bounds = this.instantiateTypeBounds(typeArgs);
      let typeFormals = this.typeFormals;
      for (let i = 0; i < dart.notNull(typeArgs[$length]); i = i + 1) {
        dart.checkTypeBound(typeArgs[$_get](i), bounds[$_get](i), typeFormals[$_get](i).name);
      }
    }
    instantiate(typeArgs) {
      let parts = this[_instantiateTypeParts].apply(null, typeArgs);
      return dart.FunctionType.create(parts[0], parts[1], parts[2], parts[3]);
    }
    instantiateTypeBounds(typeArgs) {
      if (typeArgs == null) dart.nullFailed(I[5], 982, 43, "typeArgs");
      if (!dart.test(this.hasTypeBounds)) {
        return T$.ListOfObject().filled(this.formalCount, dart.legacy(core.Object));
      }
      return this[_instantiateTypeBounds$].apply(null, typeArgs);
    }
    toString() {
      let s = "<";
      let typeFormals = this.typeFormals;
      let typeBounds = this.instantiateTypeBounds(typeFormals);
      for (let i = 0, n = typeFormals[$length]; i < dart.notNull(n); i = i + 1) {
        if (i !== 0) s = s + ", ";
        s = s + typeFormals[i].name;
        let bound = typeBounds[$_get](i);
        if (bound !== dart.dynamic && bound !== core.Object) {
          s = s + (" extends " + dart.str(bound));
        }
      }
      s = s + (">" + dart.notNull(dart.toString(this.instantiate(typeFormals))));
      return s;
    }
    instantiateDefaultBounds() {
      function defaultsToDynamic(type) {
        if (type === dart.dynamic) return true;
        if (type instanceof dart.NullableType || !false && type instanceof dart.LegacyType) {
          return type.type === core.Object;
        }
        return false;
      }
      let typeFormals = this.typeFormals;
      let all = new (T$.IdentityMapOfTypeVariable$int()).new();
      let defaults = T$.ListOfObjectN().filled(typeFormals[$length], null);
      let partials = new (T$.IdentityMapOfTypeVariable$Object()).new();
      let typeBounds = this.instantiateTypeBounds(typeFormals);
      for (let i = 0; i < dart.notNull(typeFormals[$length]); i = i + 1) {
        let typeFormal = typeFormals[$_get](i);
        let bound = typeBounds[$_get](i);
        all[$_set](typeFormal, i);
        if (dart.test(defaultsToDynamic(bound))) {
          defaults[$_set](i, dart.dynamic);
        } else {
          defaults[$_set](i, typeFormal);
          partials[$_set](typeFormal, bound);
        }
      }
      function hasFreeFormal(t) {
        if (dart.test(partials[$containsKey](t))) return true;
        if (t instanceof dart.LegacyType || t instanceof dart.NullableType) {
          return hasFreeFormal(t.type);
        }
        let typeArgs = dart.getGenericArgs(t);
        if (typeArgs != null) return typeArgs[$any](hasFreeFormal);
        if (dart.GenericFunctionType.is(t)) {
          return hasFreeFormal(t.instantiate(t.typeFormals));
        }
        if (dart.FunctionType.is(t)) {
          return dart.test(hasFreeFormal(t.returnType)) || dart.test(t.args[$any](hasFreeFormal));
        }
        return false;
      }
      let hasProgress = true;
      while (hasProgress) {
        hasProgress = false;
        for (let typeFormal of partials[$keys]) {
          let partialBound = dart.nullCheck(partials[$_get](typeFormal));
          if (!dart.test(hasFreeFormal(partialBound))) {
            let index = dart.nullCheck(all[$_get](typeFormal));
            defaults[$_set](index, this.instantiateTypeBounds(defaults)[$_get](index));
            partials[$remove](typeFormal);
            hasProgress = true;
            break;
          }
        }
      }
      if (dart.test(partials[$isNotEmpty])) {
        dart.throwTypeError("Instantiate to bounds failed for type with " + "recursive generic bounds: " + dart.typeName(this) + ". " + "Try passing explicit type arguments.");
      }
      return defaults;
    }
    is(obj) {
      if (typeof obj == "function") {
        let actual = obj[dart._runtimeType];
        return actual != null && dart.isSubtypeOf(actual, this);
      }
      return false;
    }
    as(obj) {
      if (this.is(obj)) return obj;
      return dart.as(obj, this);
    }
  };
  (dart.GenericFunctionType.new = function(instantiateTypeParts, _instantiateTypeBounds) {
    this[_instantiateTypeBounds$] = _instantiateTypeBounds;
    this[_instantiateTypeParts] = instantiateTypeParts;
    this[formalCount] = instantiateTypeParts.length;
    this[_typeFormals] = dart._typeFormalsFromFunction(instantiateTypeParts);
    dart.GenericFunctionType.__proto__.new.call(this);
    ;
  }).prototype = dart.GenericFunctionType.prototype;
  dart.addTypeTests(dart.GenericFunctionType);
  dart.addTypeCaches(dart.GenericFunctionType);
  dart.setMethodSignature(dart.GenericFunctionType, () => ({
    __proto__: dart.getMethods(dart.GenericFunctionType.__proto__),
    checkBounds: dart.fnType(dart.void, [core.List$(core.Object)]),
    instantiate: dart.fnType(dart.FunctionType, [dart.dynamic]),
    instantiateTypeBounds: dart.fnType(core.List$(core.Object), [core.List]),
    instantiateDefaultBounds: dart.fnType(core.List, [])
  }));
  dart.setGetterSignature(dart.GenericFunctionType, () => ({
    __proto__: dart.getGetters(dart.GenericFunctionType.__proto__),
    typeFormals: core.List$(dart.TypeVariable),
    hasTypeBounds: core.bool
  }));
  dart.setLibraryUri(dart.GenericFunctionType, I[9]);
  dart.setFieldSignature(dart.GenericFunctionType, () => ({
    __proto__: dart.getFields(dart.GenericFunctionType.__proto__),
    [_instantiateTypeParts]: dart.finalFieldType(dart.dynamic),
    formalCount: dart.finalFieldType(core.int),
    [_instantiateTypeBounds$]: dart.finalFieldType(dart.dynamic),
    [_typeFormals]: dart.finalFieldType(core.List$(dart.TypeVariable))
  }));
  dart.defineExtensionMethods(dart.GenericFunctionType, ['toString']);
  var _typeVariables = dart.privateName(dart, "_typeVariables");
  var _isSubtypeMatch = dart.privateName(dart, "_isSubtypeMatch");
  var _constrainLower = dart.privateName(dart, "_constrainLower");
  var _constrainUpper = dart.privateName(dart, "_constrainUpper");
  var _isFunctionSubtypeMatch = dart.privateName(dart, "_isFunctionSubtypeMatch");
  var _isInterfaceSubtypeMatch = dart.privateName(dart, "_isInterfaceSubtypeMatch");
  var _isTop$ = dart.privateName(dart, "_isTop");
  dart._TypeInferrer = class _TypeInferrer extends core.Object {
    getInferredTypes() {
      let result = T$.JSArrayOfObject().of([]);
      for (let constraint of this[_typeVariables][$values]) {
        if (constraint.lower != null) {
          result[$add](dart.nullCheck(constraint.lower));
        } else if (constraint.upper != null) {
          result[$add](dart.nullCheck(constraint.upper));
        } else {
          return null;
        }
      }
      return result;
    }
    trySubtypeMatch(subtype, supertype) {
      if (subtype == null) dart.nullFailed(I[5], 1722, 31, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1722, 47, "supertype");
      return this[_isSubtypeMatch](subtype, supertype);
    }
    [_constrainLower](parameter, lower) {
      if (parameter == null) dart.nullFailed(I[5], 1725, 37, "parameter");
      if (lower == null) dart.nullFailed(I[5], 1725, 55, "lower");
      dart.nullCheck(this[_typeVariables][$_get](parameter))[_constrainLower](lower);
    }
    [_constrainUpper](parameter, upper) {
      if (parameter == null) dart.nullFailed(I[5], 1729, 37, "parameter");
      if (upper == null) dart.nullFailed(I[5], 1729, 55, "upper");
      dart.nullCheck(this[_typeVariables][$_get](parameter))[_constrainUpper](upper);
    }
    [_isFunctionSubtypeMatch](subtype, supertype) {
      let t7;
      if (subtype == null) dart.nullFailed(I[5], 1733, 45, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1733, 67, "supertype");
      if (dart.notNull(subtype.requiredParameterCount) > dart.notNull(supertype.requiredParameterCount)) {
        return false;
      }
      if (dart.notNull(subtype.positionalParameterCount) < dart.notNull(supertype.positionalParameterCount)) {
        return false;
      }
      if (!dart.VoidType.is(supertype.returnType) && !dart.test(this[_isSubtypeMatch](subtype.returnType, supertype.returnType))) {
        return false;
      }
      for (let i = 0, n = supertype.positionalParameterCount; i < dart.notNull(n); i = i + 1) {
        if (!dart.test(this[_isSubtypeMatch](core.Object.as(supertype.getPositionalParameter(i)), core.Object.as(subtype.getPositionalParameter(i))))) {
          return false;
        }
      }
      let supertypeNamed = supertype.getNamedParameters();
      let supertypeRequiredNamed = supertype.getRequiredNamedParameters();
      let subtypeNamed = supertype.getNamedParameters();
      let subtypeRequiredNamed = supertype.getRequiredNamedParameters();
      if (!false) {
        supertypeNamed = (() => {
          let t1 = new (T$.IdentityMapOfString$Object()).new();
          for (let t2 of supertypeNamed[$entries])
            t1[$_set](t2.key, t2.value);
          for (let t3 of supertypeRequiredNamed[$entries])
            t1[$_set](t3.key, t3.value);
          return t1;
        })();
        subtypeNamed = (() => {
          let t4 = new (T$.IdentityMapOfString$Object()).new();
          for (let t5 of subtypeNamed[$entries])
            t4[$_set](t5.key, t5.value);
          for (let t6 of subtypeRequiredNamed[$entries])
            t4[$_set](t6.key, t6.value);
          return t4;
        })();
        supertypeRequiredNamed = new (T$.IdentityMapOfString$Object()).new();
        subtypeRequiredNamed = new (T$.IdentityMapOfString$Object()).new();
      }
      for (let name of subtypeRequiredNamed[$keys]) {
        let supertypeParamType = supertypeRequiredNamed[$_get](name);
        if (supertypeParamType == null) return false;
      }
      for (let name of supertypeNamed[$keys]) {
        let subtypeParamType = subtypeNamed[$_get](name);
        if (subtypeParamType == null) return false;
        if (!dart.test(this[_isSubtypeMatch](dart.nullCheck(supertypeNamed[$_get](name)), subtypeParamType))) {
          return false;
        }
      }
      for (let name of supertypeRequiredNamed[$keys]) {
        let subtypeParamType = (t7 = subtypeRequiredNamed[$_get](name), t7 == null ? dart.nullCheck(subtypeNamed[$_get](name)) : t7);
        if (!dart.test(this[_isSubtypeMatch](dart.nullCheck(supertypeRequiredNamed[$_get](name)), subtypeParamType))) {
          return false;
        }
      }
      return true;
    }
    [_isInterfaceSubtypeMatch](subtype, supertype) {
      if (subtype == null) dart.nullFailed(I[5], 1809, 40, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1809, 56, "supertype");
      let matchingSupertype = dart._getMatchingSupertype(subtype, supertype);
      if (matchingSupertype == null) return false;
      let matchingTypeArgs = dart.nullCheck(dart.getGenericArgs(matchingSupertype));
      let supertypeTypeArgs = dart.nullCheck(dart.getGenericArgs(supertype));
      for (let i = 0; i < dart.notNull(supertypeTypeArgs[$length]); i = i + 1) {
        if (!dart.test(this[_isSubtypeMatch](core.Object.as(matchingTypeArgs[$_get](i)), core.Object.as(supertypeTypeArgs[$_get](i))))) {
          return false;
        }
      }
      return true;
    }
    [_isSubtypeMatch](subtype, supertype) {
      if (subtype == null) dart.nullFailed(I[5], 1853, 31, "subtype");
      if (supertype == null) dart.nullFailed(I[5], 1853, 47, "supertype");
      if (dart.TypeVariable.is(subtype) && dart.test(this[_typeVariables][$containsKey](subtype))) {
        this[_constrainUpper](subtype, supertype);
        return true;
      }
      if (dart.TypeVariable.is(supertype) && dart.test(this[_typeVariables][$containsKey](supertype))) {
        this[_constrainLower](supertype, subtype);
        return true;
      }
      if (core.identical(subtype, supertype)) return true;
      if (dart.test(this[_isTop$](supertype))) return true;
      if (subtype === core.Null) return true;
      if (dart._isFutureOr(subtype)) {
        let subtypeArg = dart.nullCheck(dart.getGenericArgs(subtype))[$_get](0);
        if (dart._isFutureOr(supertype)) {
          let supertypeArg = dart.nullCheck(dart.getGenericArgs(supertype))[$_get](0);
          return this[_isSubtypeMatch](core.Object.as(subtypeArg), core.Object.as(supertypeArg));
        }
        let subtypeFuture = async.Future$(subtypeArg);
        return dart.test(this[_isSubtypeMatch](subtypeFuture, supertype)) && dart.test(this[_isSubtypeMatch](core.Object.as(dart.nullCheck(subtypeArg)), supertype));
      }
      if (dart._isFutureOr(supertype)) {
        let supertypeArg = dart.nullCheck(dart.getGenericArgs(supertype))[$_get](0);
        let supertypeFuture = async.Future$(supertypeArg);
        return dart.test(this[_isSubtypeMatch](subtype, supertypeFuture)) || dart.test(this[_isSubtypeMatch](subtype, core.Object.as(supertypeArg)));
      }
      if (dart.TypeVariable.is(subtype)) {
        return dart.TypeVariable.is(supertype) && subtype == supertype;
      }
      if (dart.GenericFunctionType.is(subtype)) {
        if (dart.GenericFunctionType.is(supertype)) {
          let formalCount = subtype.formalCount;
          if (formalCount != supertype.formalCount) return false;
          let fresh = supertype.typeFormals;
          let t1Bounds = subtype.instantiateTypeBounds(fresh);
          let t2Bounds = supertype.instantiateTypeBounds(fresh);
          for (let i = 0; i < dart.notNull(formalCount); i = i + 1) {
            if (!dart.test(this[_isSubtypeMatch](t2Bounds[$_get](i), t1Bounds[$_get](i)))) {
              return false;
            }
          }
          return this[_isFunctionSubtypeMatch](subtype.instantiate(fresh), supertype.instantiate(fresh));
        } else {
          return false;
        }
      } else if (dart.GenericFunctionType.is(supertype)) {
        return false;
      }
      if (dart.FunctionType.is(subtype)) {
        if (!dart.FunctionType.is(supertype)) {
          if (supertype === core.Function || supertype === core.Object) {
            return true;
          } else {
            return false;
          }
        }
        if (dart.FunctionType.is(supertype)) {
          return this[_isFunctionSubtypeMatch](subtype, supertype);
        }
      }
      return this[_isInterfaceSubtypeMatch](subtype, supertype);
    }
    [_isTop$](type) {
      if (type == null) dart.nullFailed(I[5], 1996, 22, "type");
      return core.identical(type, dart.dynamic) || core.identical(type, dart.void) || type === core.Object;
    }
  };
  (dart._TypeInferrer.new = function(typeVariables) {
    if (typeVariables == null) dart.nullFailed(I[5], 1697, 40, "typeVariables");
    this[_typeVariables] = T$.LinkedHashMapOfTypeVariable$TypeConstraint().fromIterables(typeVariables, typeVariables[$map](dart.TypeConstraint, _ => {
      if (_ == null) dart.nullFailed(I[5], 1699, 47, "_");
      return new dart.TypeConstraint.new();
    }));
    ;
  }).prototype = dart._TypeInferrer.prototype;
  dart.addTypeTests(dart._TypeInferrer);
  dart.addTypeCaches(dart._TypeInferrer);
  dart.setMethodSignature(dart._TypeInferrer, () => ({
    __proto__: dart.getMethods(dart._TypeInferrer.__proto__),
    getInferredTypes: dart.fnType(dart.nullable(core.List$(core.Object)), []),
    trySubtypeMatch: dart.fnType(core.bool, [core.Object, core.Object]),
    [_constrainLower]: dart.fnType(dart.void, [dart.TypeVariable, core.Object]),
    [_constrainUpper]: dart.fnType(dart.void, [dart.TypeVariable, core.Object]),
    [_isFunctionSubtypeMatch]: dart.fnType(core.bool, [dart.FunctionType, dart.FunctionType]),
    [_isInterfaceSubtypeMatch]: dart.fnType(core.bool, [core.Object, core.Object]),
    [_isSubtypeMatch]: dart.fnType(core.bool, [core.Object, core.Object]),
    [_isTop$]: dart.fnType(core.bool, [core.Object])
  }));
  dart.setLibraryUri(dart._TypeInferrer, I[9]);
  dart.setFieldSignature(dart._TypeInferrer, () => ({
    __proto__: dart.getFields(dart._TypeInferrer.__proto__),
    [_typeVariables]: dart.finalFieldType(core.Map$(dart.TypeVariable, dart.TypeConstraint))
  }));
  var lower = dart.privateName(dart, "TypeConstraint.lower");
  var upper = dart.privateName(dart, "TypeConstraint.upper");
  dart.TypeConstraint = class TypeConstraint extends core.Object {
    get lower() {
      return this[lower];
    }
    set lower(value) {
      this[lower] = value;
    }
    get upper() {
      return this[upper];
    }
    set upper(value) {
      this[upper] = value;
    }
    [_constrainLower](type) {
      if (type == null) dart.nullFailed(I[5], 2012, 31, "type");
      let _lower = this.lower;
      if (_lower != null) {
        if (dart.isSubtypeOf(_lower, type)) {
          return;
        }
        if (!dart.isSubtypeOf(type, _lower)) {
          type = core.Null;
        }
      }
      this.lower = type;
    }
    [_constrainUpper](type) {
      if (type == null) dart.nullFailed(I[5], 2027, 31, "type");
      let _upper = this.upper;
      if (_upper != null) {
        if (dart.isSubtypeOf(type, _upper)) {
          return;
        }
        if (!dart.isSubtypeOf(_upper, type)) {
          type = core.Object;
        }
      }
      this.upper = type;
    }
    toString() {
      return dart.typeName(this.lower) + " <: <type> <: " + dart.typeName(this.upper);
    }
  };
  (dart.TypeConstraint.new = function() {
    this[lower] = null;
    this[upper] = null;
    ;
  }).prototype = dart.TypeConstraint.prototype;
  dart.addTypeTests(dart.TypeConstraint);
  dart.addTypeCaches(dart.TypeConstraint);
  dart.setMethodSignature(dart.TypeConstraint, () => ({
    __proto__: dart.getMethods(dart.TypeConstraint.__proto__),
    [_constrainLower]: dart.fnType(dart.void, [core.Object]),
    [_constrainUpper]: dart.fnType(dart.void, [core.Object])
  }));
  dart.setLibraryUri(dart.TypeConstraint, I[9]);
  dart.setFieldSignature(dart.TypeConstraint, () => ({
    __proto__: dart.getFields(dart.TypeConstraint.__proto__),
    lower: dart.fieldType(dart.nullable(core.Object)),
    upper: dart.fieldType(dart.nullable(core.Object))
  }));
  dart.defineExtensionMethods(dart.TypeConstraint, ['toString']);
  var _trace = dart.privateName(dart, "_trace");
  var _jsObjectMissingTrace = dart.privateName(dart, "_jsObjectMissingTrace");
  dart._StackTrace = class _StackTrace extends core.Object {
    toString() {
      if (this[_trace] != null) return dart.nullCheck(this[_trace]);
      let e = this[_jsError$];
      let trace = "";
      if (e != null && typeof e === "object") {
        trace = _interceptors.NativeError.is(e) ? e[$dartStack]() : e.stack;
        let mapper = _debugger.stackTraceMapper;
        if (trace != null && mapper != null) {
          trace = mapper(trace);
        }
      }
      if (trace[$isEmpty] || this[_jsObjectMissingTrace] != null) {
        let jsToString = null;
        try {
          jsToString = "" + this[_jsObjectMissingTrace];
        } catch (e$) {
          let _ = dart.getThrown(e$);
          if (core.Object.is(_)) {
            jsToString = "<error converting JS object to string>";
          } else
            throw e$;
        }
        trace = "Non-error `" + dart.str(jsToString) + "` thrown by JS does not have stack trace." + "\nCaught in Dart at:\n\n" + dart.str(trace);
      }
      return this[_trace] = trace;
    }
  };
  (dart._StackTrace.new = function(_jsError) {
    this[_trace] = null;
    this[_jsError$] = _jsError;
    this[_jsObjectMissingTrace] = null;
    ;
  }).prototype = dart._StackTrace.prototype;
  (dart._StackTrace.missing = function(caughtObj) {
    this[_trace] = null;
    this[_jsObjectMissingTrace] = caughtObj != null ? caughtObj : "null";
    this[_jsError$] = Error();
    ;
  }).prototype = dart._StackTrace.prototype;
  dart.addTypeTests(dart._StackTrace);
  dart.addTypeCaches(dart._StackTrace);
  dart._StackTrace[dart.implements] = () => [core.StackTrace];
  dart.setLibraryUri(dart._StackTrace, I[9]);
  dart.setFieldSignature(dart._StackTrace, () => ({
    __proto__: dart.getFields(dart._StackTrace.__proto__),
    [_jsError$]: dart.finalFieldType(dart.nullable(core.Object)),
    [_jsObjectMissingTrace]: dart.finalFieldType(dart.nullable(core.Object)),
    [_trace]: dart.fieldType(dart.nullable(core.String))
  }));
  dart.defineExtensionMethods(dart._StackTrace, ['toString']);
  var memberName$ = dart.privateName(dart, "InvocationImpl.memberName");
  var positionalArguments$ = dart.privateName(dart, "InvocationImpl.positionalArguments");
  var namedArguments$ = dart.privateName(dart, "InvocationImpl.namedArguments");
  var typeArguments$ = dart.privateName(dart, "InvocationImpl.typeArguments");
  var isMethod$ = dart.privateName(dart, "InvocationImpl.isMethod");
  var isGetter$ = dart.privateName(dart, "InvocationImpl.isGetter");
  var isSetter$ = dart.privateName(dart, "InvocationImpl.isSetter");
  var failureMessage$ = dart.privateName(dart, "InvocationImpl.failureMessage");
  let const$;
  let const$0;
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([], T$.TypeL());
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "none"
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "skipDart"
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "keyToString"
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "asClass"
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "asObject"
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: _debugger.JsonMLConfig.prototype,
        [name$0]: "asMap"
      });
    },
    get C7() {
      return C[7] = dart.fn(_debugger.getTypeName, T$.dynamicToString());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: _foreign_helper._Rest.prototype
      });
    },
    get C9() {
      return C[9] = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver));
    },
    get C10() {
      return C[10] = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments));
    },
    get C11() {
      return C[11] = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName));
    },
    get C12() {
      return C[12] = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation));
    },
    get C13() {
      return C[13] = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments));
    },
    get C14() {
      return C[14] = dart.const(new _js_helper.PrivateSymbol.new('_hasValue', _hasValue));
    },
    get C15() {
      return C[15] = dart.const(new _js_helper.PrivateSymbol.new('_errorExplanation', _errorExplanation));
    },
    get C16() {
      return C[16] = dart.const(new _js_helper.PrivateSymbol.new('_errorName', _errorName));
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: core.OutOfMemoryError.prototype
      });
    },
    get C18() {
      return C[18] = dart.fn(collection.ListMixin._compareAny, T$.dynamicAnddynamicToint());
    },
    get C19() {
      return C[19] = dart.fn(collection.MapBase._id, T$.ObjectNToObjectN());
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: T$.EmptyIteratorOfNeverL().prototype
      });
    },
    get C21() {
      return C[21] = dart.constList([1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000.0, 100000000000.0, 1000000000000.0, 10000000000000.0, 100000000000000.0, 1000000000000000.0, 10000000000000000.0, 100000000000000000.0, 1000000000000000000.0, 10000000000000000000.0, 100000000000000000000.0, 1e+21, 1e+22], T$.doubleL());
    },
    get C22() {
      return C[22] = dart.fn(_js_helper.Primitives.dateNow, T$.VoidToint());
    },
    get C23() {
      return C[23] = dart.const(new _js_helper.PrivateSymbol.new('_receiver', _receiver$1));
    },
    get C24() {
      return C[24] = dart.const(new _js_helper.PrivateSymbol.new('_arguments', _arguments$0));
    },
    get C25() {
      return C[25] = dart.const(new _js_helper.PrivateSymbol.new('_memberName', _memberName$0));
    },
    get C26() {
      return C[26] = dart.const(new _js_helper.PrivateSymbol.new('_invocation', _invocation$0));
    },
    get C27() {
      return C[27] = dart.const(new _js_helper.PrivateSymbol.new('_namedArguments', _namedArguments$0));
    },
    get C28() {
      return C[28] = dart.applyExtensionForTesting;
    },
    get C29() {
      return C[29] = dart.fn(_js_helper.assertInterop, T$.ObjectNTovoid());
    },
    get C30() {
      return C[30] = dart.fn(_js_helper._matchString, T$.MatchToString());
    },
    get C31() {
      return C[31] = dart.fn(_js_helper._stringIdentity, T$.StringToString());
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: _js_helper._Patch.prototype
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: _js_helper._NotNull.prototype
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: _js_helper._Undefined.prototype
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: _js_helper._NullCheck.prototype
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: typed_data.Endian.prototype,
        [Endian__littleEndian]: false
      });
    },
    get C37() {
      return C[37] = dart.fn(async._nullDataHandler, T$.dynamicTovoid());
    },
    get C38() {
      return C[38] = dart.fn(async._nullErrorHandler, T$.ObjectAndStackTraceTovoid());
    },
    get C39() {
      return C[39] = dart.fn(async._nullDoneHandler, T$.VoidTovoid());
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: async._DelayedDone.prototype
      });
    },
    get C41() {
      return C[41] = dart.fn(async.Future._kTrue, T$.ObjectNTobool());
    },
    get C42() {
      return C[42] = async._AsyncRun._scheduleImmediateJSOverride;
    },
    get C43() {
      return C[43] = async._AsyncRun._scheduleImmediateWithPromise;
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: async._RootZone.prototype
      });
    },
    get C46() {
      return C[46] = dart.fn(async._rootRun, T$.ZoneNAndZoneDelegateNAndZone__ToR());
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: async._RunNullaryZoneFunction.prototype,
        [$function$1]: C[46] || CT.C46,
        [zone$0]: C[44] || CT.C44
      });
    },
    get C48() {
      return C[48] = dart.fn(async._rootRunUnary, T$.ZoneNAndZoneDelegateNAndZone__ToR$1());
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: async._RunUnaryZoneFunction.prototype,
        [$function$2]: C[48] || CT.C48,
        [zone$1]: C[44] || CT.C44
      });
    },
    get C50() {
      return C[50] = dart.fn(async._rootRunBinary, T$.ZoneNAndZoneDelegateNAndZone__ToR$2());
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: async._RunBinaryZoneFunction.prototype,
        [$function$3]: C[50] || CT.C50,
        [zone$2]: C[44] || CT.C44
      });
    },
    get C52() {
      return C[52] = dart.fn(async._rootRegisterCallback, T$.ZoneAndZoneDelegateAndZone__ToFn());
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: async._RegisterNullaryZoneFunction.prototype,
        [$function$4]: C[52] || CT.C52,
        [zone$3]: C[44] || CT.C44
      });
    },
    get C54() {
      return C[54] = dart.fn(async._rootRegisterUnaryCallback, T$.ZoneAndZoneDelegateAndZone__ToFn$1());
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: async._RegisterUnaryZoneFunction.prototype,
        [$function$5]: C[54] || CT.C54,
        [zone$4]: C[44] || CT.C44
      });
    },
    get C56() {
      return C[56] = dart.fn(async._rootRegisterBinaryCallback, T$.ZoneAndZoneDelegateAndZone__ToFn$2());
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: async._RegisterBinaryZoneFunction.prototype,
        [$function$6]: C[56] || CT.C56,
        [zone$5]: C[44] || CT.C44
      });
    },
    get C58() {
      return C[58] = dart.fn(async._rootErrorCallback, T$.ZoneAndZoneDelegateAndZone__ToAsyncErrorN());
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLAsyncErrorN().prototype,
        [$function$0]: C[58] || CT.C58,
        [zone$]: C[44] || CT.C44
      });
    },
    get C60() {
      return C[60] = dart.fn(async._rootScheduleMicrotask, T$.ZoneNAndZoneDelegateNAndZone__Tovoid());
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid().prototype,
        [$function$0]: C[60] || CT.C60,
        [zone$]: C[44] || CT.C44
      });
    },
    get C62() {
      return C[62] = dart.fn(async._rootCreateTimer, T$.ZoneAndZoneDelegateAndZone__ToTimer());
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL().prototype,
        [$function$0]: C[62] || CT.C62,
        [zone$]: C[44] || CT.C44
      });
    },
    get C64() {
      return C[64] = dart.fn(async._rootCreatePeriodicTimer, T$.ZoneAndZoneDelegateAndZone__ToTimer$1());
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLTimerL$1().prototype,
        [$function$0]: C[64] || CT.C64,
        [zone$]: C[44] || CT.C44
      });
    },
    get C66() {
      return C[66] = dart.fn(async._rootPrint, T$.ZoneAndZoneDelegateAndZone__Tovoid$1());
    },
    get C65() {
      return C[65] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$1().prototype,
        [$function$0]: C[66] || CT.C66,
        [zone$]: C[44] || CT.C44
      });
    },
    get C68() {
      return C[68] = dart.fn(async._rootFork, T$.ZoneNAndZoneDelegateNAndZone__ToZone());
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLZoneL().prototype,
        [$function$0]: C[68] || CT.C68,
        [zone$]: C[44] || CT.C44
      });
    },
    get C70() {
      return C[70] = dart.fn(async._rootHandleUncaughtError, T$.ZoneNAndZoneDelegateNAndZone__Tovoid$1());
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: T$._ZoneFunctionOfZoneLAndZoneDelegateLAndZoneL__ToLvoid$2().prototype,
        [$function$0]: C[70] || CT.C70,
        [zone$]: C[44] || CT.C44
      });
    },
    get C71() {
      return C[71] = dart.fn(async._startMicrotaskLoop, T$.VoidTovoid());
    },
    get C72() {
      return C[72] = dart.fn(async._printToZone, T$.StringTovoid());
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: async._ZoneSpecification.prototype,
        [fork$]: null,
        [print$]: null,
        [createPeriodicTimer$]: null,
        [createTimer$]: null,
        [scheduleMicrotask$]: null,
        [errorCallback$]: null,
        [registerBinaryCallback$]: null,
        [registerUnaryCallback$]: null,
        [registerCallback$]: null,
        [runBinary$]: null,
        [runUnary$]: null,
        [run$]: null,
        [handleUncaughtError$]: null
      });
    },
    get C74() {
      return C[74] = dart.hashCode;
    },
    get C75() {
      return C[75] = dart.fn(core.identityHashCode, T$.ObjectNToint());
    },
    get C76() {
      return C[76] = dart.fn(core.identical, T$.ObjectNAndObjectNTobool());
    },
    get C77() {
      return C[77] = dart.equals;
    },
    get C78() {
      return C[78] = dart.fn(core.Comparable.compare, T$0.ComparableAndComparableToint());
    },
    get C79() {
      return C[79] = dart.fn(collection._dynamicCompare, T$.dynamicAnddynamicToint());
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: convert.AsciiDecoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 127,
        [_UnicodeSubsetDecoder__allowInvalid]: true
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: convert.AsciiDecoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 127,
        [_UnicodeSubsetDecoder__allowInvalid]: false
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: convert.AsciiEncoder.prototype,
        [_UnicodeSubsetEncoder__subsetMask]: 127
      });
    },
    get C83() {
      return C[83] = dart.constList([239, 191, 189], T$0.intL());
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: convert.Base64Encoder.prototype,
        [Base64Encoder__urlSafe]: false
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: convert.Base64Encoder.prototype,
        [Base64Encoder__urlSafe]: true
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: convert.Base64Decoder.prototype
      });
    },
    get C87() {
      return C[87] = dart.constList([], T$0.intL());
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: true,
        [escapeApos$]: true,
        [escapeQuot$]: true,
        [escapeLtGt$]: true,
        [_name$2]: "unknown"
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: false,
        [escapeApos$]: false,
        [escapeQuot$]: true,
        [escapeLtGt$]: true,
        [_name$2]: "attribute"
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: false,
        [escapeApos$]: true,
        [escapeQuot$]: false,
        [escapeLtGt$]: true,
        [_name$2]: "attribute"
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: convert.HtmlEscapeMode.prototype,
        [escapeSlash$]: false,
        [escapeApos$]: false,
        [escapeQuot$]: false,
        [escapeLtGt$]: true,
        [_name$2]: "element"
      });
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: convert.JsonEncoder.prototype,
        [JsonEncoder__toEncodable]: null,
        [JsonEncoder_indent]: null
      });
    },
    get C93() {
      return C[93] = dart.const({
        __proto__: convert.JsonDecoder.prototype,
        [JsonDecoder__reviver]: null
      });
    },
    get C94() {
      return C[94] = dart.fn(convert._defaultToEncodable, T$.dynamicTodynamic());
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: convert.Latin1Decoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 255,
        [_UnicodeSubsetDecoder__allowInvalid]: true
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: convert.Latin1Decoder.prototype,
        [_UnicodeSubsetDecoder__subsetMask]: 255,
        [_UnicodeSubsetDecoder__allowInvalid]: false
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: convert.Latin1Encoder.prototype,
        [_UnicodeSubsetEncoder__subsetMask]: 255
      });
    },
    get C98() {
      return C[98] = dart.constList([65533], T$0.intL());
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [Utf8Decoder__allowMalformed]: true
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: convert.Utf8Decoder.prototype,
        [Utf8Decoder__allowMalformed]: false
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: convert.Utf8Encoder.prototype
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: convert.AsciiCodec.prototype,
        [_allowInvalid]: false
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: convert.Base64Codec.prototype,
        [_encoder]: C[84] || CT.C84
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: convert.Base64Codec.prototype,
        [_encoder]: C[85] || CT.C85
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: convert.HtmlEscape.prototype,
        [mode$]: C[88] || CT.C88
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: convert.JsonCodec.prototype,
        [_toEncodable]: null,
        [_reviver]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: convert.Latin1Codec.prototype,
        [_allowInvalid$1]: false
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: convert.Utf8Codec.prototype,
        [_allowMalformed]: false
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 0
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 1
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 2
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 3
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: io.FileMode.prototype,
        [_mode$]: 4
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 1
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 2
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 3
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: io.FileLock.prototype,
        [_type$1]: 4
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: convert.LineSplitter.prototype
      });
    },
    get C119() {
      return C[119] = dart.fn(io._FileResourceInfo.getOpenFiles, T$0.dynamicAnddynamicToFutureOfServiceExtensionResponse());
    },
    get C120() {
      return C[120] = dart.fn(io._FileResourceInfo.getOpenFileInfoMapByID, T$0.dynamicAnddynamicToFutureOfServiceExtensionResponse());
    },
    get C121() {
      return C[121] = dart.constList(["file", "directory", "link", "notFound"], T$.StringL());
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 0
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 1
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 2
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: io.FileSystemEntityType.prototype,
        [_type$2]: 3
      });
    },
    get C126() {
      return C[126] = dart.constList([C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125], T$0.FileSystemEntityTypeL());
    },
    get C127() {
      return C[127] = dart.constList(["---", "--x", "-w-", "-wx", "r--", "r-x", "rw-", "rwx"], T$.StringL());
    },
    get C128() {
      return C[128] = dart.fn(io._NetworkProfiling._serviceExtensionHandler, T$0.StringAndMapOfString$StringToFutureOfServiceExtensionResponse());
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.startTime",
        index: 0
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.endTime",
        index: 1
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.address",
        index: 2
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.port",
        index: 3
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.socketType",
        index: 4
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.readBytes",
        index: 5
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: io._SocketProfileType.prototype,
        [_name$4]: "_SocketProfileType.writeBytes",
        index: 6
      });
    },
    get C136() {
      return C[136] = dart.constList([C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133, C[134] || CT.C134, C[135] || CT.C135], T$0._SocketProfileTypeL());
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 0
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 1
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 2
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: io.ProcessStartMode.prototype,
        [_mode$0]: 3
      });
    },
    get C137() {
      return C[137] = dart.constList([C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140, C[141] || CT.C141], T$0.ProcessStartModeL());
    },
    get C142() {
      return C[142] = dart.constList(["normal", "inheritStdio", "detached", "detachedWithStdio"], T$.StringL());
    },
    get C143() {
      return C[143] = dart.const({
        __proto__: io.SystemEncoding.prototype
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTERM",
        [ProcessSignal__signalNumber]: 15
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGHUP",
        [ProcessSignal__signalNumber]: 1
      });
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGINT",
        [ProcessSignal__signalNumber]: 2
      });
    },
    get C147() {
      return C[147] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGQUIT",
        [ProcessSignal__signalNumber]: 3
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGILL",
        [ProcessSignal__signalNumber]: 4
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTRAP",
        [ProcessSignal__signalNumber]: 5
      });
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGABRT",
        [ProcessSignal__signalNumber]: 6
      });
    },
    get C151() {
      return C[151] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGBUS",
        [ProcessSignal__signalNumber]: 7
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGFPE",
        [ProcessSignal__signalNumber]: 8
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGKILL",
        [ProcessSignal__signalNumber]: 9
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGUSR1",
        [ProcessSignal__signalNumber]: 10
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSEGV",
        [ProcessSignal__signalNumber]: 11
      });
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGUSR2",
        [ProcessSignal__signalNumber]: 12
      });
    },
    get C157() {
      return C[157] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPIPE",
        [ProcessSignal__signalNumber]: 13
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGALRM",
        [ProcessSignal__signalNumber]: 14
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGCHLD",
        [ProcessSignal__signalNumber]: 17
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGCONT",
        [ProcessSignal__signalNumber]: 18
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSTOP",
        [ProcessSignal__signalNumber]: 19
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTSTP",
        [ProcessSignal__signalNumber]: 20
      });
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTTIN",
        [ProcessSignal__signalNumber]: 21
      });
    },
    get C164() {
      return C[164] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGTTOU",
        [ProcessSignal__signalNumber]: 22
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGURG",
        [ProcessSignal__signalNumber]: 23
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGXCPU",
        [ProcessSignal__signalNumber]: 24
      });
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGXFSZ",
        [ProcessSignal__signalNumber]: 25
      });
    },
    get C168() {
      return C[168] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGVTALRM",
        [ProcessSignal__signalNumber]: 26
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPROF",
        [ProcessSignal__signalNumber]: 27
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGWINCH",
        [ProcessSignal__signalNumber]: 28
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGPOLL",
        [ProcessSignal__signalNumber]: 29
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: io.ProcessSignal.prototype,
        [ProcessSignal__name]: "SIGSYS",
        [ProcessSignal__signalNumber]: 31
      });
    },
    get C173() {
      return C[173] = dart.constList(["RawSocketEvent.read", "RawSocketEvent.write", "RawSocketEvent.readClosed", "RawSocketEvent.closed"], T$.StringL());
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 0
      });
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 1
      });
    },
    get C176() {
      return C[176] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 2
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: io.RawSocketEvent.prototype,
        [_value$]: 3
      });
    },
    get C178() {
      return C[178] = dart.constList(["ANY", "IPv4", "IPv6", "Unix"], T$.StringL());
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: 0
      });
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: 1
      });
    },
    get C181() {
      return C[181] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: 2
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: io.InternetAddressType.prototype,
        [_value$1]: -1
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: io.SocketDirection.prototype,
        [_value$2]: 0
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: io.SocketDirection.prototype,
        [_value$2]: 1
      });
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: io.SocketDirection.prototype,
        [_value$2]: 2
      });
    },
    get C186() {
      return C[186] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 0
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 1
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 2
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 3
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: io.SocketOption.prototype,
        [_value$3]: 4
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.SOL_SOCKET",
        index: 0
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_IP",
        index: 1
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IP_MULTICAST_IF",
        index: 2
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_IPV6",
        index: 3
      });
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPV6_MULTICAST_IF",
        index: 4
      });
    },
    get C196() {
      return C[196] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_TCP",
        index: 5
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: io._RawSocketOptions.prototype,
        [_name$4]: "_RawSocketOptions.IPPROTO_UDP",
        index: 6
      });
    },
    get C198() {
      return C[198] = dart.constList([C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193, C[194] || CT.C194, C[195] || CT.C195, C[196] || CT.C196, C[197] || CT.C197], T$0._RawSocketOptionsL());
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "terminal"
      });
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "pipe"
      });
    },
    get C201() {
      return C[201] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "file"
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: io.StdioType.prototype,
        [name$11]: "other"
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: io._WindowsCodePageEncoder.prototype
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: io._WindowsCodePageDecoder.prototype
      });
    },
    get C205() {
      return C[205] = dart.constList([1, 2, 3, 4, 0], T$0.intL());
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: io.ZLibCodec.prototype,
        [dictionary$]: null,
        [raw$]: false,
        [windowBits$]: 15,
        [strategy$]: 0,
        [memLevel$]: 8,
        [level$]: 6,
        [gzip$]: false
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: io.GZipCodec.prototype,
        [raw$0]: false,
        [dictionary$0]: null,
        [windowBits$0]: 15,
        [strategy$0]: 0,
        [memLevel$0]: 8,
        [level$0]: 6,
        [gzip$0]: true
      });
    },
    get C208() {
      return C[208] = dart.fn(async.runZoned, T$0.Fn__ToR());
    },
    get C209() {
      return C[209] = dart.fn(js._convertToJS, T$.ObjectNToObjectN());
    },
    get C210() {
      return C[210] = dart.fn(js._wrapDartFunction, T$0.ObjectToObject());
    },
    get C211() {
      return C[211] = dart.fn(js._wrapToDartHelper, T$0.ObjectToJsObject());
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: math._JSRandom.prototype
      });
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: typed_data.Endian.prototype,
        [Endian__littleEndian]: true
      });
    },
    get C214() {
      return C[214] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "abort"
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "close"
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "error"
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: T$0.EventStreamProviderOfVersionChangeEventL().prototype,
        [S.EventStreamProvider__eventType]: "versionchange"
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "success"
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "blocked"
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: T$0.EventStreamProviderOfVersionChangeEventL().prototype,
        [S.EventStreamProvider__eventType]: "upgradeneeded"
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "complete"
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: _js_helper.Creates.prototype,
        [types$0]: "JSExtendableArray|=Object|num|String"
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: _js_helper.Returns.prototype,
        [types$1]: "JSExtendableArray|=Object|num|String"
      });
    },
    get C224() {
      return C[224] = dart.fn(html_common.convertDartToNative_Dictionary, T$0.MapNAndFnTodynamic());
    },
    get C226() {
      return C[226] = dart.fn(html$.Element._determineMouseWheelEventType, T$0.EventTargetToString());
    },
    get C225() {
      return C[225] = dart.const({
        __proto__: T$0._CustomEventStreamProviderOfWheelEventL().prototype,
        [S$._CustomEventStreamProvider__eventTypeGetter]: C[226] || CT.C226
      });
    },
    get C228() {
      return C[228] = dart.fn(html$.Element._determineTransitionEventType, T$0.EventTargetToString());
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: T$0._CustomEventStreamProviderOfTransitionEventL().prototype,
        [S$._CustomEventStreamProvider__eventTypeGetter]: C[228] || CT.C228
      });
    },
    get C229() {
      return C[229] = dart.constList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"], T$.StringL());
    },
    get C230() {
      return C[230] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "beforecopy"
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "beforecut"
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "beforepaste"
      });
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "blur"
      });
    },
    get C234() {
      return C[234] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "canplay"
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "canplaythrough"
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "change"
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "click"
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "contextmenu"
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: T$0.EventStreamProviderOfClipboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "copy"
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: T$0.EventStreamProviderOfClipboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "cut"
      });
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "dblclick"
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "drag"
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragend"
      });
    },
    get C244() {
      return C[244] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragenter"
      });
    },
    get C245() {
      return C[245] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragleave"
      });
    },
    get C246() {
      return C[246] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragover"
      });
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "dragstart"
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "drop"
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "durationchange"
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "emptied"
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "ended"
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "focus"
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "input"
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "invalid"
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: T$0.EventStreamProviderOfKeyboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "keydown"
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: T$0.EventStreamProviderOfKeyboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "keypress"
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: T$0.EventStreamProviderOfKeyboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "keyup"
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "load"
      });
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadeddata"
      });
    },
    get C260() {
      return C[260] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadedmetadata"
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mousedown"
      });
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseenter"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseleave"
      });
    },
    get C264() {
      return C[264] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mousemove"
      });
    },
    get C265() {
      return C[265] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseout"
      });
    },
    get C266() {
      return C[266] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseover"
      });
    },
    get C267() {
      return C[267] = dart.const({
        __proto__: T$0.EventStreamProviderOfMouseEventL().prototype,
        [S.EventStreamProvider__eventType]: "mouseup"
      });
    },
    get C268() {
      return C[268] = dart.const({
        __proto__: T$0.EventStreamProviderOfClipboardEventL().prototype,
        [S.EventStreamProvider__eventType]: "paste"
      });
    },
    get C269() {
      return C[269] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pause"
      });
    },
    get C270() {
      return C[270] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "play"
      });
    },
    get C271() {
      return C[271] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "playing"
      });
    },
    get C272() {
      return C[272] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "ratechange"
      });
    },
    get C273() {
      return C[273] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "reset"
      });
    },
    get C274() {
      return C[274] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "resize"
      });
    },
    get C275() {
      return C[275] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "scroll"
      });
    },
    get C276() {
      return C[276] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "search"
      });
    },
    get C277() {
      return C[277] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "seeked"
      });
    },
    get C278() {
      return C[278] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "seeking"
      });
    },
    get C279() {
      return C[279] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "select"
      });
    },
    get C280() {
      return C[280] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "selectstart"
      });
    },
    get C281() {
      return C[281] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "stalled"
      });
    },
    get C282() {
      return C[282] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "submit"
      });
    },
    get C283() {
      return C[283] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "suspend"
      });
    },
    get C284() {
      return C[284] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "timeupdate"
      });
    },
    get C285() {
      return C[285] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchcancel"
      });
    },
    get C286() {
      return C[286] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchend"
      });
    },
    get C287() {
      return C[287] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchenter"
      });
    },
    get C288() {
      return C[288] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchleave"
      });
    },
    get C289() {
      return C[289] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchmove"
      });
    },
    get C290() {
      return C[290] = dart.const({
        __proto__: T$0.EventStreamProviderOfTouchEventL().prototype,
        [S.EventStreamProvider__eventType]: "touchstart"
      });
    },
    get C291() {
      return C[291] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "volumechange"
      });
    },
    get C292() {
      return C[292] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "waiting"
      });
    },
    get C293() {
      return C[293] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitfullscreenchange"
      });
    },
    get C294() {
      return C[294] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitfullscreenerror"
      });
    },
    get C295() {
      return C[295] = dart.const({
        __proto__: T$0.EventStreamProviderOfWheelEventL().prototype,
        [S.EventStreamProvider__eventType]: "wheel"
      });
    },
    get C296() {
      return C[296] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessibleclick"
      });
    },
    get C297() {
      return C[297] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessiblecontextmenu"
      });
    },
    get C298() {
      return C[298] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessibledecrement"
      });
    },
    get C299() {
      return C[299] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessiblefocus"
      });
    },
    get C300() {
      return C[300] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessibleincrement"
      });
    },
    get C301() {
      return C[301] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "accessiblescrollintoview"
      });
    },
    get C302() {
      return C[302] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "cancel"
      });
    },
    get C303() {
      return C[303] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "finish"
      });
    },
    get C304() {
      return C[304] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "cached"
      });
    },
    get C305() {
      return C[305] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "checking"
      });
    },
    get C306() {
      return C[306] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "downloading"
      });
    },
    get C307() {
      return C[307] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "noupdate"
      });
    },
    get C308() {
      return C[308] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "obsolete"
      });
    },
    get C309() {
      return C[309] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "progress"
      });
    },
    get C310() {
      return C[310] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "updateready"
      });
    },
    get C311() {
      return C[311] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "hashchange"
      });
    },
    get C312() {
      return C[312] = dart.const({
        __proto__: T$0.EventStreamProviderOfMessageEventL().prototype,
        [S.EventStreamProvider__eventType]: "message"
      });
    },
    get C313() {
      return C[313] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "offline"
      });
    },
    get C314() {
      return C[314] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "online"
      });
    },
    get C315() {
      return C[315] = dart.const({
        __proto__: T$0.EventStreamProviderOfPopStateEventL().prototype,
        [S.EventStreamProvider__eventType]: "popstate"
      });
    },
    get C316() {
      return C[316] = dart.const({
        __proto__: T$0.EventStreamProviderOfStorageEventL().prototype,
        [S.EventStreamProvider__eventType]: "storage"
      });
    },
    get C317() {
      return C[317] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "unload"
      });
    },
    get C318() {
      return C[318] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "mute"
      });
    },
    get C319() {
      return C[319] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "unmute"
      });
    },
    get C320() {
      return C[320] = dart.const({
        __proto__: T$0.EventStreamProviderOfContextEventL().prototype,
        [S.EventStreamProvider__eventType]: "webglcontextlost"
      });
    },
    get C321() {
      return C[321] = dart.const({
        __proto__: T$0.EventStreamProviderOfContextEventL().prototype,
        [S.EventStreamProvider__eventType]: "webglcontextrestored"
      });
    },
    get C322() {
      return C[322] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pointerlockchange"
      });
    },
    get C323() {
      return C[323] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pointerlockerror"
      });
    },
    get C324() {
      return C[324] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "readystatechange"
      });
    },
    get C325() {
      return C[325] = dart.const({
        __proto__: T$0.EventStreamProviderOfSecurityPolicyViolationEventL().prototype,
        [S.EventStreamProvider__eventType]: "securitypolicyviolation"
      });
    },
    get C326() {
      return C[326] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "selectionchange"
      });
    },
    get C327() {
      return C[327] = dart.const({
        __proto__: html$.ScrollAlignment.prototype,
        [S$1._value$6]: "TOP"
      });
    },
    get C328() {
      return C[328] = dart.const({
        __proto__: html$.ScrollAlignment.prototype,
        [S$1._value$6]: "CENTER"
      });
    },
    get C329() {
      return C[329] = dart.const({
        __proto__: html$.ScrollAlignment.prototype,
        [S$1._value$6]: "BOTTOM"
      });
    },
    get C330() {
      return C[330] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "open"
      });
    },
    get C331() {
      return C[331] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "abort"
      });
    },
    get C332() {
      return C[332] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "error"
      });
    },
    get C333() {
      return C[333] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "load"
      });
    },
    get C334() {
      return C[334] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadend"
      });
    },
    get C335() {
      return C[335] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadstart"
      });
    },
    get C336() {
      return C[336] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "write"
      });
    },
    get C337() {
      return C[337] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "writeend"
      });
    },
    get C338() {
      return C[338] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "writestart"
      });
    },
    get C339() {
      return C[339] = dart.const({
        __proto__: T$0.EventStreamProviderOfFontFaceSetLoadEventL().prototype,
        [S.EventStreamProvider__eventType]: "loading"
      });
    },
    get C340() {
      return C[340] = dart.const({
        __proto__: T$0.EventStreamProviderOfFontFaceSetLoadEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadingdone"
      });
    },
    get C341() {
      return C[341] = dart.const({
        __proto__: T$0.EventStreamProviderOfFontFaceSetLoadEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadingerror"
      });
    },
    get C342() {
      return C[342] = dart.const({
        __proto__: T$0.EventStreamProviderOfWheelEventL().prototype,
        [S.EventStreamProvider__eventType]: "mousewheel"
      });
    },
    get C344() {
      return C[344] = dart.fn(html$.HtmlDocument._determineVisibilityChangeEventType, T$0.EventTargetToString());
    },
    get C343() {
      return C[343] = dart.const({
        __proto__: T$0._CustomEventStreamProviderOfEventL().prototype,
        [S$._CustomEventStreamProvider__eventTypeGetter]: C[344] || CT.C344
      });
    },
    get C345() {
      return C[345] = dart.const({
        __proto__: T$0.EventStreamProviderOfProgressEventL().prototype,
        [S.EventStreamProvider__eventType]: "timeout"
      });
    },
    get C346() {
      return C[346] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "addtrack"
      });
    },
    get C347() {
      return C[347] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "removetrack"
      });
    },
    get C348() {
      return C[348] = dart.constList([], T$0.MessagePortL());
    },
    get C349() {
      return C[349] = dart.const({
        __proto__: T$0.EventStreamProviderOfMidiMessageEventL().prototype,
        [S.EventStreamProvider__eventType]: "midimessage"
      });
    },
    get C350() {
      return C[350] = dart.constMap(T$.StringL(), T$0.boolL(), ["childList", true, "attributes", true, "characterData", true, "subtree", true, "attributeOldValue", true, "characterDataOldValue", true]);
    },
    get C351() {
      return C[351] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "click"
      });
    },
    get C352() {
      return C[352] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "show"
      });
    },
    get C353() {
      return C[353] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcDtmfToneChangeEventL().prototype,
        [S.EventStreamProvider__eventType]: "tonechange"
      });
    },
    get C354() {
      return C[354] = dart.const({
        __proto__: T$0.EventStreamProviderOfMediaStreamEventL().prototype,
        [S.EventStreamProvider__eventType]: "addstream"
      });
    },
    get C355() {
      return C[355] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcDataChannelEventL().prototype,
        [S.EventStreamProvider__eventType]: "datachannel"
      });
    },
    get C356() {
      return C[356] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcPeerConnectionIceEventL().prototype,
        [S.EventStreamProvider__eventType]: "icecandidate"
      });
    },
    get C357() {
      return C[357] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "iceconnectionstatechange"
      });
    },
    get C358() {
      return C[358] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "negotiationneeded"
      });
    },
    get C359() {
      return C[359] = dart.const({
        __proto__: T$0.EventStreamProviderOfMediaStreamEventL().prototype,
        [S.EventStreamProvider__eventType]: "removestream"
      });
    },
    get C360() {
      return C[360] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "signalingstatechange"
      });
    },
    get C361() {
      return C[361] = dart.const({
        __proto__: T$0.EventStreamProviderOfRtcTrackEventL().prototype,
        [S.EventStreamProvider__eventType]: "track"
      });
    },
    get C362() {
      return C[362] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "activate"
      });
    },
    get C363() {
      return C[363] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "fetch"
      });
    },
    get C364() {
      return C[364] = dart.const({
        __proto__: T$0.EventStreamProviderOfForeignFetchEventL().prototype,
        [S.EventStreamProvider__eventType]: "foreignfetch"
      });
    },
    get C365() {
      return C[365] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "install"
      });
    },
    get C366() {
      return C[366] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "connect"
      });
    },
    get C367() {
      return C[367] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "audioend"
      });
    },
    get C368() {
      return C[368] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "audiostart"
      });
    },
    get C369() {
      return C[369] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "end"
      });
    },
    get C370() {
      return C[370] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechRecognitionErrorL().prototype,
        [S.EventStreamProvider__eventType]: "error"
      });
    },
    get C371() {
      return C[371] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechRecognitionEventL().prototype,
        [S.EventStreamProvider__eventType]: "nomatch"
      });
    },
    get C372() {
      return C[372] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechRecognitionEventL().prototype,
        [S.EventStreamProvider__eventType]: "result"
      });
    },
    get C373() {
      return C[373] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "soundend"
      });
    },
    get C374() {
      return C[374] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "soundstart"
      });
    },
    get C375() {
      return C[375] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "speechend"
      });
    },
    get C376() {
      return C[376] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "speechstart"
      });
    },
    get C377() {
      return C[377] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "start"
      });
    },
    get C378() {
      return C[378] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "boundary"
      });
    },
    get C379() {
      return C[379] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "end"
      });
    },
    get C380() {
      return C[380] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "mark"
      });
    },
    get C381() {
      return C[381] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "resume"
      });
    },
    get C382() {
      return C[382] = dart.const({
        __proto__: T$0.EventStreamProviderOfSpeechSynthesisEventL().prototype,
        [S.EventStreamProvider__eventType]: "start"
      });
    },
    get C383() {
      return C[383] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "cuechange"
      });
    },
    get C384() {
      return C[384] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "enter"
      });
    },
    get C385() {
      return C[385] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "exit"
      });
    },
    get C386() {
      return C[386] = dart.const({
        __proto__: T$0.EventStreamProviderOfTrackEventL().prototype,
        [S.EventStreamProvider__eventType]: "addtrack"
      });
    },
    get C387() {
      return C[387] = dart.const({
        __proto__: T$0.EventStreamProviderOfCloseEventL().prototype,
        [S.EventStreamProvider__eventType]: "close"
      });
    },
    get C388() {
      return C[388] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "DOMContentLoaded"
      });
    },
    get C389() {
      return C[389] = dart.const({
        __proto__: T$0.EventStreamProviderOfDeviceMotionEventL().prototype,
        [S.EventStreamProvider__eventType]: "devicemotion"
      });
    },
    get C390() {
      return C[390] = dart.const({
        __proto__: T$0.EventStreamProviderOfDeviceOrientationEventL().prototype,
        [S.EventStreamProvider__eventType]: "deviceorientation"
      });
    },
    get C391() {
      return C[391] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "loadstart"
      });
    },
    get C392() {
      return C[392] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pagehide"
      });
    },
    get C393() {
      return C[393] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "pageshow"
      });
    },
    get C394() {
      return C[394] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "progress"
      });
    },
    get C395() {
      return C[395] = dart.const({
        __proto__: T$0.EventStreamProviderOfAnimationEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitAnimationEnd"
      });
    },
    get C396() {
      return C[396] = dart.const({
        __proto__: T$0.EventStreamProviderOfAnimationEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitAnimationIteration"
      });
    },
    get C397() {
      return C[397] = dart.const({
        __proto__: T$0.EventStreamProviderOfAnimationEventL().prototype,
        [S.EventStreamProvider__eventType]: "webkitAnimationStart"
      });
    },
    get C398() {
      return C[398] = dart.const({
        __proto__: html$._BeforeUnloadEventStreamProvider.prototype,
        [S$3._BeforeUnloadEventStreamProvider__eventType]: "beforeunload"
      });
    },
    get C399() {
      return C[399] = dart.fn(html$._Html5NodeValidator._standardAttributeValidator, T$0.ElementAndStringAndString__Tobool());
    },
    get C400() {
      return C[400] = dart.fn(html$._Html5NodeValidator._uriAttributeValidator, T$0.ElementAndStringAndString__Tobool());
    },
    get C401() {
      return C[401] = dart.constList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"], T$.StringL());
    },
    get C402() {
      return C[402] = dart.constList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"], T$.StringL());
    },
    get C403() {
      return C[403] = dart.constMap(T$.StringL(), T$0.intL(), ["Up", 38, "Down", 40, "Left", 37, "Right", 39, "Enter", 13, "F1", 112, "F2", 113, "F3", 114, "F4", 115, "F5", 116, "F6", 117, "F7", 118, "F8", 119, "F9", 120, "F10", 121, "F11", 122, "F12", 123, "U+007F", 46, "Home", 36, "End", 35, "PageUp", 33, "PageDown", 34, "Insert", 45]);
    },
    get C404() {
      return C[404] = dart.constList([], T$.StringL());
    },
    get C405() {
      return C[405] = dart.constList(["A", "FORM"], T$.StringL());
    },
    get C406() {
      return C[406] = dart.constList(["A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target"], T$.StringL());
    },
    get C407() {
      return C[407] = dart.constList(["A::href", "FORM::action"], T$.StringL());
    },
    get C408() {
      return C[408] = dart.constList(["IMG"], T$.StringL());
    },
    get C409() {
      return C[409] = dart.constList(["IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width"], T$.StringL());
    },
    get C410() {
      return C[410] = dart.constList(["IMG::src"], T$.StringL());
    },
    get C411() {
      return C[411] = dart.constList(["B", "BLOCKQUOTE", "BR", "EM", "H1", "H2", "H3", "H4", "H5", "H6", "HR", "I", "LI", "OL", "P", "SPAN", "UL"], T$.StringL());
    },
    get C412() {
      return C[412] = dart.constList(["bind", "if", "ref", "repeat", "syntax"], T$.StringL());
    },
    get C413() {
      return C[413] = dart.const({
        __proto__: html$.Console.prototype
      });
    },
    get C414() {
      return C[414] = dart.const({
        __proto__: html$._TrustedHtmlTreeSanitizer.prototype
      });
    },
    get C415() {
      return C[415] = dart.fn(html_common.convertNativeToDart_Dictionary, T$0.dynamicToMapNOfString$dynamic());
    },
    get C416() {
      return C[416] = dart.const({
        __proto__: _js_helper.Creates.prototype,
        [types$0]: "num|String|bool|JSExtendableArray|=Object|Blob|File|NativeByteBuffer|NativeTypedData|MessagePort"
      });
    },
    get C417() {
      return C[417] = dart.const({
        __proto__: _js_helper.Returns.prototype,
        [types$1]: "num|String|bool|JSExtendableArray|=Object|Blob|File|NativeByteBuffer|NativeTypedData|MessagePort"
      });
    },
    get C418() {
      return C[418] = dart.const({
        __proto__: T$0.EventStreamProviderOfAudioProcessingEventL().prototype,
        [S.EventStreamProvider__eventType]: "audioprocess"
      });
    },
    get C419() {
      return C[419] = dart.const({
        __proto__: core.IntegerDivisionByZeroException.prototype
      });
    },
    get C420() {
      return C[420] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 0
      });
    },
    get C421() {
      return C[421] = dart.constList([], T$.ObjectN());
    },
    get C422() {
      return C[422] = dart.constMap(T$.SymbolL(), T$.ObjectN(), []);
    },
    get C423() {
      return C[423] = dart.constList([], T$.ObjectL());
    },
    get C424() {
      return C[424] = dart.constMap(T$.SymbolL(), T$.ObjectL(), []);
    },
    get C425() {
      return C[425] = dart.fn(core._GeneratorIterable._id, T$0.intToint());
    },
    get C426() {
      return C[426] = dart.const({
        __proto__: core._StringStackTrace.prototype,
        [_StringStackTrace__stackTrace]: ""
      });
    },
    get C427() {
      return C[427] = dart.const(new _internal.Symbol.new('unary-'));
    },
    get C428() {
      return C[428] = dart.const(new _internal.Symbol.new(''));
    },
    get C429() {
      return C[429] = dart.fn(core.Uri.decodeComponent, T$.StringToString());
    },
    get C430() {
      return C[430] = dart.constMap(T$.StringL(), T$0.ListLOfStringL(), []);
    },
    get C431() {
      return C[431] = dart.fn(core._toUnmodifiableStringList, T$0.StringAndListOfStringToListOfString());
    },
    get C432() {
      return C[432] = dart.fn(core._Uri._createList, T$0.VoidToListOfString());
    },
    get C433() {
      return C[433] = dart.constList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C434() {
      return C[434] = dart.constList([0, 0, 26498, 1023, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C435() {
      return C[435] = dart.constList([0, 0, 65498, 45055, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C436() {
      return C[436] = dart.constList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047], T$0.intL());
    },
    get C437() {
      return C[437] = dart.constList([0, 0, 32776, 33792, 1, 10240, 0, 0], T$0.intL());
    },
    get C438() {
      return C[438] = dart.constList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C439() {
      return C[439] = dart.constList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431], T$0.intL());
    },
    get C440() {
      return C[440] = dart.constList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C441() {
      return C[441] = dart.constList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C442() {
      return C[442] = dart.constList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431], T$0.intL());
    },
    get C443() {
      return C[443] = dart.constList([0, 0, 27858, 1023, 65534, 51199, 65535, 32767], T$0.intL());
    },
    get C444() {
      return C[444] = dart.constMap(T$.StringL(), T$.StringL(), []);
    },
    get C445() {
      return C[445] = dart.const({
        __proto__: core.Deprecated.prototype,
        [message$11]: "next release"
      });
    },
    get C446() {
      return C[446] = dart.const({
        __proto__: core._Override.prototype
      });
    },
    get C447() {
      return C[447] = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$7]: "PointMode.points",
        index: 0
      });
    },
    get C448() {
      return C[448] = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$7]: "PointMode.lines",
        index: 1
      });
    },
    get C449() {
      return C[449] = dart.const({
        __proto__: ui.PointMode.prototype,
        [_name$7]: "PointMode.polygon",
        index: 2
      });
    },
    get C450() {
      return C[450] = dart.constList([C[447] || CT.C447, C[448] || CT.C448, C[449] || CT.C449], T$0.PointModeL());
    },
    get C451() {
      return C[451] = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name$7]: "ClipOp.difference",
        index: 0
      });
    },
    get C452() {
      return C[452] = dart.const({
        __proto__: ui.ClipOp.prototype,
        [_name$7]: "ClipOp.intersect",
        index: 1
      });
    },
    get C453() {
      return C[453] = dart.constList([C[451] || CT.C451, C[452] || CT.C452], T$0.ClipOpL());
    },
    get C454() {
      return C[454] = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$7]: "VertexMode.triangles",
        index: 0
      });
    },
    get C455() {
      return C[455] = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$7]: "VertexMode.triangleStrip",
        index: 1
      });
    },
    get C456() {
      return C[456] = dart.const({
        __proto__: ui.VertexMode.prototype,
        [_name$7]: "VertexMode.triangleFan",
        index: 2
      });
    },
    get C457() {
      return C[457] = dart.constList([C[454] || CT.C454, C[455] || CT.C455, C[456] || CT.C456], T$0.VertexModeL());
    },
    get C458() {
      return C[458] = dart.const({
        __proto__: ui.PathFillType.prototype,
        [_name$7]: "PathFillType.nonZero",
        index: 0
      });
    },
    get C459() {
      return C[459] = dart.const({
        __proto__: ui.PathFillType.prototype,
        [_name$7]: "PathFillType.evenOdd",
        index: 1
      });
    },
    get C460() {
      return C[460] = dart.constList([C[458] || CT.C458, C[459] || CT.C459], T$0.PathFillTypeL());
    },
    get C461() {
      return C[461] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.difference",
        index: 0
      });
    },
    get C462() {
      return C[462] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.intersect",
        index: 1
      });
    },
    get C463() {
      return C[463] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.union",
        index: 2
      });
    },
    get C464() {
      return C[464] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.xor",
        index: 3
      });
    },
    get C465() {
      return C[465] = dart.const({
        __proto__: ui.PathOperation.prototype,
        [_name$7]: "PathOperation.reverseDifference",
        index: 4
      });
    },
    get C466() {
      return C[466] = dart.constList([C[461] || CT.C461, C[462] || CT.C462, C[463] || CT.C463, C[464] || CT.C464, C[465] || CT.C465], T$0.PathOperationL());
    },
    get C467() {
      return C[467] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 0,
        [_dx$]: 0
      });
    },
    get C468() {
      return C[468] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1 / 0,
        [_dx$]: 1 / 0
      });
    },
    get C469() {
      return C[469] = dart.const({
        __proto__: ui.Size.prototype,
        [_dy$]: 0,
        [_dx$]: 0
      });
    },
    get C470() {
      return C[470] = dart.const({
        __proto__: ui.Size.prototype,
        [_dy$]: 1 / 0,
        [_dx$]: 1 / 0
      });
    },
    get C471() {
      return C[471] = dart.const({
        __proto__: ui.Rect.prototype,
        [bottom$]: 0,
        [right$]: 0,
        [top$1]: 0,
        [left$1]: 0
      });
    },
    get C472() {
      return C[472] = dart.const({
        __proto__: ui.Rect.prototype,
        [bottom$]: 1000000000,
        [right$]: 1000000000,
        [top$1]: -1000000000,
        [left$1]: -1000000000
      });
    },
    get C473() {
      return C[473] = dart.const({
        __proto__: ui.Radius.prototype,
        [y$3]: 0,
        [x$3]: 0
      });
    },
    get C474() {
      return C[474] = dart.const({
        __proto__: ui.RRect.prototype,
        [webOnlyUniformRadii]: false,
        [blRadiusY$]: 0,
        [blRadiusX$]: 0,
        [brRadiusY$]: 0,
        [brRadiusX$]: 0,
        [trRadiusY$]: 0,
        [trRadiusX$]: 0,
        [tlRadiusY$]: 0,
        [tlRadiusX$]: 0,
        [bottom$0]: 0,
        [right$0]: 0,
        [top$2]: 0,
        [left$2]: 0
      });
    },
    get C475() {
      return C[475] = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$7]: "StrokeCap.butt",
        index: 0
      });
    },
    get C476() {
      return C[476] = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$7]: "StrokeCap.round",
        index: 1
      });
    },
    get C477() {
      return C[477] = dart.const({
        __proto__: ui.StrokeCap.prototype,
        [_name$7]: "StrokeCap.square",
        index: 2
      });
    },
    get C478() {
      return C[478] = dart.constList([C[475] || CT.C475, C[476] || CT.C476, C[477] || CT.C477], T$0.StrokeCapL());
    },
    get C479() {
      return C[479] = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$7]: "StrokeJoin.miter",
        index: 0
      });
    },
    get C480() {
      return C[480] = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$7]: "StrokeJoin.round",
        index: 1
      });
    },
    get C481() {
      return C[481] = dart.const({
        __proto__: ui.StrokeJoin.prototype,
        [_name$7]: "StrokeJoin.bevel",
        index: 2
      });
    },
    get C482() {
      return C[482] = dart.constList([C[479] || CT.C479, C[480] || CT.C480, C[481] || CT.C481], T$0.StrokeJoinL());
    },
    get C483() {
      return C[483] = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name$7]: "PaintingStyle.fill",
        index: 0
      });
    },
    get C484() {
      return C[484] = dart.const({
        __proto__: ui.PaintingStyle.prototype,
        [_name$7]: "PaintingStyle.stroke",
        index: 1
      });
    },
    get C485() {
      return C[485] = dart.constList([C[483] || CT.C483, C[484] || CT.C484], T$0.PaintingStyleL());
    },
    get C486() {
      return C[486] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.clear",
        index: 0
      });
    },
    get C487() {
      return C[487] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.src",
        index: 1
      });
    },
    get C488() {
      return C[488] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dst",
        index: 2
      });
    },
    get C489() {
      return C[489] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcOver",
        index: 3
      });
    },
    get C490() {
      return C[490] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstOver",
        index: 4
      });
    },
    get C491() {
      return C[491] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcIn",
        index: 5
      });
    },
    get C492() {
      return C[492] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstIn",
        index: 6
      });
    },
    get C493() {
      return C[493] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcOut",
        index: 7
      });
    },
    get C494() {
      return C[494] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstOut",
        index: 8
      });
    },
    get C495() {
      return C[495] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.srcATop",
        index: 9
      });
    },
    get C496() {
      return C[496] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.dstATop",
        index: 10
      });
    },
    get C497() {
      return C[497] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.xor",
        index: 11
      });
    },
    get C498() {
      return C[498] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.plus",
        index: 12
      });
    },
    get C499() {
      return C[499] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.modulate",
        index: 13
      });
    },
    get C500() {
      return C[500] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.screen",
        index: 14
      });
    },
    get C501() {
      return C[501] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.overlay",
        index: 15
      });
    },
    get C502() {
      return C[502] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.darken",
        index: 16
      });
    },
    get C503() {
      return C[503] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.lighten",
        index: 17
      });
    },
    get C504() {
      return C[504] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.colorDodge",
        index: 18
      });
    },
    get C505() {
      return C[505] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.colorBurn",
        index: 19
      });
    },
    get C506() {
      return C[506] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.hardLight",
        index: 20
      });
    },
    get C507() {
      return C[507] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.softLight",
        index: 21
      });
    },
    get C508() {
      return C[508] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.difference",
        index: 22
      });
    },
    get C509() {
      return C[509] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.exclusion",
        index: 23
      });
    },
    get C510() {
      return C[510] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.multiply",
        index: 24
      });
    },
    get C511() {
      return C[511] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.hue",
        index: 25
      });
    },
    get C512() {
      return C[512] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.saturation",
        index: 26
      });
    },
    get C513() {
      return C[513] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.color",
        index: 27
      });
    },
    get C514() {
      return C[514] = dart.const({
        __proto__: ui.BlendMode.prototype,
        [_name$7]: "BlendMode.luminosity",
        index: 28
      });
    },
    get C515() {
      return C[515] = dart.constList([C[486] || CT.C486, C[487] || CT.C487, C[488] || CT.C488, C[489] || CT.C489, C[490] || CT.C490, C[491] || CT.C491, C[492] || CT.C492, C[493] || CT.C493, C[494] || CT.C494, C[495] || CT.C495, C[496] || CT.C496, C[497] || CT.C497, C[498] || CT.C498, C[499] || CT.C499, C[500] || CT.C500, C[501] || CT.C501, C[502] || CT.C502, C[503] || CT.C503, C[504] || CT.C504, C[505] || CT.C505, C[506] || CT.C506, C[507] || CT.C507, C[508] || CT.C508, C[509] || CT.C509, C[510] || CT.C510, C[511] || CT.C511, C[512] || CT.C512, C[513] || CT.C513, C[514] || CT.C514], T$0.BlendModeL());
    },
    get C516() {
      return C[516] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.none",
        index: 0
      });
    },
    get C517() {
      return C[517] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.hardEdge",
        index: 1
      });
    },
    get C518() {
      return C[518] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.antiAlias",
        index: 2
      });
    },
    get C519() {
      return C[519] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name$7]: "Clip.antiAliasWithSaveLayer",
        index: 3
      });
    },
    get C520() {
      return C[520] = dart.constList([C[516] || CT.C516, C[517] || CT.C517, C[518] || CT.C518, C[519] || CT.C519], T$0.ClipL());
    },
    get C521() {
      return C[521] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.clamp",
        index: 0
      });
    },
    get C522() {
      return C[522] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.normal",
        index: 0
      });
    },
    get C523() {
      return C[523] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.solid",
        index: 1
      });
    },
    get C524() {
      return C[524] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.outer",
        index: 2
      });
    },
    get C525() {
      return C[525] = dart.const({
        __proto__: ui.BlurStyle.prototype,
        [_name$7]: "BlurStyle.inner",
        index: 3
      });
    },
    get C526() {
      return C[526] = dart.constList([C[522] || CT.C522, C[523] || CT.C523, C[524] || CT.C524, C[525] || CT.C525], T$0.BlurStyleL());
    },
    get C527() {
      return C[527] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.none",
        index: 0
      });
    },
    get C528() {
      return C[528] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.low",
        index: 1
      });
    },
    get C529() {
      return C[529] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.medium",
        index: 2
      });
    },
    get C530() {
      return C[530] = dart.const({
        __proto__: ui.FilterQuality.prototype,
        [_name$7]: "FilterQuality.high",
        index: 3
      });
    },
    get C531() {
      return C[531] = dart.constList([C[527] || CT.C527, C[528] || CT.C528, C[529] || CT.C529, C[530] || CT.C530], T$0.FilterQualityL());
    },
    get C532() {
      return C[532] = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$7]: "ImageByteFormat.rawRgba",
        index: 0
      });
    },
    get C533() {
      return C[533] = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$7]: "ImageByteFormat.rawUnmodified",
        index: 1
      });
    },
    get C534() {
      return C[534] = dart.const({
        __proto__: ui.ImageByteFormat.prototype,
        [_name$7]: "ImageByteFormat.png",
        index: 2
      });
    },
    get C535() {
      return C[535] = dart.constList([C[532] || CT.C532, C[533] || CT.C533, C[534] || CT.C534], T$0.ImageByteFormatL());
    },
    get C536() {
      return C[536] = dart.const({
        __proto__: ui.PixelFormat.prototype,
        [_name$7]: "PixelFormat.rgba8888",
        index: 0
      });
    },
    get C537() {
      return C[537] = dart.const({
        __proto__: ui.PixelFormat.prototype,
        [_name$7]: "PixelFormat.bgra8888",
        index: 1
      });
    },
    get C538() {
      return C[538] = dart.constList([C[536] || CT.C536, C[537] || CT.C537], T$0.PixelFormatL());
    },
    get C539() {
      return C[539] = dart.const({
        __proto__: ui.Color.prototype,
        [value$5]: 4278190080.0
      });
    },
    get C540() {
      return C[540] = dart.const({
        __proto__: ui.AccessibilityFeatures.prototype,
        [AccessibilityFeatures__index]: 0
      });
    },
    get C541() {
      return C[541] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$7]: "Brightness.light",
        index: 1
      });
    },
    get C542() {
      return C[542] = dart.constList([], T$0.LocaleL());
    },
    get C543() {
      return C[543] = dart.const({
        __proto__: _engine.WindowPadding.prototype,
        [WindowPadding_bottom]: 0,
        [WindowPadding_right]: 0,
        [WindowPadding_top]: 0,
        [WindowPadding_left]: 0
      });
    },
    get C544() {
      return C[544] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.vsyncStart",
        index: 0
      });
    },
    get C545() {
      return C[545] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.buildStart",
        index: 1
      });
    },
    get C546() {
      return C[546] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.buildFinish",
        index: 2
      });
    },
    get C547() {
      return C[547] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.rasterStart",
        index: 3
      });
    },
    get C548() {
      return C[548] = dart.const({
        __proto__: ui.FramePhase.prototype,
        [_name$7]: "FramePhase.rasterFinish",
        index: 4
      });
    },
    get C549() {
      return C[549] = dart.constList([C[544] || CT.C544, C[545] || CT.C545, C[546] || CT.C546, C[547] || CT.C547, C[548] || CT.C548], T$0.FramePhaseL());
    },
    get C550() {
      return C[550] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.resumed",
        index: 0
      });
    },
    get C551() {
      return C[551] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.inactive",
        index: 1
      });
    },
    get C552() {
      return C[552] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.paused",
        index: 2
      });
    },
    get C553() {
      return C[553] = dart.const({
        __proto__: ui.AppLifecycleState.prototype,
        [_name$7]: "AppLifecycleState.detached",
        index: 3
      });
    },
    get C554() {
      return C[554] = dart.constList([C[550] || CT.C550, C[551] || CT.C551, C[552] || CT.C552, C[553] || CT.C553], T$0.AppLifecycleStateL());
    },
    get C555() {
      return C[555] = dart.constMap(T$.StringL(), T$.StringL(), ["in", "id", "iw", "he", "ji", "yi", "jw", "jv", "mo", "ro", "aam", "aas", "adp", "dz", "aue", "ktz", "ayx", "nun", "bgm", "bcg", "bjd", "drl", "ccq", "rki", "cjr", "mom", "cka", "cmr", "cmk", "xch", "coy", "pij", "cqu", "quh", "drh", "khk", "drw", "prs", "gav", "dev", "gfx", "vaj", "ggn", "gvr", "gti", "nyc", "guv", "duz", "hrr", "jal", "ibi", "opa", "ilw", "gal", "jeg", "oyb", "kgc", "tdf", "kgh", "kml", "koj", "kwv", "krm", "bmf", "ktr", "dtp", "kvs", "gdj", "kwq", "yam", "kxe", "tvd", "kzj", "dtp", "kzt", "dtp", "lii", "raq", "lmm", "rmx", "meg", "cir", "mst", "mry", "mwj", "vaj", "myt", "mry", "nad", "xny", "ncp", "kdz", "nnx", "ngv", "nts", "pij", "oun", "vaj", "pcr", "adx", "pmc", "huw", "pmu", "phr", "ppa", "bfy", "ppr", "lcq", "pry", "prt", "puz", "pub", "sca", "hle", "skk", "oyb", "tdu", "dtp", "thc", "tpo", "thx", "oyb", "tie", "ras", "tkk", "twm", "tlw", "weo", "tmp", "tyj", "tne", "kak", "tnf", "prs", "tsf", "taj", "uok", "ema", "xba", "cax", "xia", "acn", "xkh", "waw", "xsj", "suj", "ybd", "rki", "yma", "lrr", "ymt", "mtm", "yos", "zom", "yuu", "yug"]);
    },
    get C556() {
      return C[556] = dart.constMap(T$.StringL(), T$.StringL(), ["BU", "MM", "DD", "DE", "FX", "FR", "TP", "TL", "YD", "YE", "ZR", "CD"]);
    },
    get C557() {
      return C[557] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.cancel",
        index: 0
      });
    },
    get C558() {
      return C[558] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.add",
        index: 1
      });
    },
    get C559() {
      return C[559] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.remove",
        index: 2
      });
    },
    get C560() {
      return C[560] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.hover",
        index: 3
      });
    },
    get C561() {
      return C[561] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.down",
        index: 4
      });
    },
    get C562() {
      return C[562] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.move",
        index: 5
      });
    },
    get C563() {
      return C[563] = dart.const({
        __proto__: ui.PointerChange.prototype,
        [_name$7]: "PointerChange.up",
        index: 6
      });
    },
    get C564() {
      return C[564] = dart.constList([C[557] || CT.C557, C[558] || CT.C558, C[559] || CT.C559, C[560] || CT.C560, C[561] || CT.C561, C[562] || CT.C562, C[563] || CT.C563], T$0.PointerChangeL());
    },
    get C565() {
      return C[565] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.touch",
        index: 0
      });
    },
    get C566() {
      return C[566] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.mouse",
        index: 1
      });
    },
    get C567() {
      return C[567] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.stylus",
        index: 2
      });
    },
    get C568() {
      return C[568] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.invertedStylus",
        index: 3
      });
    },
    get C569() {
      return C[569] = dart.const({
        __proto__: ui.PointerDeviceKind.prototype,
        [_name$7]: "PointerDeviceKind.unknown",
        index: 4
      });
    },
    get C570() {
      return C[570] = dart.constList([C[565] || CT.C565, C[566] || CT.C566, C[567] || CT.C567, C[568] || CT.C568, C[569] || CT.C569], T$0.PointerDeviceKindL());
    },
    get C571() {
      return C[571] = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$7]: "PointerSignalKind.none",
        index: 0
      });
    },
    get C572() {
      return C[572] = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$7]: "PointerSignalKind.scroll",
        index: 1
      });
    },
    get C573() {
      return C[573] = dart.const({
        __proto__: ui.PointerSignalKind.prototype,
        [_name$7]: "PointerSignalKind.unknown",
        index: 2
      });
    },
    get C574() {
      return C[574] = dart.constList([C[571] || CT.C571, C[572] || CT.C572, C[573] || CT.C573], T$0.PointerSignalKindL());
    },
    get C575() {
      return C[575] = dart.constList([], T$0.PointerDataL());
    },
    get C576() {
      return C[576] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 1
      });
    },
    get C577() {
      return C[577] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 2
      });
    },
    get C578() {
      return C[578] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 4
      });
    },
    get C579() {
      return C[579] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 8
      });
    },
    get C580() {
      return C[580] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 16
      });
    },
    get C581() {
      return C[581] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 32
      });
    },
    get C582() {
      return C[582] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 64
      });
    },
    get C583() {
      return C[583] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 128
      });
    },
    get C584() {
      return C[584] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 256
      });
    },
    get C585() {
      return C[585] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 512
      });
    },
    get C586() {
      return C[586] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 1024
      });
    },
    get C587() {
      return C[587] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 2048
      });
    },
    get C588() {
      return C[588] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 4096
      });
    },
    get C589() {
      return C[589] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 8192
      });
    },
    get C590() {
      return C[590] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 16384
      });
    },
    get C591() {
      return C[591] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 32768
      });
    },
    get C592() {
      return C[592] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 65536
      });
    },
    get C593() {
      return C[593] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 131072
      });
    },
    get C594() {
      return C[594] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 262144
      });
    },
    get C595() {
      return C[595] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 524288
      });
    },
    get C596() {
      return C[596] = dart.const({
        __proto__: ui.SemanticsAction.prototype,
        [index$]: 1048576
      });
    },
    get C597() {
      return C[597] = dart.constMap(T$0.intL(), T$0.SemanticsActionL(), [1, C[576] || CT.C576, 2, C[577] || CT.C577, 4, C[578] || CT.C578, 8, C[579] || CT.C579, 16, C[580] || CT.C580, 32, C[581] || CT.C581, 64, C[582] || CT.C582, 128, C[583] || CT.C583, 256, C[584] || CT.C584, 512, C[585] || CT.C585, 1024, C[586] || CT.C586, 2048, C[587] || CT.C587, 4096, C[588] || CT.C588, 8192, C[589] || CT.C589, 16384, C[590] || CT.C590, 32768, C[591] || CT.C591, 65536, C[592] || CT.C592, 131072, C[593] || CT.C593, 262144, C[594] || CT.C594, 524288, C[595] || CT.C595, 1048576, C[596] || CT.C596]);
    },
    get C598() {
      return C[598] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 1
      });
    },
    get C599() {
      return C[599] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 2
      });
    },
    get C600() {
      return C[600] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 4
      });
    },
    get C601() {
      return C[601] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 8
      });
    },
    get C602() {
      return C[602] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 4194304
      });
    },
    get C603() {
      return C[603] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 16
      });
    },
    get C604() {
      return C[604] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 1048576
      });
    },
    get C605() {
      return C[605] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 2097152
      });
    },
    get C606() {
      return C[606] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 32
      });
    },
    get C607() {
      return C[607] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 64
      });
    },
    get C608() {
      return C[608] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 128
      });
    },
    get C609() {
      return C[609] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 256
      });
    },
    get C610() {
      return C[610] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 512
      });
    },
    get C611() {
      return C[611] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 1024
      });
    },
    get C612() {
      return C[612] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 2048
      });
    },
    get C613() {
      return C[613] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 4096
      });
    },
    get C614() {
      return C[614] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 8192
      });
    },
    get C615() {
      return C[615] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 16384
      });
    },
    get C616() {
      return C[616] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 32768
      });
    },
    get C617() {
      return C[617] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 65536
      });
    },
    get C618() {
      return C[618] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 131072
      });
    },
    get C619() {
      return C[619] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 262144
      });
    },
    get C620() {
      return C[620] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 524288
      });
    },
    get C621() {
      return C[621] = dart.const({
        __proto__: ui.SemanticsFlag.prototype,
        [index$0]: 8388608
      });
    },
    get C622() {
      return C[622] = dart.constMap(T$0.intL(), T$0.SemanticsFlagL(), [1, C[598] || CT.C598, 2, C[599] || CT.C599, 4, C[600] || CT.C600, 8, C[601] || CT.C601, 4194304, C[602] || CT.C602, 8388608, C[621] || CT.C621, 16, C[603] || CT.C603, 2097152, C[605] || CT.C605, 32, C[606] || CT.C606, 64, C[607] || CT.C607, 128, C[608] || CT.C608, 256, C[609] || CT.C609, 512, C[610] || CT.C610, 1024, C[611] || CT.C611, 2048, C[612] || CT.C612, 4096, C[613] || CT.C613, 8192, C[614] || CT.C614, 16384, C[615] || CT.C615, 32768, C[616] || CT.C616, 65536, C[617] || CT.C617, 131072, C[618] || CT.C618, 262144, C[619] || CT.C619, 524288, C[620] || CT.C620, 1048576, C[604] || CT.C604]);
    },
    get C623() {
      return C[623] = dart.const({
        __proto__: ui.FontStyle.prototype,
        [_name$7]: "FontStyle.normal",
        index: 0
      });
    },
    get C624() {
      return C[624] = dart.const({
        __proto__: ui.FontStyle.prototype,
        [_name$7]: "FontStyle.italic",
        index: 1
      });
    },
    get C625() {
      return C[625] = dart.constList([C[623] || CT.C623, C[624] || CT.C624], T$0.FontStyleL());
    },
    get C626() {
      return C[626] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.baseline",
        index: 0
      });
    },
    get C627() {
      return C[627] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.aboveBaseline",
        index: 1
      });
    },
    get C628() {
      return C[628] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.belowBaseline",
        index: 2
      });
    },
    get C629() {
      return C[629] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.top",
        index: 3
      });
    },
    get C630() {
      return C[630] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.bottom",
        index: 4
      });
    },
    get C631() {
      return C[631] = dart.const({
        __proto__: ui.PlaceholderAlignment.prototype,
        [_name$7]: "PlaceholderAlignment.middle",
        index: 5
      });
    },
    get C632() {
      return C[632] = dart.constList([C[626] || CT.C626, C[627] || CT.C627, C[628] || CT.C628, C[629] || CT.C629, C[630] || CT.C630, C[631] || CT.C631], T$0.PlaceholderAlignmentL());
    },
    get C633() {
      return C[633] = dart.constMap(T$0.intL(), T$.StringL(), [0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"]);
    },
    get C634() {
      return C[634] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 0
      });
    },
    get C635() {
      return C[635] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 1
      });
    },
    get C636() {
      return C[636] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 2
      });
    },
    get C637() {
      return C[637] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 3
      });
    },
    get C638() {
      return C[638] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 4
      });
    },
    get C639() {
      return C[639] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 5
      });
    },
    get C640() {
      return C[640] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 6
      });
    },
    get C641() {
      return C[641] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 7
      });
    },
    get C642() {
      return C[642] = dart.const({
        __proto__: ui.FontWeight.prototype,
        [index$1]: 8
      });
    },
    get C643() {
      return C[643] = dart.constList([C[634] || CT.C634, C[635] || CT.C635, C[636] || CT.C636, C[637] || CT.C637, C[638] || CT.C638, C[639] || CT.C639, C[640] || CT.C640, C[641] || CT.C641, C[642] || CT.C642], T$0.FontWeightL());
    },
    get C644() {
      return C[644] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.left",
        index: 0
      });
    },
    get C645() {
      return C[645] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.right",
        index: 1
      });
    },
    get C646() {
      return C[646] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.center",
        index: 2
      });
    },
    get C647() {
      return C[647] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.justify",
        index: 3
      });
    },
    get C648() {
      return C[648] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.start",
        index: 4
      });
    },
    get C649() {
      return C[649] = dart.const({
        __proto__: ui.TextAlign.prototype,
        [_name$7]: "TextAlign.end",
        index: 5
      });
    },
    get C650() {
      return C[650] = dart.constList([C[644] || CT.C644, C[645] || CT.C645, C[646] || CT.C646, C[647] || CT.C647, C[648] || CT.C648, C[649] || CT.C649], T$0.TextAlignL());
    },
    get C651() {
      return C[651] = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name$7]: "TextBaseline.alphabetic",
        index: 0
      });
    },
    get C652() {
      return C[652] = dart.const({
        __proto__: ui.TextBaseline.prototype,
        [_name$7]: "TextBaseline.ideographic",
        index: 1
      });
    },
    get C653() {
      return C[653] = dart.constList([C[651] || CT.C651, C[652] || CT.C652], T$0.TextBaselineL());
    },
    get C654() {
      return C[654] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 0
      });
    },
    get C655() {
      return C[655] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 1
      });
    },
    get C656() {
      return C[656] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 2
      });
    },
    get C657() {
      return C[657] = dart.const({
        __proto__: ui.TextDecoration.prototype,
        [_mask$]: 4
      });
    },
    get C658() {
      return C[658] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.solid",
        index: 0
      });
    },
    get C659() {
      return C[659] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.double",
        index: 1
      });
    },
    get C660() {
      return C[660] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.dotted",
        index: 2
      });
    },
    get C661() {
      return C[661] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.dashed",
        index: 3
      });
    },
    get C662() {
      return C[662] = dart.const({
        __proto__: ui.TextDecorationStyle.prototype,
        [_name$7]: "TextDecorationStyle.wavy",
        index: 4
      });
    },
    get C663() {
      return C[663] = dart.constList([C[658] || CT.C658, C[659] || CT.C659, C[660] || CT.C660, C[661] || CT.C661, C[662] || CT.C662], T$0.TextDecorationStyleL());
    },
    get C664() {
      return C[664] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$7]: "TextDirection.rtl",
        index: 0
      });
    },
    get C665() {
      return C[665] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name$7]: "TextDirection.ltr",
        index: 1
      });
    },
    get C666() {
      return C[666] = dart.constList([C[664] || CT.C664, C[665] || CT.C665], T$0.TextDirectionL());
    },
    get C667() {
      return C[667] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name$7]: "TextAffinity.upstream",
        index: 0
      });
    },
    get C668() {
      return C[668] = dart.const({
        __proto__: ui.TextAffinity.prototype,
        [_name$7]: "TextAffinity.downstream",
        index: 1
      });
    },
    get C669() {
      return C[669] = dart.constList([C[667] || CT.C667, C[668] || CT.C668], T$0.TextAffinityL());
    },
    get C670() {
      return C[670] = dart.const({
        __proto__: ui.TextRange.prototype,
        [end$0]: -1,
        [start$1]: -1
      });
    },
    get C671() {
      return C[671] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.tight",
        index: 0
      });
    },
    get C672() {
      return C[672] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.max",
        index: 1
      });
    },
    get C673() {
      return C[673] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.includeLineSpacingMiddle",
        index: 2
      });
    },
    get C674() {
      return C[674] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.includeLineSpacingTop",
        index: 3
      });
    },
    get C675() {
      return C[675] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.includeLineSpacingBottom",
        index: 4
      });
    },
    get C676() {
      return C[676] = dart.const({
        __proto__: ui.BoxHeightStyle.prototype,
        [_name$7]: "BoxHeightStyle.strut",
        index: 5
      });
    },
    get C677() {
      return C[677] = dart.constList([C[671] || CT.C671, C[672] || CT.C672, C[673] || CT.C673, C[674] || CT.C674, C[675] || CT.C675, C[676] || CT.C676], T$0.BoxHeightStyleL());
    },
    get C678() {
      return C[678] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name$7]: "BoxWidthStyle.tight",
        index: 0
      });
    },
    get C679() {
      return C[679] = dart.const({
        __proto__: ui.BoxWidthStyle.prototype,
        [_name$7]: "BoxWidthStyle.max",
        index: 1
      });
    },
    get C680() {
      return C[680] = dart.constList([C[678] || CT.C678, C[679] || CT.C679], T$0.BoxWidthStyleL());
    },
    get C681() {
      return C[681] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.repeated",
        index: 1
      });
    },
    get C682() {
      return C[682] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.mirror",
        index: 2
      });
    },
    get C683() {
      return C[683] = dart.const({
        __proto__: ui.TileMode.prototype,
        [_name$7]: "TileMode.decal",
        index: 3
      });
    },
    get C684() {
      return C[684] = dart.constList([C[521] || CT.C521, C[681] || CT.C681, C[682] || CT.C682, C[683] || CT.C683], T$0.TileModeL());
    },
    get C685() {
      return C[685] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name$7]: "Brightness.dark",
        index: 0
      });
    },
    get C686() {
      return C[686] = dart.constList([C[685] || CT.C685, C[541] || CT.C541], T$0.BrightnessL());
    },
    get C687() {
      return C[687] = dart.const({
        __proto__: ui._HashEnd.prototype
      });
    },
    get C688() {
      return C[688] = dart.const({
        __proto__: _engine.AssetManager.prototype,
        [AssetManager_assetsDir]: "assets"
      });
    },
    get C689() {
      return C[689] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 2000000
      });
    },
    get C691() {
      return C[691] = dart.const({
        __proto__: _engine.StandardMessageCodec.prototype
      });
    },
    get C690() {
      return C[690] = dart.const({
        __proto__: _engine.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[691] || CT.C691
      });
    },
    get C692() {
      return C[692] = dart.const({
        __proto__: ui.Size.prototype,
        [_dy$]: 600,
        [_dx$]: 800
      });
    },
    get C693() {
      return C[693] = dart.const({
        __proto__: ui._KeepToString.prototype
      });
    },
    get C694() {
      return C[694] = dart.fn(_engine.BitmapCanvas._onEvictElement, T$0.HtmlElementTovoid());
    },
    get C695() {
      return C[695] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.blink",
        index: 0
      });
    },
    get C696() {
      return C[696] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.webkit",
        index: 1
      });
    },
    get C697() {
      return C[697] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.firefox",
        index: 2
      });
    },
    get C698() {
      return C[698] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.edge",
        index: 3
      });
    },
    get C699() {
      return C[699] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.ie11",
        index: 4
      });
    },
    get C700() {
      return C[700] = dart.const({
        __proto__: _engine.BrowserEngine.prototype,
        [_name$8]: "BrowserEngine.unknown",
        index: 5
      });
    },
    get C701() {
      return C[701] = dart.constList([C[695] || CT.C695, C[696] || CT.C696, C[697] || CT.C697, C[698] || CT.C698, C[699] || CT.C699, C[700] || CT.C700], T$1.BrowserEngineL());
    },
    get C702() {
      return C[702] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.iOs",
        index: 0
      });
    },
    get C703() {
      return C[703] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.android",
        index: 1
      });
    },
    get C704() {
      return C[704] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.linux",
        index: 2
      });
    },
    get C705() {
      return C[705] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.windows",
        index: 3
      });
    },
    get C706() {
      return C[706] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.macOs",
        index: 4
      });
    },
    get C707() {
      return C[707] = dart.const({
        __proto__: _engine.OperatingSystem.prototype,
        [_name$8]: "OperatingSystem.unknown",
        index: 5
      });
    },
    get C708() {
      return C[708] = dart.constList([C[702] || CT.C702, C[703] || CT.C703, C[704] || CT.C704, C[705] || CT.C705, C[706] || CT.C706, C[707] || CT.C707], T$1.OperatingSystemL());
    },
    get C709() {
      return C[709] = dart.const({
        __proto__: _engine.CkRestoreCommand.prototype
      });
    },
    get C710() {
      return C[710] = dart.const({
        __proto__: _engine.CkSaveCommand.prototype
      });
    },
    get C711() {
      return C[711] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.transform",
        index: 3
      });
    },
    get C712() {
      return C[712] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.clipRect",
        index: 0
      });
    },
    get C713() {
      return C[713] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.clipRRect",
        index: 1
      });
    },
    get C714() {
      return C[714] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.clipPath",
        index: 2
      });
    },
    get C715() {
      return C[715] = dart.const({
        __proto__: _engine.MutatorType.prototype,
        [_name$8]: "MutatorType.opacity",
        index: 4
      });
    },
    get C716() {
      return C[716] = dart.constList([C[712] || CT.C712, C[713] || CT.C713, C[714] || CT.C714, C[711] || CT.C711, C[715] || CT.C715], T$1.MutatorTypeL());
    },
    get C717() {
      return C[717] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 100000
      });
    },
    get C718() {
      return C[718] = dart.const(new _js_helper.PrivateSymbol.new('_getNextFrame', _getNextFrame$));
    },
    get C719() {
      return C[719] = dart.const(new _js_helper.PrivateSymbol.new('_durationMillis', _durationMillis$));
    },
    get C720() {
      return C[720] = dart.const({
        __proto__: _engine.CkPathMetricIteratorEmpty.prototype
      });
    },
    get C721() {
      return C[721] = dart.fn(_engine.SkiaObjects.postFrameCleanUp, T$.VoidTovoid());
    },
    get C722() {
      return C[722] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.addText",
        index: 0
      });
    },
    get C723() {
      return C[723] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.pop",
        index: 1
      });
    },
    get C724() {
      return C[724] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.pushStyle",
        index: 2
      });
    },
    get C725() {
      return C[725] = dart.const({
        __proto__: _engine._ParagraphCommandType.prototype,
        [_name$8]: "_ParagraphCommandType.addPlaceholder",
        index: 3
      });
    },
    get C726() {
      return C[726] = dart.constList([], T$1.TextBoxL());
    },
    get C727() {
      return C[727] = dart.const({
        __proto__: _engine._ParagraphCommand.prototype,
        [_ParagraphCommand_placeholderStyle]: null,
        [_ParagraphCommand_style]: null,
        [_ParagraphCommand_text]: null,
        [_ParagraphCommand_type]: C[723] || CT.C723
      });
    },
    get C728() {
      return C[728] = dart.constList([C[722] || CT.C722, C[723] || CT.C723, C[724] || CT.C724, C[725] || CT.C725], T$1._ParagraphCommandTypeL());
    },
    get C729() {
      return C[729] = dart.const({
        __proto__: _engine.JSONMethodCodec.prototype
      });
    },
    get C730() {
      return C[730] = dart.const({
        __proto__: T$0.EventStreamProviderOfEventL().prototype,
        [S.EventStreamProvider__eventType]: "languagechange"
      });
    },
    get C731() {
      return C[731] = dart.const({
        __proto__: _engine.MethodCall.prototype,
        [MethodCall_arguments]: null,
        [MethodCall_method]: "popRoute"
      });
    },
    get C732() {
      return C[732] = dart.const({
        __proto__: _engine.BrowserPlatformLocation.prototype
      });
    },
    get C733() {
      return C[733] = dart.constMap(T$1.PersistedSurfaceL(), T$1.PersistedSurfaceL(), []);
    },
    get C735() {
      return C[735] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 0,
        [_dx$]: 1
      });
    },
    get C736() {
      return C[736] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1,
        [_dx$]: 1
      });
    },
    get C737() {
      return C[737] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1,
        [_dx$]: 0
      });
    },
    get C738() {
      return C[738] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 1,
        [_dx$]: -1
      });
    },
    get C739() {
      return C[739] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: 0,
        [_dx$]: -1
      });
    },
    get C740() {
      return C[740] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: -1,
        [_dx$]: -1
      });
    },
    get C741() {
      return C[741] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: -1,
        [_dx$]: 0
      });
    },
    get C742() {
      return C[742] = dart.const({
        __proto__: ui.Offset.prototype,
        [_dy$]: -1,
        [_dx$]: 1
      });
    },
    get C734() {
      return C[734] = dart.constList([C[735] || CT.C735, C[736] || CT.C736, C[737] || CT.C737, C[738] || CT.C738, C[739] || CT.C739, C[740] || CT.C740, C[741] || CT.C741, C[742] || CT.C742], T$1.OffsetL());
    },
    get C743() {
      return C[743] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kBackwards",
        index: 4
      });
    },
    get C744() {
      return C[744] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kUnknown",
        index: 0
      });
    },
    get C745() {
      return C[745] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kLeft",
        index: 1
      });
    },
    get C746() {
      return C[746] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kRight",
        index: 2
      });
    },
    get C747() {
      return C[747] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kStraight",
        index: 3
      });
    },
    get C748() {
      return C[748] = dart.const({
        __proto__: _engine.DirChange.prototype,
        [_name$8]: "DirChange.kInvalid",
        index: 5
      });
    },
    get C749() {
      return C[749] = dart.constList([C[744] || CT.C744, C[745] || CT.C745, C[746] || CT.C746, C[747] || CT.C747, C[743] || CT.C743, C[748] || CT.C748], T$1.DirChangeL());
    },
    get C750() {
      return C[750] = dart.const({
        __proto__: _engine.PaintSave.prototype
      });
    },
    get C751() {
      return C[751] = dart.const({
        __proto__: _engine.PaintRestore.prototype
      });
    },
    get C752() {
      return C[752] = dart.fn(core.print, T$.ObjectNTovoid());
    },
    get C753() {
      return C[753] = const$ || (const$ = dart.constList([], dart.dynamic));
    },
    get C754() {
      return C[754] = dart.constList([0, 1], T$.doubleL());
    },
    get C755() {
      return C[755] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.created",
        index: 0
      });
    },
    get C756() {
      return C[756] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.active",
        index: 1
      });
    },
    get C757() {
      return C[757] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.pendingRetention",
        index: 2
      });
    },
    get C758() {
      return C[758] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.pendingUpdate",
        index: 3
      });
    },
    get C759() {
      return C[759] = dart.const({
        __proto__: _engine.PersistedSurfaceState.prototype,
        [_name$8]: "PersistedSurfaceState.released",
        index: 4
      });
    },
    get C760() {
      return C[760] = dart.constList([C[755] || CT.C755, C[756] || CT.C756, C[757] || CT.C757, C[758] || CT.C758, C[759] || CT.C759], T$1.PersistedSurfaceStateL());
    },
    get C761() {
      return C[761] = dart.fn(_engine._noopCallback, T$0.ByteDataNTovoid());
    },
    get C762() {
      return C[762] = dart.const({
        __proto__: _engine.JSONMessageCodec.prototype
      });
    },
    get C763() {
      return C[763] = dart.constMap(T$.StringL(), T$.StringL(), ["alias", "alias", "allScroll", "all-scroll", "basic", "default", "cell", "cell", "click", "pointer", "contextMenu", "context-menu", "copy", "copy", "forbidden", "not-allowed", "grab", "grab", "grabbing", "grabbing", "help", "help", "move", "move", "none", "none", "noDrop", "no-drop", "precise", "crosshair", "progress", "progress", "text", "text", "resizeColumn", "col-resize", "resizeDown", "s-resize", "resizeDownLeft", "sw-resize", "resizeDownRight", "se-resize", "resizeLeft", "w-resize", "resizeLeftRight", "ew-resize", "resizeRight", "e-resize", "resizeRow", "row-resize", "resizeUp", "n-resize", "resizeUpDown", "ns-resize", "resizeUpLeft", "nw-resize", "resizeUpRight", "ne-resize", "resizeUpLeftDownRight", "nwse-resize", "resizeUpRightDownLeft", "nesw-resize", "verticalText", "vertical-text", "wait", "wait", "zoomIn", "zoom-in", "zoomOut", "zoom-out"]);
    },
    get C764() {
      return C[764] = dart.const({
        __proto__: ui.Locale.prototype,
        [_countryCode$]: null,
        [scriptCode$]: null,
        [_languageCode$]: "und"
      });
    },
    get C766() {
      return C[766] = dart.const({
        __proto__: ui.Locale.prototype,
        [_countryCode$]: "US",
        [scriptCode$]: null,
        [_languageCode$]: "en"
      });
    },
    get C765() {
      return C[765] = dart.constList([C[766] || CT.C766], T$0.LocaleL());
    },
    get C767() {
      return C[767] = dart.const({
        __proto__: _engine.PointerSupportDetector.prototype
      });
    },
    get C768() {
      return C[768] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 5000000
      });
    },
    get C769() {
      return C[769] = dart.const({
        __proto__: _engine._CheckableKind.prototype,
        [_name$8]: "_CheckableKind.checkbox",
        index: 0
      });
    },
    get C770() {
      return C[770] = dart.const({
        __proto__: _engine._CheckableKind.prototype,
        [_name$8]: "_CheckableKind.radio",
        index: 1
      });
    },
    get C771() {
      return C[771] = dart.const({
        __proto__: _engine._CheckableKind.prototype,
        [_name$8]: "_CheckableKind.toggle",
        index: 2
      });
    },
    get C772() {
      return C[772] = dart.constList([C[769] || CT.C769, C[770] || CT.C770, C[771] || CT.C771], T$1._CheckableKindL());
    },
    get C773() {
      return C[773] = dart.const({
        __proto__: _engine.GestureMode.prototype,
        [_name$8]: "GestureMode.browserGestures",
        index: 1
      });
    },
    get C774() {
      return C[774] = dart.const({
        __proto__: _engine.GestureMode.prototype,
        [_name$8]: "GestureMode.pointerEvents",
        index: 0
      });
    },
    get C775() {
      return C[775] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.incrementable",
        index: 0
      });
    },
    get C776() {
      return C[776] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.scrollable",
        index: 1
      });
    },
    get C777() {
      return C[777] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.labelAndValue",
        index: 2
      });
    },
    get C778() {
      return C[778] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.tappable",
        index: 3
      });
    },
    get C779() {
      return C[779] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.textField",
        index: 4
      });
    },
    get C780() {
      return C[780] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.checkable",
        index: 5
      });
    },
    get C781() {
      return C[781] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.image",
        index: 6
      });
    },
    get C782() {
      return C[782] = dart.const({
        __proto__: _engine.Role.prototype,
        [_name$8]: "Role.liveRegion",
        index: 7
      });
    },
    get C783() {
      return C[783] = dart.constList([C[775] || CT.C775, C[776] || CT.C776, C[777] || CT.C777, C[778] || CT.C778, C[779] || CT.C779, C[780] || CT.C780, C[781] || CT.C781, C[782] || CT.C782], T$1.RoleL());
    },
    get C784() {
      return C[784] = dart.const({
        __proto__: _engine.AccessibilityMode.prototype,
        [_name$8]: "AccessibilityMode.unknown",
        index: 0
      });
    },
    get C785() {
      return C[785] = dart.const({
        __proto__: _engine.AccessibilityMode.prototype,
        [_name$8]: "AccessibilityMode.known",
        index: 1
      });
    },
    get C786() {
      return C[786] = dart.constList([C[784] || CT.C784, C[785] || CT.C785], T$1.AccessibilityModeL());
    },
    get C787() {
      return C[787] = dart.constList([C[774] || CT.C774, C[773] || CT.C773], T$1.GestureModeL());
    },
    get C788() {
      return C[788] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 500000
      });
    },
    get C789() {
      return C[789] = dart.constList(["pointerdown", "pointermove", "pointerup", "pointercancel", "touchstart", "touchend", "touchmove", "touchcancel", "mousedown", "mousemove", "mouseup", "keyup", "keydown"], T$.StringL());
    },
    get C790() {
      return C[790] = dart.constList(["click", "scroll"], T$.StringL());
    },
    get C791() {
      return C[791] = dart.const({
        __proto__: _engine.EnabledState.prototype,
        [_name$8]: "EnabledState.noOpinion",
        index: 0
      });
    },
    get C792() {
      return C[792] = dart.const({
        __proto__: _engine.EnabledState.prototype,
        [_name$8]: "EnabledState.enabled",
        index: 1
      });
    },
    get C793() {
      return C[793] = dart.const({
        __proto__: _engine.EnabledState.prototype,
        [_name$8]: "EnabledState.disabled",
        index: 2
      });
    },
    get C794() {
      return C[794] = dart.constList([C[791] || CT.C791, C[792] || CT.C792, C[793] || CT.C793], T$1.EnabledStateL());
    },
    get C795() {
      return C[795] = dart.constSet(T$.StringL(), ["click", "keyup", "keydown", "mouseup", "mousedown", "pointerdown", "pointerup"]);
    },
    get C796() {
      return C[796] = dart.constSet(T$.StringL(), ["click", "touchstart", "touchend", "pointerdown", "pointermove", "pointerup"]);
    },
    get C797() {
      return C[797] = dart.const({
        __proto__: _engine.StringCodec.prototype
      });
    },
    get C798() {
      return C[798] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Message corrupted"
      });
    },
    get C799() {
      return C[799] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Invalid method call"
      });
    },
    get C800() {
      return C[800] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Expected envelope, got nothing"
      });
    },
    get C801() {
      return C[801] = dart.const({
        __proto__: core.FormatException.prototype,
        [offset$]: null,
        [source$]: null,
        [message$16]: "Invalid envelope"
      });
    },
    get C802() {
      return C[802] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 50000
      });
    },
    get C803() {
      return C[803] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CM",
        index: 0
      });
    },
    get C804() {
      return C[804] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.BA",
        index: 1
      });
    },
    get C805() {
      return C[805] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.LF",
        index: 2
      });
    },
    get C806() {
      return C[806] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.BK",
        index: 3
      });
    },
    get C807() {
      return C[807] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CR",
        index: 4
      });
    },
    get C808() {
      return C[808] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.SP",
        index: 5
      });
    },
    get C809() {
      return C[809] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.EX",
        index: 6
      });
    },
    get C810() {
      return C[810] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.QU",
        index: 7
      });
    },
    get C811() {
      return C[811] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.AL",
        index: 8
      });
    },
    get C812() {
      return C[812] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.PR",
        index: 9
      });
    },
    get C813() {
      return C[813] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.PO",
        index: 10
      });
    },
    get C814() {
      return C[814] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.OP",
        index: 11
      });
    },
    get C815() {
      return C[815] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CP",
        index: 12
      });
    },
    get C816() {
      return C[816] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.IS",
        index: 13
      });
    },
    get C817() {
      return C[817] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.HY",
        index: 14
      });
    },
    get C818() {
      return C[818] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.SY",
        index: 15
      });
    },
    get C819() {
      return C[819] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.NU",
        index: 16
      });
    },
    get C820() {
      return C[820] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CL",
        index: 17
      });
    },
    get C821() {
      return C[821] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.GL",
        index: 18
      });
    },
    get C822() {
      return C[822] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.BB",
        index: 19
      });
    },
    get C823() {
      return C[823] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.HL",
        index: 20
      });
    },
    get C824() {
      return C[824] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.JL",
        index: 21
      });
    },
    get C825() {
      return C[825] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.JV",
        index: 22
      });
    },
    get C826() {
      return C[826] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.JT",
        index: 23
      });
    },
    get C827() {
      return C[827] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.NS",
        index: 24
      });
    },
    get C828() {
      return C[828] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.ZW",
        index: 25
      });
    },
    get C829() {
      return C[829] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.ZWJ",
        index: 26
      });
    },
    get C830() {
      return C[830] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.B2",
        index: 27
      });
    },
    get C831() {
      return C[831] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.IN",
        index: 28
      });
    },
    get C832() {
      return C[832] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.WJ",
        index: 29
      });
    },
    get C833() {
      return C[833] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.ID",
        index: 30
      });
    },
    get C834() {
      return C[834] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.EB",
        index: 31
      });
    },
    get C835() {
      return C[835] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.H2",
        index: 32
      });
    },
    get C836() {
      return C[836] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.H3",
        index: 33
      });
    },
    get C837() {
      return C[837] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.CB",
        index: 34
      });
    },
    get C838() {
      return C[838] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.RI",
        index: 35
      });
    },
    get C839() {
      return C[839] = dart.const({
        __proto__: _engine.LineCharProperty.prototype,
        [_name$8]: "LineCharProperty.EM",
        index: 36
      });
    },
    get C840() {
      return C[840] = dart.constList([C[803] || CT.C803, C[804] || CT.C804, C[805] || CT.C805, C[806] || CT.C806, C[807] || CT.C807, C[808] || CT.C808, C[809] || CT.C809, C[810] || CT.C810, C[811] || CT.C811, C[812] || CT.C812, C[813] || CT.C813, C[814] || CT.C814, C[815] || CT.C815, C[816] || CT.C816, C[817] || CT.C817, C[818] || CT.C818, C[819] || CT.C819, C[820] || CT.C820, C[821] || CT.C821, C[822] || CT.C822, C[823] || CT.C823, C[824] || CT.C824, C[825] || CT.C825, C[826] || CT.C826, C[827] || CT.C827, C[828] || CT.C828, C[829] || CT.C829, C[830] || CT.C830, C[831] || CT.C831, C[832] || CT.C832, C[833] || CT.C833, C[834] || CT.C834, C[835] || CT.C835, C[836] || CT.C836, C[837] || CT.C837, C[838] || CT.C838, C[839] || CT.C839], T$1.LineCharPropertyL());
    },
    get C841() {
      return C[841] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.opportunity",
        index: 0
      });
    },
    get C842() {
      return C[842] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.prohibited",
        index: 1
      });
    },
    get C843() {
      return C[843] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.mandatory",
        index: 2
      });
    },
    get C844() {
      return C[844] = dart.const({
        __proto__: _engine.LineBreakType.prototype,
        [_name$8]: "LineBreakType.endOfText",
        index: 3
      });
    },
    get C845() {
      return C[845] = dart.constList([C[841] || CT.C841, C[842] || CT.C842, C[843] || CT.C843, C[844] || CT.C844], T$1.LineBreakTypeL());
    },
    get C846() {
      return C[846] = dart.fn(_engine._newlinePredicate, T$1.intTobool());
    },
    get C847() {
      return C[847] = dart.const({
        __proto__: ui.TextPosition.prototype,
        [affinity$]: C[668] || CT.C668,
        [offset$1]: 0
      });
    },
    get C848() {
      return C[848] = dart.const({
        __proto__: _engine.LineBreakResult.prototype,
        [type$6]: C[843] || CT.C843,
        [indexWithoutTrailingSpaces$]: 0,
        [indexWithoutTrailingNewlines$]: 0,
        [index$2]: 0
      });
    },
    get C849() {
      return C[849] = dart.const({
        __proto__: _engine._ComparisonResult.prototype,
        [_name$8]: "_ComparisonResult.inside",
        index: 0
      });
    },
    get C850() {
      return C[850] = dart.const({
        __proto__: _engine._ComparisonResult.prototype,
        [_name$8]: "_ComparisonResult.higher",
        index: 1
      });
    },
    get C851() {
      return C[851] = dart.const({
        __proto__: _engine._ComparisonResult.prototype,
        [_name$8]: "_ComparisonResult.lower",
        index: 2
      });
    },
    get C852() {
      return C[852] = dart.constList([C[849] || CT.C849, C[850] || CT.C850, C[851] || CT.C851], T$1._ComparisonResultL());
    },
    get C853() {
      return C[853] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.DoubleQuote",
        index: 0
      });
    },
    get C854() {
      return C[854] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.SingleQuote",
        index: 1
      });
    },
    get C855() {
      return C[855] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.HebrewLetter",
        index: 2
      });
    },
    get C856() {
      return C[856] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.CR",
        index: 3
      });
    },
    get C857() {
      return C[857] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.LF",
        index: 4
      });
    },
    get C858() {
      return C[858] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Newline",
        index: 5
      });
    },
    get C859() {
      return C[859] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Extend",
        index: 6
      });
    },
    get C860() {
      return C[860] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.RegionalIndicator",
        index: 7
      });
    },
    get C861() {
      return C[861] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Format",
        index: 8
      });
    },
    get C862() {
      return C[862] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Katakana",
        index: 9
      });
    },
    get C863() {
      return C[863] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.ALetter",
        index: 10
      });
    },
    get C864() {
      return C[864] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.MidLetter",
        index: 11
      });
    },
    get C865() {
      return C[865] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.MidNum",
        index: 12
      });
    },
    get C866() {
      return C[866] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.MidNumLet",
        index: 13
      });
    },
    get C867() {
      return C[867] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Numeric",
        index: 14
      });
    },
    get C868() {
      return C[868] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.ExtendNumLet",
        index: 15
      });
    },
    get C869() {
      return C[869] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.ZWJ",
        index: 16
      });
    },
    get C870() {
      return C[870] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.WSegSpace",
        index: 17
      });
    },
    get C871() {
      return C[871] = dart.const({
        __proto__: _engine.WordCharProperty.prototype,
        [_name$8]: "WordCharProperty.Unknown",
        index: 18
      });
    },
    get C872() {
      return C[872] = dart.constList([C[853] || CT.C853, C[854] || CT.C854, C[855] || CT.C855, C[856] || CT.C856, C[857] || CT.C857, C[858] || CT.C858, C[859] || CT.C859, C[860] || CT.C860, C[861] || CT.C861, C[862] || CT.C862, C[863] || CT.C863, C[864] || CT.C864, C[865] || CT.C865, C[866] || CT.C866, C[867] || CT.C867, C[868] || CT.C868, C[869] || CT.C869, C[870] || CT.C870, C[871] || CT.C871], T$1.WordCharPropertyL());
    },
    get C873() {
      return C[873] = dart.const({
        __proto__: _engine._FindBreakDirection.prototype,
        [step$]: 1
      });
    },
    get C874() {
      return C[874] = dart.const({
        __proto__: _engine._FindBreakDirection.prototype,
        [step$]: -1
      });
    },
    get C875() {
      return C[875] = dart.const({
        __proto__: _engine.TextInputType.prototype,
        [TextInputType_inputmodeAttribute]: "text"
      });
    },
    get C876() {
      return C[876] = dart.const({
        __proto__: _engine.NumberInputType.prototype,
        [NumberInputType_inputmodeAttribute]: "numeric"
      });
    },
    get C877() {
      return C[877] = dart.const({
        __proto__: _engine.DecimalInputType.prototype,
        [DecimalInputType_inputmodeAttribute]: "decimal"
      });
    },
    get C878() {
      return C[878] = dart.const({
        __proto__: _engine.PhoneInputType.prototype,
        [PhoneInputType_inputmodeAttribute]: "tel"
      });
    },
    get C879() {
      return C[879] = dart.const({
        __proto__: _engine.EmailInputType.prototype,
        [EmailInputType_inputmodeAttribute]: "email"
      });
    },
    get C880() {
      return C[880] = dart.const({
        __proto__: _engine.UrlInputType.prototype,
        [UrlInputType_inputmodeAttribute]: "url"
      });
    },
    get C881() {
      return C[881] = dart.const({
        __proto__: _engine.MultilineInputType.prototype,
        [MultilineInputType_inputmodeAttribute]: null
      });
    },
    get C882() {
      return C[882] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.words",
        index: 0
      });
    },
    get C883() {
      return C[883] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.sentences",
        index: 1
      });
    },
    get C884() {
      return C[884] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.characters",
        index: 2
      });
    },
    get C885() {
      return C[885] = dart.const({
        __proto__: _engine.TextCapitalization.prototype,
        [_name$8]: "TextCapitalization.none",
        index: 3
      });
    },
    get C886() {
      return C[886] = dart.constList([C[882] || CT.C882, C[883] || CT.C883, C[884] || CT.C884, C[885] || CT.C885], T$1.TextCapitalizationL());
    },
    get C887() {
      return C[887] = dart.fn(_engine._emptyCallback, T$.dynamicTovoid());
    },
    get C888() {
      return C[888] = dart.const({
        __proto__: _engine.TextCapitalizationConfig.prototype,
        [textCapitalization]: C[885] || CT.C885
      });
    },
    get C889() {
      return C[889] = dart.const({
        __proto__: _engine.TransformKind.prototype,
        [_name$8]: "TransformKind.identity",
        index: 0
      });
    },
    get C890() {
      return C[890] = dart.const({
        __proto__: _engine.TransformKind.prototype,
        [_name$8]: "TransformKind.transform2d",
        index: 1
      });
    },
    get C891() {
      return C[891] = dart.const({
        __proto__: _engine.TransformKind.prototype,
        [_name$8]: "TransformKind.complex",
        index: 2
      });
    },
    get C892() {
      return C[892] = dart.constList([C[889] || CT.C889, C[890] || CT.C890, C[891] || CT.C891], T$1.TransformKindL());
    },
    get C893() {
      return C[893] = dart.constList([], T$1.CodeunitRangeL());
    },
    get C894() {
      return C[894] = dart.constList(["dart:async-patch", "dart:async", "dart:_runtime"], T$.StringL());
    },
    get C895() {
      return C[895] = dart.const({
        __proto__: _engine.HashUrlStrategy.prototype,
        [_platformLocation$]: C[732] || CT.C732
      });
    },
    get C896() {
      return C[896] = dart.constSet(T$1.OperatingSystemL(), [C[706] || CT.C706, C[704] || CT.C704, C[705] || CT.C705]);
    },
    get C897() {
      return C[897] = dart.constList([0, 4, 12, 1, 5, 13, 3, 7, 15], T$0.intL());
    },
    get C898() {
      return C[898] = dart.constList(["attribute", "const", "uniform", "varying", "layout", "centroid", "flat", "smooth", "noperspective", "patch", "sample", "break", "continue", "do", "for", "while", "switch", "case", "default", "if", "else", "subroutine", "in", "out", "inout", "float", "double", "int", "void", "bool", "true", "false", "invariant", "discard", "return", "mat2", "mat3", "mat4", "dmat2", "dmat3", "dmat4", "mat2x2", "mat2x3", "mat2x4", "dmat2x2", "dmat2x3", "dmat2x4", "mat3x2", "mat3x3", "mat3x4", "dmat3x2", "dmat3x3", "dmat3x4", "mat4x2", "mat4x3", "mat4x4", "dmat4x2", "dmat4x3", "dmat4x4", "vec2", "vec3", "vec4", "ivec2", "ivec3", "ivec4", "bvec2", "bvec3", "bvec4", "dvec2", "dvec3", "dvec4", "uint", "uvec2", "uvec3", "uvec4", "lowp", "mediump", "highp", "precision", "sampler1D", "sampler2D", "sampler3D", "samplerCube", "sampler1DShadow", "sampler2DShadow", "samplerCubeShadow", "sampler1DArray", "sampler2DArray", "sampler1DArrayShadow", "sampler2DArrayShadow", "isampler1D", "isampler2D", "isampler3D", "isamplerCube", "isampler1DArray", "isampler2DArray", "usampler1D", "usampler2D", "usampler3D", "usamplerCube", "usampler1DArray", "usampler2DArray", "sampler2DRect", "sampler2DRectShadow", "isampler2DRect", "usampler2DRect", "samplerBuffer", "isamplerBuffer", "usamplerBuffer", "sampler2DMS", "isampler2DMS", "usampler2DMS", "sampler2DMSArray", "isampler2DMSArray", "usampler2DMSArray", "samplerCubeArray", "samplerCubeArrayShadow", "isamplerCubeArray", "usamplerCubeArray", "struct", "texture", "active", "asm", "cast", "class", "common", "enum", "extern", "external", "filter", "fixed", "fvec2", "fvec3", "fvec4", "goto", "half", "hvec2", "hvec3", "hvec4", "iimage1D", "iimage1DArray", "iimage2D", "iimage2DArray", "iimage3D", "iimageBuffer", "iimageCube", "image1D", "image1DArray", "image1DArrayShadow", "image1DShadow", "image2D", "image2DArray", "image2DArrayShadow", "image2DShadow", "image3D", "imageBuffer", "imageCube", "inline", "input", "interface", "long", "namespace", "noinline", "output", "packed", "partition", "public", "row_majo", "short", "sizeof", "static", "superp", "template", "this", "typedef", "uimage1D", "uimage1DArray", "uimage2D", "uimage2DArray", "uimage3D", "uimageBuffer", "uimageCube", "union", "unsigned", "using", "volatile"], T$.StringL());
    },
    get C899() {
      return C[899] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 1000000
      });
    },
    get C900() {
      return C[900] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 300000
      });
    },
    get C901() {
      return C[901] = dart.const({
        __proto__: ui.Color.prototype,
        [value$5]: 4294901760.0
      });
    },
    get C902() {
      return C[902] = dart.constSet(T$.StringL(), ["serif", "sans-serif", "monospace", "cursive", "fantasy", "system-ui", "math", "emoji", "fangsong"]);
    },
    get C903() {
      return C[903] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 120000000
      });
    },
    get C904() {
      return C[904] = dart.constList(["cache-control", "connection", "date", "pragma", "trailer", "transfer-encoding", "upgrade", "via", "warning"], T$.StringL());
    },
    get C905() {
      return C[905] = dart.constList(["allow", "content-encoding", "content-language", "content-length", "content-location", "content-md5", "content-range", "content-type", "expires", "last-modified"], T$.StringL());
    },
    get C906() {
      return C[906] = dart.constList(["accept-ranges", "age", "etag", "location", "proxy-authenticate", "retry-after", "server", "vary", "www-authenticate"], T$.StringL());
    },
    get C907() {
      return C[907] = dart.constList(["accept", "accept-charset", "accept-encoding", "accept-language", "authorization", "expect", "from", "host", "if-match", "if-modified-since", "if-none-match", "if-range", "if-unmodified-since", "max-forwards", "proxy-authorization", "range", "referer", "te", "user-agent"], T$.StringL());
    },
    get C908() {
      return C[908] = dart.constMap(T$.StringL(), T$.StringN(), []);
    },
    get C909() {
      return C[909] = dart.const({
        __proto__: core.Duration.prototype,
        [_duration$]: 15000000
      });
    },
    get C910() {
      return C[910] = dart.const({
        __proto__: _http.HttpClientResponseCompressionState.prototype,
        [_name$9]: "HttpClientResponseCompressionState.notCompressed",
        index: 0
      });
    },
    get C911() {
      return C[911] = dart.const({
        __proto__: _http.HttpClientResponseCompressionState.prototype,
        [_name$9]: "HttpClientResponseCompressionState.decompressed",
        index: 1
      });
    },
    get C912() {
      return C[912] = dart.const({
        __proto__: _http.HttpClientResponseCompressionState.prototype,
        [_name$9]: "HttpClientResponseCompressionState.compressed",
        index: 2
      });
    },
    get C913() {
      return C[913] = dart.constList([C[910] || CT.C910, C[911] || CT.C911, C[912] || CT.C912], T$1.HttpClientResponseCompressionStateL());
    },
    get C914() {
      return C[914] = dart.constList([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -1, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, 0, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2], T$0.intL());
    },
    get C915() {
      return C[915] = dart.constList([3614090360.0, 3905402710.0, 606105819, 3250441966.0, 4118548399.0, 1200080426, 2821735955.0, 4249261313.0, 1770035416, 2336552879.0, 4294925233.0, 2304563134.0, 1804603682, 4254626195.0, 2792965006.0, 1236535329, 4129170786.0, 3225465664.0, 643717713, 3921069994.0, 3593408605.0, 38016083, 3634488961.0, 3889429448.0, 568446438, 3275163606.0, 4107603335.0, 1163531501, 2850285829.0, 4243563512.0, 1735328473, 2368359562.0, 4294588738.0, 2272392833.0, 1839030562, 4259657740.0, 2763975236.0, 1272893353, 4139469664.0, 3200236656.0, 681279174, 3936430074.0, 3572445317.0, 76029189, 3654602809.0, 3873151461.0, 530742520, 3299628645.0, 4096336452.0, 1126891415, 2878612391.0, 4237533241.0, 1700485571, 2399980690.0, 4293915773.0, 2240044497.0, 1873313359, 4264355552.0, 2734768916.0, 1309151649, 4149444226.0, 3174756917.0, 718787259, 3951481745.0], T$0.intL());
    },
    get C916() {
      return C[916] = dart.constList([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21], T$0.intL());
    },
    get C917() {
      return C[917] = dart.constList(["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"], dart.dynamic);
    },
    get C918() {
      return C[918] = dart.constList(["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], dart.dynamic);
    },
    get C919() {
      return C[919] = dart.constList(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], dart.dynamic);
    },
    get C920() {
      return C[920] = dart.constList(["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"], dart.dynamic);
    },
    get C921() {
      return C[921] = dart.constList(["(", ")", "<", ">", "@", ",", ";", ":", "\\", "\"", "/", "[", "]", "?", "=", "{", "}"], T$.StringL());
    },
    get C922() {
      return C[922] = dart.const({
        __proto__: _http._ToUint8List.prototype
      });
    },
    get C923() {
      return C[923] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding#isSet', __IOSink_encoding_isSet$));
    },
    get C924() {
      return C[924] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding', __IOSink_encoding$));
    },
    get C925() {
      return C[925] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding#isSet=', __IOSink_encoding_isSet_));
    },
    get C926() {
      return C[926] = dart.const(new _js_helper.PrivateSymbol.new('_#IOSink#encoding=', __IOSink_encoding_));
    },
    get C927() {
      return C[927] = dart.constList([48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70], T$0.intL());
    },
    get C928() {
      return C[928] = dart.constList([13, 10, 48, 13, 10, 13, 10], T$0.intL());
    },
    get C929() {
      return C[929] = dart.constList([48, 13, 10, 13, 10], T$0.intL());
    },
    get C930() {
      return C[930] = dart.fn(_http.HttpClient.findProxyFromEnvironment, T$1.Uri__ToString());
    },
    get C933() {
      return C[933] = dart.const({
        __proto__: _http._Proxy.prototype,
        [_Proxy_isDirect]: true,
        [_Proxy_password]: null,
        [_Proxy_username]: null,
        [_Proxy_port]: null,
        [_Proxy_host]: null
      });
    },
    get C932() {
      return C[932] = dart.constList([C[933] || CT.C933], T$1._ProxyL());
    },
    get C931() {
      return C[931] = dart.const({
        __proto__: _http._ProxyConfiguration.prototype,
        [_ProxyConfiguration_proxies]: C[932] || CT.C932
      });
    },
    get C934() {
      return C[934] = dart.const({
        __proto__: _http._AuthenticationScheme.prototype,
        [_scheme$]: -1
      });
    },
    get C935() {
      return C[935] = dart.const({
        __proto__: _http._AuthenticationScheme.prototype,
        [_scheme$]: 0
      });
    },
    get C936() {
      return C[936] = dart.const({
        __proto__: _http._AuthenticationScheme.prototype,
        [_scheme$]: 1
      });
    },
    get C937() {
      return C[937] = dart.constList([72, 84, 84, 80], T$0.intL());
    },
    get C938() {
      return C[938] = dart.constList([72, 84, 84, 80, 47, 49, 46], T$0.intL());
    },
    get C939() {
      return C[939] = dart.constList([72, 84, 84, 80, 47, 49, 46, 48], T$0.intL());
    },
    get C940() {
      return C[940] = dart.constList([72, 84, 84, 80, 47, 49, 46, 49], T$0.intL());
    },
    get C941() {
      return C[941] = dart.constList([false, false, false, false, false, false, false, false, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, true, true, false, false, true, false, false, true, false, false, false, false, false, false, false, false, false, false, true, true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true, false, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], T$0.boolL());
    },
    get C942() {
      return C[942] = dart.const({
        __proto__: _http.CompressionOptions.prototype,
        [enabled$]: true,
        [serverMaxWindowBits$]: null,
        [clientMaxWindowBits$]: null,
        [serverNoContextTakeover$]: false,
        [clientNoContextTakeover$]: false
      });
    },
    get C943() {
      return C[943] = dart.const({
        __proto__: _http.CompressionOptions.prototype,
        [enabled$]: false,
        [serverMaxWindowBits$]: null,
        [clientMaxWindowBits$]: null,
        [serverNoContextTakeover$]: false,
        [clientNoContextTakeover$]: false
      });
    },
    get C944() {
      return C[944] = dart.constList([0, 0, 255, 255], T$0.intL());
    },
    get C945() {
      return C[945] = dart.const({
        __proto__: _js_annotations._Anonymous.prototype
      });
    }
  }, false);
  core.Invocation = class Invocation extends core.Object {
    static method(memberName, positionalArguments, namedArguments = null) {
      if (memberName == null) dart.nullFailed(I[10], 20, 18, "memberName");
      return new core._Invocation.method(memberName, null, positionalArguments, namedArguments);
    }
    static genericMethod(memberName, typeArguments, positionalArguments, namedArguments = null) {
      if (memberName == null) dart.nullFailed(I[10], 31, 43, "memberName");
      return new core._Invocation.method(memberName, typeArguments, positionalArguments, namedArguments);
    }
    get typeArguments() {
      return C[0] || CT.C0;
    }
    get isAccessor() {
      return dart.test(this.isGetter) || dart.test(this.isSetter);
    }
  };
  (core.Invocation.new = function() {
    ;
  }).prototype = core.Invocation.prototype;
  dart.addTypeTests(core.Invocation);
  dart.addTypeCaches(core.Invocation);
  dart.setGetterSignature(core.Invocation, () => ({
    __proto__: dart.getGetters(core.Invocation.__proto__),
    typeArguments: core.List$(core.Type),
    isAccessor: core.bool
  }));
  dart.setLibraryUri(core.Invocation, I[8]);
  dart.InvocationImpl = class InvocationImpl extends core.Invocation {
    get memberName() {
      return this[memberName$];
    }
    set memberName(value) {
      super.memberName = value;
    }
    get positionalArguments() {
      return this[positionalArguments$];
    }
    set positionalArguments(value) {
      super.positionalArguments = value;
    }
    get namedArguments() {
      return this[namedArguments$];
    }
    set namedArguments(value) {
      super.namedArguments = value;
    }
    get typeArguments() {
      return this[typeArguments$];
    }
    set typeArguments(value) {
      super.typeArguments = value;
    }
    get isMethod() {
      return this[isMethod$];
    }
    set isMethod(value) {
      super.isMethod = value;
    }
    get isGetter() {
      return this[isGetter$];
    }
    set isGetter(value) {
      super.isGetter = value;
    }
    get isSetter() {
      return this[isSetter$];
    }
    set isSetter(value) {
      super.isSetter = value;
    }
    get failureMessage() {
      return this[failureMessage$];
    }
    set failureMessage(value) {
      super.failureMessage = value;
    }
    static _namedArgsToSymbols(namedArgs) {
      if (namedArgs == null) return const$0 || (const$0 = dart.constMap(T$.SymbolL(), dart.dynamic, []));
      return T$.MapOfSymbol$dynamic().unmodifiable(collection.LinkedHashMap.fromIterable(dart.getOwnPropertyNames(namedArgs), {
        key: dart._dartSymbol,
        value: k => namedArgs[k]
      }));
    }
  };
  (dart.InvocationImpl.new = function(memberName, positionalArguments, opts) {
    if (positionalArguments == null) dart.nullFailed(I[2], 20, 44, "positionalArguments");
    let namedArguments = opts && 'namedArguments' in opts ? opts.namedArguments : null;
    let typeArguments = opts && 'typeArguments' in opts ? opts.typeArguments : const$ || (const$ = dart.constList([], dart.dynamic));
    if (typeArguments == null) dart.nullFailed(I[2], 22, 12, "typeArguments");
    let isMethod = opts && 'isMethod' in opts ? opts.isMethod : false;
    if (isMethod == null) dart.nullFailed(I[2], 23, 12, "isMethod");
    let isGetter = opts && 'isGetter' in opts ? opts.isGetter : false;
    if (isGetter == null) dart.nullFailed(I[2], 24, 12, "isGetter");
    let isSetter = opts && 'isSetter' in opts ? opts.isSetter : false;
    if (isSetter == null) dart.nullFailed(I[2], 25, 12, "isSetter");
    let failureMessage = opts && 'failureMessage' in opts ? opts.failureMessage : "method not found";
    if (failureMessage == null) dart.nullFailed(I[2], 26, 12, "failureMessage");
    this[isMethod$] = isMethod;
    this[isGetter$] = isGetter;
    this[isSetter$] = isSetter;
    this[failureMessage$] = failureMessage;
    this[memberName$] = dart.test(isSetter) ? dart._setterSymbol(memberName) : dart._dartSymbol(memberName);
    this[positionalArguments$] = core.List.unmodifiable(positionalArguments);
    this[namedArguments$] = dart.InvocationImpl._namedArgsToSymbols(namedArguments);
    this[typeArguments$] = T$.ListOfType().unmodifiable(typeArguments[$map](dart.dynamic, dart.wrapType));
    dart.InvocationImpl.__proto__.new.call(this);
    ;
  }).prototype = dart.InvocationImpl.prototype;
  dart.addTypeTests(dart.InvocationImpl);
  dart.addTypeCaches(dart.InvocationImpl);
  dart.setLibraryUri(dart.InvocationImpl, I[9]);
  dart.setFieldSignature(dart.InvocationImpl, () => ({
    __proto__: dart.getFields(dart.InvocationImpl.__proto__),
    memberName: dart.finalFieldType(core.Symbol),
    positionalArguments: dart.finalFieldType(core.List),
    namedArguments: dart.finalFieldType(core.Map$(core.Symbol, dart.dynamic)),
    typeArguments: dart.finalFieldType(core.List$(core.Type)),
    isMethod: dart.finalFieldType(core.bool),
    isGetter: dart.finalFieldType(core.bool),
    isSetter: dart.finalFieldType(core.bool),
    failureMessage: dart.finalFieldType(core.String)
  }));
  var name$0 = dart.privateName(_debugger, "JsonMLConfig.name");
  _debugger.JsonMLConfig = class JsonMLConfig extends core.Object {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    toString() {
      return "JsonMLConfig(" + dart.str(this.name) + ")";
    }
  };
  (_debugger.JsonMLConfig.new = function(name) {
    if (name == null) dart.nullFailed(I[11], 28, 27, "name");
    this[name$0] = name;
    ;
  }).prototype = _debugger.JsonMLConfig.prototype;
  dart.addTypeTests(_debugger.JsonMLConfig);
  dart.addTypeCaches(_debugger.JsonMLConfig);
  dart.setLibraryUri(_debugger.JsonMLConfig, I[12]);
  dart.setFieldSignature(_debugger.JsonMLConfig, () => ({
    __proto__: dart.getFields(_debugger.JsonMLConfig.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(_debugger.JsonMLConfig, ['toString']);
  dart.defineLazy(_debugger.JsonMLConfig, {
    /*_debugger.JsonMLConfig.none*/get none() {
      return C[1] || CT.C1;
    },
    /*_debugger.JsonMLConfig.skipDart*/get skipDart() {
      return C[2] || CT.C2;
    },
    /*_debugger.JsonMLConfig.keyToString*/get keyToString() {
      return C[3] || CT.C3;
    },
    /*_debugger.JsonMLConfig.asClass*/get asClass() {
      return C[4] || CT.C4;
    },
    /*_debugger.JsonMLConfig.asObject*/get asObject() {
      return C[5] || CT.C5;
    },
    /*_debugger.JsonMLConfig.asMap*/get asMap() {
      return C[6] || CT.C6;
    }
  }, false);
  _debugger.JSNative = class JSNative extends core.Object {
    static getProperty(object, name) {
      return object[name];
    }
    static setProperty(object, name, value) {
      return object[name] = value;
    }
  };
  (_debugger.JSNative.new = function() {
    ;
  }).prototype = _debugger.JSNative.prototype;
  dart.addTypeTests(_debugger.JSNative);
  dart.addTypeCaches(_debugger.JSNative);
  dart.setLibraryUri(_debugger.JSNative, I[12]);
  var name$1 = dart.privateName(_debugger, "NameValuePair.name");
  var value$ = dart.privateName(_debugger, "NameValuePair.value");
  var config$ = dart.privateName(_debugger, "NameValuePair.config");
  var hideName$ = dart.privateName(_debugger, "NameValuePair.hideName");
  _debugger.NameValuePair = class NameValuePair extends core.Object {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get config() {
      return this[config$];
    }
    set config(value) {
      super.config = value;
    }
    get hideName() {
      return this[hideName$];
    }
    set hideName(value) {
      super.hideName = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (!_debugger.NameValuePair.is(other)) return false;
      if (dart.test(this.hideName) || dart.test(other.hideName)) return this === other;
      return other.name == this.name;
    }
    get hashCode() {
      return dart.hashCode(this.name);
    }
    get displayName() {
      return dart.test(this.hideName) ? "" : this.name;
    }
  };
  (_debugger.NameValuePair.new = function(opts) {
    let name = opts && 'name' in opts ? opts.name : "";
    if (name == null) dart.nullFailed(I[11], 172, 13, "name");
    let value = opts && 'value' in opts ? opts.value : null;
    let config = opts && 'config' in opts ? opts.config : C[1] || CT.C1;
    if (config == null) dart.nullFailed(I[11], 174, 12, "config");
    let hideName = opts && 'hideName' in opts ? opts.hideName : false;
    if (hideName == null) dart.nullFailed(I[11], 175, 12, "hideName");
    this[name$1] = name;
    this[value$] = value;
    this[config$] = config;
    this[hideName$] = hideName;
    ;
  }).prototype = _debugger.NameValuePair.prototype;
  dart.addTypeTests(_debugger.NameValuePair);
  dart.addTypeCaches(_debugger.NameValuePair);
  dart.setGetterSignature(_debugger.NameValuePair, () => ({
    __proto__: dart.getGetters(_debugger.NameValuePair.__proto__),
    displayName: core.String
  }));
  dart.setLibraryUri(_debugger.NameValuePair, I[12]);
  dart.setFieldSignature(_debugger.NameValuePair, () => ({
    __proto__: dart.getFields(_debugger.NameValuePair.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(dart.nullable(core.Object)),
    config: dart.finalFieldType(_debugger.JsonMLConfig),
    hideName: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(_debugger.NameValuePair, ['_equals']);
  dart.defineExtensionAccessors(_debugger.NameValuePair, ['hashCode']);
  var key$ = dart.privateName(_debugger, "MapEntry.key");
  var value$0 = dart.privateName(_debugger, "MapEntry.value");
  _debugger.MapEntry = class MapEntry extends core.Object {
    get key() {
      return this[key$];
    }
    set key(value) {
      super.key = value;
    }
    get value() {
      return this[value$0];
    }
    set value(value) {
      super.value = value;
    }
  };
  (_debugger.MapEntry.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let value = opts && 'value' in opts ? opts.value : null;
    this[key$] = key;
    this[value$0] = value;
    ;
  }).prototype = _debugger.MapEntry.prototype;
  dart.addTypeTests(_debugger.MapEntry);
  dart.addTypeCaches(_debugger.MapEntry);
  dart.setLibraryUri(_debugger.MapEntry, I[12]);
  dart.setFieldSignature(_debugger.MapEntry, () => ({
    __proto__: dart.getFields(_debugger.MapEntry.__proto__),
    key: dart.finalFieldType(dart.nullable(core.Object)),
    value: dart.finalFieldType(dart.nullable(core.Object))
  }));
  var start$ = dart.privateName(_debugger, "IterableSpan.start");
  var end$ = dart.privateName(_debugger, "IterableSpan.end");
  var iterable$ = dart.privateName(_debugger, "IterableSpan.iterable");
  _debugger.IterableSpan = class IterableSpan extends core.Object {
    get start() {
      return this[start$];
    }
    set start(value) {
      super.start = value;
    }
    get end() {
      return this[end$];
    }
    set end(value) {
      super.end = value;
    }
    get iterable() {
      return this[iterable$];
    }
    set iterable(value) {
      super.iterable = value;
    }
    get length() {
      return dart.notNull(this.end) - dart.notNull(this.start);
    }
    get maxPowerOfSubsetSize() {
      return (math.log(dart.notNull(this.length) - 0.5) / math.log(_debugger._maxSpanLength))[$truncate]();
    }
    get subsetSize() {
      return math.pow(_debugger._maxSpanLength, this.maxPowerOfSubsetSize)[$toInt]();
    }
    asMap() {
      return this.iterable[$skip](this.start)[$take](this.length)[$toList]()[$asMap]();
    }
    children() {
      let children = T$.JSArrayOfNameValuePair().of([]);
      if (dart.notNull(this.length) <= dart.notNull(_debugger._maxSpanLength)) {
        this.asMap()[$forEach](dart.fn((i, element) => {
          if (i == null) dart.nullFailed(I[11], 225, 24, "i");
          children[$add](new _debugger.NameValuePair.new({name: (dart.notNull(i) + dart.notNull(this.start))[$toString](), value: element}));
        }, T$.intAnddynamicTovoid()));
      } else {
        for (let i = this.start; dart.notNull(i) < dart.notNull(this.end); i = dart.notNull(i) + dart.notNull(this.subsetSize)) {
          let subSpan = new _debugger.IterableSpan.new(i, math.min(core.int, this.end, dart.notNull(this.subsetSize) + dart.notNull(i)), this.iterable);
          if (subSpan.length === 1) {
            children[$add](new _debugger.NameValuePair.new({name: dart.toString(i), value: this.iterable[$elementAt](i)}));
          } else {
            children[$add](new _debugger.NameValuePair.new({name: "[" + dart.str(i) + "..." + dart.str(dart.notNull(subSpan.end) - 1) + "]", value: subSpan, hideName: true}));
          }
        }
      }
      return children;
    }
  };
  (_debugger.IterableSpan.new = function(start, end, iterable) {
    if (start == null) dart.nullFailed(I[11], 203, 21, "start");
    if (end == null) dart.nullFailed(I[11], 203, 33, "end");
    if (iterable == null) dart.nullFailed(I[11], 203, 43, "iterable");
    this[start$] = start;
    this[end$] = end;
    this[iterable$] = iterable;
    ;
  }).prototype = _debugger.IterableSpan.prototype;
  dart.addTypeTests(_debugger.IterableSpan);
  dart.addTypeCaches(_debugger.IterableSpan);
  dart.setMethodSignature(_debugger.IterableSpan, () => ({
    __proto__: dart.getMethods(_debugger.IterableSpan.__proto__),
    asMap: dart.fnType(core.Map$(core.int, dart.dynamic), []),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [])
  }));
  dart.setGetterSignature(_debugger.IterableSpan, () => ({
    __proto__: dart.getGetters(_debugger.IterableSpan.__proto__),
    length: core.int,
    maxPowerOfSubsetSize: core.int,
    subsetSize: core.int
  }));
  dart.setLibraryUri(_debugger.IterableSpan, I[12]);
  dart.setFieldSignature(_debugger.IterableSpan, () => ({
    __proto__: dart.getFields(_debugger.IterableSpan.__proto__),
    start: dart.finalFieldType(core.int),
    end: dart.finalFieldType(core.int),
    iterable: dart.finalFieldType(core.Iterable)
  }));
  var name$2 = dart.privateName(_debugger, "Library.name");
  var object$ = dart.privateName(_debugger, "Library.object");
  _debugger.Library = class Library extends core.Object {
    get name() {
      return this[name$2];
    }
    set name(value) {
      super.name = value;
    }
    get object() {
      return this[object$];
    }
    set object(value) {
      super.object = value;
    }
  };
  (_debugger.Library.new = function(name, object) {
    if (name == null) dart.nullFailed(I[11], 248, 16, "name");
    if (object == null) dart.nullFailed(I[11], 248, 27, "object");
    this[name$2] = name;
    this[object$] = object;
    ;
  }).prototype = _debugger.Library.prototype;
  dart.addTypeTests(_debugger.Library);
  dart.addTypeCaches(_debugger.Library);
  dart.setLibraryUri(_debugger.Library, I[12]);
  dart.setFieldSignature(_debugger.Library, () => ({
    __proto__: dart.getFields(_debugger.Library.__proto__),
    name: dart.finalFieldType(core.String),
    object: dart.finalFieldType(core.Object)
  }));
  var object$0 = dart.privateName(_debugger, "NamedConstructor.object");
  _debugger.NamedConstructor = class NamedConstructor extends core.Object {
    get object() {
      return this[object$0];
    }
    set object(value) {
      super.object = value;
    }
  };
  (_debugger.NamedConstructor.new = function(object) {
    if (object == null) dart.nullFailed(I[11], 255, 25, "object");
    this[object$0] = object;
    ;
  }).prototype = _debugger.NamedConstructor.prototype;
  dart.addTypeTests(_debugger.NamedConstructor);
  dart.addTypeCaches(_debugger.NamedConstructor);
  dart.setLibraryUri(_debugger.NamedConstructor, I[12]);
  dart.setFieldSignature(_debugger.NamedConstructor, () => ({
    __proto__: dart.getFields(_debugger.NamedConstructor.__proto__),
    object: dart.finalFieldType(core.Object)
  }));
  var name$3 = dart.privateName(_debugger, "HeritageClause.name");
  var types$ = dart.privateName(_debugger, "HeritageClause.types");
  _debugger.HeritageClause = class HeritageClause extends core.Object {
    get name() {
      return this[name$3];
    }
    set name(value) {
      super.name = value;
    }
    get types() {
      return this[types$];
    }
    set types(value) {
      super.types = value;
    }
  };
  (_debugger.HeritageClause.new = function(name, types) {
    if (name == null) dart.nullFailed(I[11], 261, 23, "name");
    if (types == null) dart.nullFailed(I[11], 261, 34, "types");
    this[name$3] = name;
    this[types$] = types;
    ;
  }).prototype = _debugger.HeritageClause.prototype;
  dart.addTypeTests(_debugger.HeritageClause);
  dart.addTypeCaches(_debugger.HeritageClause);
  dart.setLibraryUri(_debugger.HeritageClause, I[12]);
  dart.setFieldSignature(_debugger.HeritageClause, () => ({
    __proto__: dart.getFields(_debugger.HeritageClause.__proto__),
    name: dart.finalFieldType(core.String),
    types: dart.finalFieldType(core.List)
  }));
  var _attributes = dart.privateName(_debugger, "_attributes");
  var __JsonMLElement__jsonML = dart.privateName(_debugger, "_#JsonMLElement#_jsonML");
  var __JsonMLElement__jsonML_isSet = dart.privateName(_debugger, "_#JsonMLElement#_jsonML#isSet");
  var _jsonML = dart.privateName(_debugger, "_jsonML");
  _debugger.JsonMLElement = class JsonMLElement extends core.Object {
    get [_jsonML]() {
      let t8;
      return dart.test(this[__JsonMLElement__jsonML_isSet]) ? (t8 = this[__JsonMLElement__jsonML], t8) : dart.throw(new _internal.LateError.fieldNI("_jsonML"));
    }
    set [_jsonML](t8) {
      if (t8 == null) dart.nullFailed(I[11], 285, 13, "null");
      this[__JsonMLElement__jsonML_isSet] = true;
      this[__JsonMLElement__jsonML] = t8;
    }
    appendChild(element) {
      this[_jsonML][$add](dart.dsend(element, 'toJsonML', []));
    }
    createChild(tagName) {
      if (tagName == null) dart.nullFailed(I[11], 296, 36, "tagName");
      let c = new _debugger.JsonMLElement.new(tagName);
      this[_jsonML][$add](c.toJsonML());
      return c;
    }
    createObjectTag(object) {
      let t9;
      t9 = this.createChild("object");
      return (() => {
        t9.addAttribute("object", object);
        return t9;
      })();
    }
    setStyle(style) {
      if (style == null) dart.nullFailed(I[11], 305, 24, "style");
      dart.dput(this[_attributes], 'style', style);
    }
    addStyle(style) {
      let t9;
      if (style == null) dart.nullFailed(I[11], 309, 19, "style");
      if (dart.dload(this[_attributes], 'style') == null) {
        dart.dput(this[_attributes], 'style', style);
      } else {
        t9 = this[_attributes];
        dart.dput(t9, 'style', dart.dsend(dart.dload(t9, 'style'), '+', [style]));
      }
    }
    addAttribute(key, value) {
      _debugger.JSNative.setProperty(this[_attributes], key, value);
    }
    createTextChild(text) {
      if (text == null) dart.nullFailed(I[11], 321, 26, "text");
      this[_jsonML][$add](text);
    }
    toJsonML() {
      return this[_jsonML];
    }
  };
  (_debugger.JsonMLElement.new = function(tagName) {
    this[_attributes] = null;
    this[__JsonMLElement__jsonML] = null;
    this[__JsonMLElement__jsonML_isSet] = false;
    this[_attributes] = {};
    this[_jsonML] = [tagName, this[_attributes]];
  }).prototype = _debugger.JsonMLElement.prototype;
  dart.addTypeTests(_debugger.JsonMLElement);
  dart.addTypeCaches(_debugger.JsonMLElement);
  dart.setMethodSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getMethods(_debugger.JsonMLElement.__proto__),
    appendChild: dart.fnType(dart.dynamic, [dart.dynamic]),
    createChild: dart.fnType(_debugger.JsonMLElement, [core.String]),
    createObjectTag: dart.fnType(_debugger.JsonMLElement, [dart.dynamic]),
    setStyle: dart.fnType(dart.void, [core.String]),
    addStyle: dart.fnType(dart.dynamic, [core.String]),
    addAttribute: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    createTextChild: dart.fnType(dart.dynamic, [core.String]),
    toJsonML: dart.fnType(dart.dynamic, [])
  }));
  dart.setGetterSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getGetters(_debugger.JsonMLElement.__proto__),
    [_jsonML]: core.List
  }));
  dart.setSetterSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getSetters(_debugger.JsonMLElement.__proto__),
    [_jsonML]: core.List
  }));
  dart.setLibraryUri(_debugger.JsonMLElement, I[12]);
  dart.setFieldSignature(_debugger.JsonMLElement, () => ({
    __proto__: dart.getFields(_debugger.JsonMLElement.__proto__),
    [_attributes]: dart.fieldType(dart.dynamic),
    [__JsonMLElement__jsonML]: dart.fieldType(dart.nullable(core.List)),
    [__JsonMLElement__jsonML_isSet]: dart.fieldType(core.bool)
  }));
  var customFormattersOn = dart.privateName(_debugger, "JsonMLFormatter.customFormattersOn");
  var _simpleFormatter$ = dart.privateName(_debugger, "_simpleFormatter");
  _debugger.JsonMLFormatter = class JsonMLFormatter extends core.Object {
    get customFormattersOn() {
      return this[customFormattersOn];
    }
    set customFormattersOn(value) {
      this[customFormattersOn] = value;
    }
    setMaxSpanLengthForTestingOnly(spanLength) {
      if (spanLength == null) dart.nullFailed(I[11], 363, 43, "spanLength");
      _debugger._maxSpanLength = spanLength;
    }
    header(object, config) {
      let t9;
      this.customFormattersOn = true;
      if (dart.equals(config, _debugger.JsonMLConfig.skipDart) || dart.test(_debugger.isNativeJavaScriptObject(object))) {
        return null;
      }
      let c = this[_simpleFormatter$].preview(object, config);
      if (c == null) return null;
      if (dart.equals(config, _debugger.JsonMLConfig.keyToString)) {
        c = dart.toString(object);
      }
      let element = (t9 = new _debugger.JsonMLElement.new("span"), (() => {
        t9.setStyle("background-color: #d9edf7;color: black");
        t9.createTextChild(c);
        return t9;
      })());
      return element.toJsonML();
    }
    hasBody(object, config) {
      return this[_simpleFormatter$].hasChildren(object, config);
    }
    body(object, config) {
      let t9, t9$, t9$0, t9$1, t9$2;
      let body = (t9 = new _debugger.JsonMLElement.new("ol"), (() => {
        t9.setStyle("list-style-type: none;" + "padding-left: 0px;" + "margin-top: 0px;" + "margin-bottom: 0px;" + "margin-left: 12px;");
        return t9;
      })());
      if (core.StackTrace.is(object)) {
        body.addStyle("background-color: thistle;color: rgb(196, 26, 22);");
      }
      let children = this[_simpleFormatter$].children(object, config);
      if (children == null) return body.toJsonML();
      for (let child of children) {
        let li = body.createChild("li");
        li.setStyle("padding-left: 13px;");
        let nameSpan = null;
        let valueStyle = "";
        if (!dart.test(child.hideName)) {
          nameSpan = (t9$ = new _debugger.JsonMLElement.new("span"), (() => {
            t9$.createTextChild(child.displayName[$isNotEmpty] ? dart.str(child.displayName) + ": " : "");
            t9$.setStyle("background-color: thistle; color: rgb(136, 19, 145); margin-right: -13px");
            return t9$;
          })());
          valueStyle = "margin-left: 13px";
        }
        if (_debugger._typeof(child.value) === "object" || _debugger._typeof(child.value) === "function") {
          let valueSpan = (t9$0 = new _debugger.JsonMLElement.new("span"), (() => {
            t9$0.setStyle(valueStyle);
            return t9$0;
          })());
          t9$1 = valueSpan.createObjectTag(child.value);
          (() => {
            t9$1.addAttribute("config", child.config);
            return t9$1;
          })();
          if (nameSpan != null) {
            li.appendChild(nameSpan);
          }
          li.appendChild(valueSpan);
        } else {
          let line = li.createChild("span");
          if (nameSpan != null) {
            line.appendChild(nameSpan);
          }
          line.appendChild((t9$2 = new _debugger.JsonMLElement.new("span"), (() => {
            t9$2.createTextChild(_debugger.safePreview(child.value, child.config));
            t9$2.setStyle(valueStyle);
            return t9$2;
          })()));
        }
      }
      return body.toJsonML();
    }
  };
  (_debugger.JsonMLFormatter.new = function(_simpleFormatter) {
    if (_simpleFormatter == null) dart.nullFailed(I[11], 361, 24, "_simpleFormatter");
    this[customFormattersOn] = false;
    this[_simpleFormatter$] = _simpleFormatter;
    ;
  }).prototype = _debugger.JsonMLFormatter.prototype;
  dart.addTypeTests(_debugger.JsonMLFormatter);
  dart.addTypeCaches(_debugger.JsonMLFormatter);
  dart.setMethodSignature(_debugger.JsonMLFormatter, () => ({
    __proto__: dart.getMethods(_debugger.JsonMLFormatter.__proto__),
    setMaxSpanLengthForTestingOnly: dart.fnType(dart.void, [core.int]),
    header: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic]),
    hasBody: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    body: dart.fnType(dart.dynamic, [dart.dynamic, dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.JsonMLFormatter, I[12]);
  dart.setFieldSignature(_debugger.JsonMLFormatter, () => ({
    __proto__: dart.getFields(_debugger.JsonMLFormatter.__proto__),
    [_simpleFormatter$]: dart.fieldType(_debugger.DartFormatter),
    customFormattersOn: dart.fieldType(core.bool)
  }));
  _debugger.Formatter = class Formatter extends core.Object {};
  (_debugger.Formatter.new = function() {
    ;
  }).prototype = _debugger.Formatter.prototype;
  dart.addTypeTests(_debugger.Formatter);
  dart.addTypeCaches(_debugger.Formatter);
  dart.setLibraryUri(_debugger.Formatter, I[12]);
  var _formatters = dart.privateName(_debugger, "_formatters");
  var _printConsoleError = dart.privateName(_debugger, "_printConsoleError");
  _debugger.DartFormatter = class DartFormatter extends core.Object {
    preview(object, config) {
      try {
        if (object == null || typeof object == 'number' || typeof object == 'string' || dart.test(_debugger.isNativeJavaScriptObject(object))) {
          return dart.toString(object);
        }
        for (let formatter of this[_formatters]) {
          if (dart.test(formatter.accept(object, config))) return formatter.preview(object);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let trace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_printConsoleError]("Caught exception " + dart.str(e) + "\n trace:\n" + dart.str(trace));
        } else
          throw e$;
      }
      return null;
    }
    hasChildren(object, config) {
      if (object == null) return false;
      try {
        for (let formatter of this[_formatters]) {
          if (dart.test(formatter.accept(object, config))) return formatter.hasChildren(object);
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let trace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_printConsoleError]("[hasChildren] Caught exception " + dart.str(e) + "\n trace:\n" + dart.str(trace));
        } else
          throw e$;
      }
      return false;
    }
    children(object, config) {
      try {
        if (object != null) {
          for (let formatter of this[_formatters]) {
            if (dart.test(formatter.accept(object, config))) return formatter.children(object);
          }
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        let trace = dart.stackTrace(e$);
        if (core.Object.is(e)) {
          this[_printConsoleError]("Caught exception " + dart.str(e) + "\n trace:\n" + dart.str(trace));
        } else
          throw e$;
      }
      return T$.JSArrayOfNameValuePair().of([]);
    }
    [_printConsoleError](message) {
      if (message == null) dart.nullFailed(I[11], 523, 34, "message");
      return window.console.error(message);
    }
  };
  (_debugger.DartFormatter.new = function() {
    this[_formatters] = T$.JSArrayOfFormatter().of([new _debugger.ObjectInternalsFormatter.new(), new _debugger.ClassFormatter.new(), new _debugger.TypeFormatter.new(), new _debugger.NamedConstructorFormatter.new(), new _debugger.MapFormatter.new(), new _debugger.MapOverviewFormatter.new(), new _debugger.IterableFormatter.new(), new _debugger.IterableSpanFormatter.new(), new _debugger.MapEntryFormatter.new(), new _debugger.StackTraceFormatter.new(), new _debugger.ErrorAndExceptionFormatter.new(), new _debugger.FunctionFormatter.new(), new _debugger.HeritageClauseFormatter.new(), new _debugger.LibraryModuleFormatter.new(), new _debugger.LibraryFormatter.new(), new _debugger.ObjectFormatter.new()]);
    ;
  }).prototype = _debugger.DartFormatter.prototype;
  dart.addTypeTests(_debugger.DartFormatter);
  dart.addTypeCaches(_debugger.DartFormatter);
  dart.setMethodSignature(_debugger.DartFormatter, () => ({
    __proto__: dart.getMethods(_debugger.DartFormatter.__proto__),
    preview: dart.fnType(dart.nullable(core.String), [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    children: dart.fnType(dart.nullable(core.List$(_debugger.NameValuePair)), [dart.dynamic, dart.dynamic]),
    [_printConsoleError]: dart.fnType(dart.void, [core.String])
  }));
  dart.setLibraryUri(_debugger.DartFormatter, I[12]);
  dart.setFieldSignature(_debugger.DartFormatter, () => ({
    __proto__: dart.getFields(_debugger.DartFormatter.__proto__),
    [_formatters]: dart.finalFieldType(core.List$(_debugger.Formatter))
  }));
  _debugger.ObjectFormatter = class ObjectFormatter extends _debugger.Formatter {
    accept(object, config) {
      return !dart.test(_debugger.isNativeJavaScriptObject(object));
    }
    preview(object) {
      let typeName = _debugger.getObjectTypeName(object);
      try {
        let toString = dart.str(object);
        if (toString.length > dart.notNull(_debugger.maxFormatterStringLength)) {
          toString = toString[$substring](0, dart.notNull(_debugger.maxFormatterStringLength) - 3) + "...";
        }
        if (toString[$contains](typeName)) {
          return toString;
        } else {
          return toString + " (" + dart.str(typeName) + ")";
        }
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
        } else
          throw e$;
      }
      return typeName;
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      let type = dart.getType(object);
      let ret = new (T$._HashSetOfNameValuePair()).new();
      let fields = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getFields(type), fields, object, true);
      let getters = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getGetters(type), getters, object, true);
      ret.addAll(_debugger.sortProperties(fields));
      ret.addAll(_debugger.sortProperties(getters));
      _debugger.addMetadataChildren(object, ret);
      return ret[$toList]();
    }
  };
  (_debugger.ObjectFormatter.new = function() {
    ;
  }).prototype = _debugger.ObjectFormatter.prototype;
  dart.addTypeTests(_debugger.ObjectFormatter);
  dart.addTypeCaches(_debugger.ObjectFormatter);
  dart.setMethodSignature(_debugger.ObjectFormatter, () => ({
    __proto__: dart.getMethods(_debugger.ObjectFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(dart.nullable(core.List$(_debugger.NameValuePair)), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.ObjectFormatter, I[12]);
  _debugger.ObjectInternalsFormatter = class ObjectInternalsFormatter extends _debugger.ObjectFormatter {
    accept(object, config) {
      return dart.test(super.accept(object, config)) && dart.equals(config, _debugger.JsonMLConfig.asObject);
    }
    preview(object) {
      return _debugger.getObjectTypeName(object);
    }
  };
  (_debugger.ObjectInternalsFormatter.new = function() {
    ;
  }).prototype = _debugger.ObjectInternalsFormatter.prototype;
  dart.addTypeTests(_debugger.ObjectInternalsFormatter);
  dart.addTypeCaches(_debugger.ObjectInternalsFormatter);
  dart.setLibraryUri(_debugger.ObjectInternalsFormatter, I[12]);
  _debugger.LibraryModuleFormatter = class LibraryModuleFormatter extends core.Object {
    accept(object, config) {
      return dart.getModuleName(core.Object.as(object)) != null;
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let libraryNames = dart.nullCheck(dart.getModuleName(core.Object.as(object)))[$split]("/");
      if (dart.notNull(libraryNames[$length]) > 1 && libraryNames[$last] == libraryNames[$_get](dart.notNull(libraryNames[$length]) - 2)) {
        libraryNames[$_set](dart.notNull(libraryNames[$length]) - 1, "");
      }
      return "Library Module: " + dart.str(libraryNames[$join]("/"));
    }
    children(object) {
      let children = new (T$._HashSetOfNameValuePair()).new();
      for (let name of _debugger.getOwnPropertyNames(object)) {
        let value = _debugger.safeGetProperty(core.Object.as(object), name);
        children.add(new _debugger.NameValuePair.new({name: name, value: new _debugger.Library.new(name, dart.nullCheck(value)), hideName: true}));
      }
      return children[$toList]();
    }
  };
  (_debugger.LibraryModuleFormatter.new = function() {
    ;
  }).prototype = _debugger.LibraryModuleFormatter.prototype;
  dart.addTypeTests(_debugger.LibraryModuleFormatter);
  dart.addTypeCaches(_debugger.LibraryModuleFormatter);
  _debugger.LibraryModuleFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.LibraryModuleFormatter, () => ({
    __proto__: dart.getMethods(_debugger.LibraryModuleFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.LibraryModuleFormatter, I[12]);
  var genericParameters = dart.privateName(_debugger, "LibraryFormatter.genericParameters");
  _debugger.LibraryFormatter = class LibraryFormatter extends core.Object {
    get genericParameters() {
      return this[genericParameters];
    }
    set genericParameters(value) {
      this[genericParameters] = value;
    }
    accept(object, config) {
      return _debugger.Library.is(object);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      return core.String.as(dart.dload(object, 'name'));
    }
    children(object) {
      let children = new (T$._HashSetOfNameValuePair()).new();
      let objectProperties = _debugger.safeProperties(dart.dload(object, 'object'));
      dart.dsend(objectProperties, 'forEach', [dart.fn((name, value) => {
          if (dart.getGenericTypeCtor(value) != null) return;
          children.add(_debugger.NameValuePair.as(dart.isType(value) ? this.classChild(core.String.as(name), core.Object.as(value)) : new _debugger.NameValuePair.new({name: core.String.as(name), value: value})));
        }, T$.dynamicAnddynamicToNull())]);
      return children[$toList]();
    }
    classChild(name, child) {
      if (name == null) dart.nullFailed(I[11], 644, 21, "name");
      if (child == null) dart.nullFailed(I[11], 644, 34, "child");
      let typeName = _debugger.getTypeName(child);
      return new _debugger.NameValuePair.new({name: typeName, value: child, config: _debugger.JsonMLConfig.asClass});
    }
  };
  (_debugger.LibraryFormatter.new = function() {
    this[genericParameters] = new (T$.IdentityMapOfString$String()).new();
    ;
  }).prototype = _debugger.LibraryFormatter.prototype;
  dart.addTypeTests(_debugger.LibraryFormatter);
  dart.addTypeCaches(_debugger.LibraryFormatter);
  _debugger.LibraryFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.LibraryFormatter, () => ({
    __proto__: dart.getMethods(_debugger.LibraryFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic]),
    classChild: dart.fnType(dart.dynamic, [core.String, core.Object])
  }));
  dart.setLibraryUri(_debugger.LibraryFormatter, I[12]);
  dart.setFieldSignature(_debugger.LibraryFormatter, () => ({
    __proto__: dart.getFields(_debugger.LibraryFormatter.__proto__),
    genericParameters: dart.fieldType(collection.HashMap$(core.String, core.String))
  }));
  _debugger.FunctionFormatter = class FunctionFormatter extends core.Object {
    accept(object, config) {
      if (_debugger._typeof(object) !== "function") return false;
      return dart.getReifiedType(object) != null;
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      try {
        return dart.typeName(dart.getReifiedType(object));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
        } else
          throw e$;
      }
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "signature", value: this.preview(object)}), new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
    }
  };
  (_debugger.FunctionFormatter.new = function() {
    ;
  }).prototype = _debugger.FunctionFormatter.prototype;
  dart.addTypeTests(_debugger.FunctionFormatter);
  dart.addTypeCaches(_debugger.FunctionFormatter);
  _debugger.FunctionFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.FunctionFormatter, () => ({
    __proto__: dart.getMethods(_debugger.FunctionFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.FunctionFormatter, I[12]);
  _debugger.MapOverviewFormatter = class MapOverviewFormatter extends core.Object {
    accept(object, config) {
      return core.Map.is(object);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let map = core.Map.as(object);
      try {
        return dart.str(_debugger.getObjectTypeName(map));
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
        } else
          throw e$;
      }
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "[[instance view]]", value: object, config: _debugger.JsonMLConfig.asObject}), new _debugger.NameValuePair.new({name: "[[entries]]", value: object, config: _debugger.JsonMLConfig.asMap})]);
    }
  };
  (_debugger.MapOverviewFormatter.new = function() {
    ;
  }).prototype = _debugger.MapOverviewFormatter.prototype;
  dart.addTypeTests(_debugger.MapOverviewFormatter);
  dart.addTypeCaches(_debugger.MapOverviewFormatter);
  _debugger.MapOverviewFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.MapOverviewFormatter, () => ({
    __proto__: dart.getMethods(_debugger.MapOverviewFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.MapOverviewFormatter, I[12]);
  _debugger.MapFormatter = class MapFormatter extends core.Object {
    accept(object, config) {
      return _js_helper.InternalMap.is(object) || dart.equals(config, _debugger.JsonMLConfig.asMap);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let map = core.Map.as(object);
      try {
        return dart.str(_debugger.getObjectTypeName(map)) + " length " + dart.str(map[$length]);
      } catch (e$) {
        let e = dart.getThrown(e$);
        if (core.Object.is(e)) {
          return _debugger.safePreview(object, _debugger.JsonMLConfig.none);
        } else
          throw e$;
      }
    }
    children(object) {
      let map = core.Map.as(object);
      let entries = new (T$._HashSetOfNameValuePair()).new();
      map[$forEach](dart.fn((key, value) => {
        let entryWrapper = new _debugger.MapEntry.new({key: key, value: value});
        entries.add(new _debugger.NameValuePair.new({name: dart.toString(entries[$length]), value: entryWrapper}));
      }, T$.dynamicAnddynamicTovoid()));
      _debugger.addMetadataChildren(object, entries);
      return entries[$toList]();
    }
  };
  (_debugger.MapFormatter.new = function() {
    ;
  }).prototype = _debugger.MapFormatter.prototype;
  dart.addTypeTests(_debugger.MapFormatter);
  dart.addTypeCaches(_debugger.MapFormatter);
  _debugger.MapFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.MapFormatter, () => ({
    __proto__: dart.getMethods(_debugger.MapFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.MapFormatter, I[12]);
  _debugger.IterableFormatter = class IterableFormatter extends core.Object {
    accept(object, config) {
      return core.Iterable.is(object);
    }
    preview(object) {
      let iterable = core.Iterable.as(object);
      try {
        let length = iterable[$length];
        return dart.str(_debugger.getObjectTypeName(iterable)) + " length " + dart.str(length);
      } catch (e) {
        let _ = dart.getThrown(e);
        if (core.Object.is(_)) {
          return dart.str(_debugger.getObjectTypeName(iterable));
        } else
          throw e;
      }
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      let children = new (T$._HashSetOfNameValuePair()).new();
      children.addAll(new _debugger.IterableSpan.new(0, core.int.as(dart.dload(object, 'length')), core.Iterable.as(object)).children());
      _debugger.addMetadataChildren(object, children);
      return children[$toList]();
    }
  };
  (_debugger.IterableFormatter.new = function() {
    ;
  }).prototype = _debugger.IterableFormatter.prototype;
  dart.addTypeTests(_debugger.IterableFormatter);
  dart.addTypeCaches(_debugger.IterableFormatter);
  _debugger.IterableFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.IterableFormatter, () => ({
    __proto__: dart.getMethods(_debugger.IterableFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.IterableFormatter, I[12]);
  _debugger.NamedConstructorFormatter = class NamedConstructorFormatter extends core.Object {
    accept(object, config) {
      return _debugger.NamedConstructor.is(object);
    }
    preview(object) {
      return "Named Constructor";
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "JavaScript Function", value: object, config: _debugger.JsonMLConfig.skipDart})]);
    }
  };
  (_debugger.NamedConstructorFormatter.new = function() {
    ;
  }).prototype = _debugger.NamedConstructorFormatter.prototype;
  dart.addTypeTests(_debugger.NamedConstructorFormatter);
  dart.addTypeCaches(_debugger.NamedConstructorFormatter);
  _debugger.NamedConstructorFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.NamedConstructorFormatter, () => ({
    __proto__: dart.getMethods(_debugger.NamedConstructorFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.NamedConstructorFormatter, I[12]);
  _debugger.MapEntryFormatter = class MapEntryFormatter extends core.Object {
    accept(object, config) {
      return _debugger.MapEntry.is(object);
    }
    preview(object) {
      let entry = _debugger.MapEntry.as(object);
      return dart.str(_debugger.safePreview(entry.key, _debugger.JsonMLConfig.none)) + " => " + dart.str(_debugger.safePreview(entry.value, _debugger.JsonMLConfig.none));
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([new _debugger.NameValuePair.new({name: "key", value: dart.dload(object, 'key'), config: _debugger.JsonMLConfig.keyToString}), new _debugger.NameValuePair.new({name: "value", value: dart.dload(object, 'value')})]);
    }
  };
  (_debugger.MapEntryFormatter.new = function() {
    ;
  }).prototype = _debugger.MapEntryFormatter.prototype;
  dart.addTypeTests(_debugger.MapEntryFormatter);
  dart.addTypeCaches(_debugger.MapEntryFormatter);
  _debugger.MapEntryFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.MapEntryFormatter, () => ({
    __proto__: dart.getMethods(_debugger.MapEntryFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.MapEntryFormatter, I[12]);
  _debugger.HeritageClauseFormatter = class HeritageClauseFormatter extends core.Object {
    accept(object, config) {
      return _debugger.HeritageClause.is(object);
    }
    preview(object) {
      let clause = _debugger.HeritageClause.as(object);
      let typeNames = clause.types[$map](core.String, C[7] || CT.C7);
      return dart.str(clause.name) + " " + dart.str(typeNames[$join](", "));
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      let clause = _debugger.HeritageClause.as(object);
      let children = T$.JSArrayOfNameValuePair().of([]);
      for (let type of clause.types) {
        children[$add](new _debugger.NameValuePair.new({value: type, config: _debugger.JsonMLConfig.asClass}));
      }
      return children;
    }
  };
  (_debugger.HeritageClauseFormatter.new = function() {
    ;
  }).prototype = _debugger.HeritageClauseFormatter.prototype;
  dart.addTypeTests(_debugger.HeritageClauseFormatter);
  dart.addTypeCaches(_debugger.HeritageClauseFormatter);
  _debugger.HeritageClauseFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.HeritageClauseFormatter, () => ({
    __proto__: dart.getMethods(_debugger.HeritageClauseFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.HeritageClauseFormatter, I[12]);
  _debugger.IterableSpanFormatter = class IterableSpanFormatter extends core.Object {
    accept(object, config) {
      return _debugger.IterableSpan.is(object);
    }
    preview(object) {
      return "[" + dart.str(dart.dload(object, 'start')) + "..." + dart.str(dart.dsend(dart.dload(object, 'end'), '-', [1])) + "]";
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return T$.ListOfNameValuePair().as(dart.dsend(object, 'children', []));
    }
  };
  (_debugger.IterableSpanFormatter.new = function() {
    ;
  }).prototype = _debugger.IterableSpanFormatter.prototype;
  dart.addTypeTests(_debugger.IterableSpanFormatter);
  dart.addTypeCaches(_debugger.IterableSpanFormatter);
  _debugger.IterableSpanFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.IterableSpanFormatter, () => ({
    __proto__: dart.getMethods(_debugger.IterableSpanFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.IterableSpanFormatter, I[12]);
  _debugger.ErrorAndExceptionFormatter = class ErrorAndExceptionFormatter extends _debugger.ObjectFormatter {
    accept(object, config) {
      return core.Error.is(object) || core.Exception.is(object);
    }
    hasChildren(object) {
      return true;
    }
    preview(object) {
      let trace = dart.stackTrace(object);
      let line = dart.str(trace)[$split]("\n")[$firstWhere](dart.fn(l => {
        if (l == null) dart.nullFailed(I[11], 862, 10, "l");
        return l[$contains](_debugger.ErrorAndExceptionFormatter._pattern) && !l[$contains]("dart:sdk") && !l[$contains]("dart_sdk");
      }, T$.StringTobool()), {orElse: dart.fn(() => "", T$.VoidToString())});
      return line !== "" ? dart.str(object) + " at " + dart.str(line) : dart.str(object);
    }
    children(object) {
      let trace = dart.stackTrace(object);
      let entries = new (T$._HashSetOfNameValuePair()).new();
      entries.add(new _debugger.NameValuePair.new({name: "stackTrace", value: trace}));
      this.addInstanceMembers(object, entries);
      _debugger.addMetadataChildren(object, entries);
      return entries[$toList]();
    }
    addInstanceMembers(object, ret) {
      if (ret == null) dart.nullFailed(I[11], 880, 54, "ret");
      ret.add(new _debugger.NameValuePair.new({name: "[[instance members]]", value: object, config: _debugger.JsonMLConfig.asObject}));
    }
  };
  (_debugger.ErrorAndExceptionFormatter.new = function() {
    ;
  }).prototype = _debugger.ErrorAndExceptionFormatter.prototype;
  dart.addTypeTests(_debugger.ErrorAndExceptionFormatter);
  dart.addTypeCaches(_debugger.ErrorAndExceptionFormatter);
  dart.setMethodSignature(_debugger.ErrorAndExceptionFormatter, () => ({
    __proto__: dart.getMethods(_debugger.ErrorAndExceptionFormatter.__proto__),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic]),
    addInstanceMembers: dart.fnType(dart.void, [dart.dynamic, core.Set$(_debugger.NameValuePair)])
  }));
  dart.setLibraryUri(_debugger.ErrorAndExceptionFormatter, I[12]);
  dart.defineLazy(_debugger.ErrorAndExceptionFormatter, {
    /*_debugger.ErrorAndExceptionFormatter._pattern*/get _pattern() {
      return core.RegExp.new("\\d+\\:\\d+");
    }
  }, false);
  _debugger.StackTraceFormatter = class StackTraceFormatter extends core.Object {
    accept(object, config) {
      return core.StackTrace.is(object);
    }
    preview(object) {
      return "StackTrace";
    }
    hasChildren(object) {
      return true;
    }
    children(object) {
      return dart.toString(object)[$split]("\n")[$map](_debugger.NameValuePair, dart.fn(line => {
        if (line == null) dart.nullFailed(I[11], 901, 13, "line");
        return new _debugger.NameValuePair.new({value: line[$replaceFirst](core.RegExp.new("^\\s+at\\s"), ""), hideName: true});
      }, T$.StringToNameValuePair()))[$toList]();
    }
  };
  (_debugger.StackTraceFormatter.new = function() {
    ;
  }).prototype = _debugger.StackTraceFormatter.prototype;
  dart.addTypeTests(_debugger.StackTraceFormatter);
  dart.addTypeCaches(_debugger.StackTraceFormatter);
  _debugger.StackTraceFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.StackTraceFormatter, () => ({
    __proto__: dart.getMethods(_debugger.StackTraceFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.StackTraceFormatter, I[12]);
  _debugger.ClassFormatter = class ClassFormatter extends core.Object {
    accept(object, config) {
      return dart.equals(config, _debugger.JsonMLConfig.asClass);
    }
    preview(type) {
      let $implements = dart.getImplements(type);
      let typeName = _debugger.getTypeName(type);
      if ($implements != null) {
        let typeNames = $implements()[$map](core.String, C[7] || CT.C7);
        return dart.str(typeName) + " implements " + dart.str(typeNames[$join](", "));
      } else {
        return typeName;
      }
    }
    hasChildren(object) {
      return true;
    }
    children(type) {
      let t17, t17$;
      let ret = new (T$._HashSetOfNameValuePair()).new();
      let staticProperties = new (T$._HashSetOfNameValuePair()).new();
      let staticMethods = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getStaticFields(type), staticProperties, type, false);
      _debugger.addPropertiesFromSignature(dart.getStaticGetters(type), staticProperties, type, false);
      _debugger.addPropertiesFromSignature(dart.getStaticMethods(type), staticMethods, type, false);
      if (dart.test(staticProperties[$isNotEmpty]) || dart.test(staticMethods[$isNotEmpty])) {
        t17 = ret;
        (() => {
          t17.add(new _debugger.NameValuePair.new({value: "[[Static members]]", hideName: true}));
          t17.addAll(_debugger.sortProperties(staticProperties));
          t17.addAll(_debugger.sortProperties(staticMethods));
          return t17;
        })();
      }
      let instanceMethods = new (T$._HashSetOfNameValuePair()).new();
      _debugger.addPropertiesFromSignature(dart.getMethods(type), instanceMethods, type.prototype, false, {tagTypes: true});
      if (dart.test(instanceMethods[$isNotEmpty])) {
        t17$ = ret;
        (() => {
          t17$.add(new _debugger.NameValuePair.new({value: "[[Instance Methods]]", hideName: true}));
          t17$.addAll(_debugger.sortProperties(instanceMethods));
          return t17$;
        })();
      }
      let mixin = dart.getMixin(type);
      if (mixin != null) {
        ret.add(new _debugger.NameValuePair.new({name: "[[Mixins]]", value: new _debugger.HeritageClause.new("mixins", [mixin])}));
      }
      let baseProto = type.__proto__;
      if (baseProto != null && !dart.test(dart.isJsInterop(baseProto))) {
        ret.add(new _debugger.NameValuePair.new({name: "[[base class]]", value: baseProto, config: _debugger.JsonMLConfig.asClass}));
      }
      return ret[$toList]();
    }
  };
  (_debugger.ClassFormatter.new = function() {
    ;
  }).prototype = _debugger.ClassFormatter.prototype;
  dart.addTypeTests(_debugger.ClassFormatter);
  dart.addTypeCaches(_debugger.ClassFormatter);
  _debugger.ClassFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.ClassFormatter, () => ({
    __proto__: dart.getMethods(_debugger.ClassFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.ClassFormatter, I[12]);
  _debugger.TypeFormatter = class TypeFormatter extends core.Object {
    accept(object, config) {
      return core.Type.is(object);
    }
    preview(object) {
      return dart.toString(object);
    }
    hasChildren(object) {
      return false;
    }
    children(object) {
      return T$.JSArrayOfNameValuePair().of([]);
    }
  };
  (_debugger.TypeFormatter.new = function() {
    ;
  }).prototype = _debugger.TypeFormatter.prototype;
  dart.addTypeTests(_debugger.TypeFormatter);
  dart.addTypeCaches(_debugger.TypeFormatter);
  _debugger.TypeFormatter[dart.implements] = () => [_debugger.Formatter];
  dart.setMethodSignature(_debugger.TypeFormatter, () => ({
    __proto__: dart.getMethods(_debugger.TypeFormatter.__proto__),
    accept: dart.fnType(core.bool, [dart.dynamic, dart.dynamic]),
    preview: dart.fnType(core.String, [dart.dynamic]),
    hasChildren: dart.fnType(core.bool, [dart.dynamic]),
    children: dart.fnType(core.List$(_debugger.NameValuePair), [dart.dynamic])
  }));
  dart.setLibraryUri(_debugger.TypeFormatter, I[12]);
  _debugger._MethodStats = class _MethodStats extends core.Object {};
  (_debugger._MethodStats.new = function(typeName, frame) {
    if (typeName == null) dart.nullFailed(I[13], 13, 21, "typeName");
    if (frame == null) dart.nullFailed(I[13], 13, 36, "frame");
    this.count = 0.0;
    this.typeName = typeName;
    this.frame = frame;
    ;
  }).prototype = _debugger._MethodStats.prototype;
  dart.addTypeTests(_debugger._MethodStats);
  dart.addTypeCaches(_debugger._MethodStats);
  dart.setLibraryUri(_debugger._MethodStats, I[12]);
  dart.setFieldSignature(_debugger._MethodStats, () => ({
    __proto__: dart.getFields(_debugger._MethodStats.__proto__),
    typeName: dart.finalFieldType(core.String),
    frame: dart.finalFieldType(core.String),
    count: dart.fieldType(core.double)
  }));
  _debugger._CallMethodRecord = class _CallMethodRecord extends core.Object {};
  (_debugger._CallMethodRecord.new = function(jsError, type) {
    this.jsError = jsError;
    this.type = type;
    ;
  }).prototype = _debugger._CallMethodRecord.prototype;
  dart.addTypeTests(_debugger._CallMethodRecord);
  dart.addTypeCaches(_debugger._CallMethodRecord);
  dart.setLibraryUri(_debugger._CallMethodRecord, I[12]);
  dart.setFieldSignature(_debugger._CallMethodRecord, () => ({
    __proto__: dart.getFields(_debugger._CallMethodRecord.__proto__),
    jsError: dart.fieldType(dart.dynamic),
    type: dart.fieldType(dart.dynamic)
  }));
  _debugger._typeof = function _typeof(object) {
    return typeof object;
  };
  _debugger.getOwnPropertyNames = function getOwnPropertyNames(object) {
    return T$.JSArrayOfString().of(dart.getOwnPropertyNames(object));
  };
  _debugger.getOwnPropertySymbols = function getOwnPropertySymbols(object) {
    return Object.getOwnPropertySymbols(object);
  };
  _debugger.addMetadataChildren = function addMetadataChildren(object, ret) {
    if (ret == null) dart.nullFailed(I[11], 63, 53, "ret");
    ret.add(new _debugger.NameValuePair.new({name: "[[class]]", value: dart.getReifiedType(object), config: _debugger.JsonMLConfig.asClass}));
  };
  _debugger.addPropertiesFromSignature = function addPropertiesFromSignature(sig, properties, object, walkPrototypeChain, opts) {
    let t17;
    if (properties == null) dart.nullFailed(I[11], 75, 29, "properties");
    if (walkPrototypeChain == null) dart.nullFailed(I[11], 75, 54, "walkPrototypeChain");
    let tagTypes = opts && 'tagTypes' in opts ? opts.tagTypes : false;
    let skippedNames = (t17 = new collection._HashSet.new(), (() => {
      t17.add("hashCode");
      return t17;
    })());
    let objectPrototype = Object.prototype;
    while (sig != null && !core.identical(sig, objectPrototype)) {
      for (let symbol of _debugger.getOwnPropertySymbols(sig)) {
        let dartName = _debugger.symbolName(symbol);
        let dartXPrefix = "dartx.";
        if (dartName[$startsWith](dartXPrefix)) {
          dartName = dartName[$substring](dartXPrefix.length);
        }
        if (dart.test(skippedNames.contains(dartName))) continue;
        let value = _debugger.safeGetProperty(core.Object.as(object), core.Object.as(symbol));
        if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
          dart.fn(value, sig[symbol]);
        }
        properties.add(new _debugger.NameValuePair.new({name: dartName, value: value}));
      }
      for (let name of _debugger.getOwnPropertyNames(sig)) {
        let value = _debugger.safeGetProperty(core.Object.as(object), name);
        if (dart.test(skippedNames.contains(name))) continue;
        if (dart.dtest(tagTypes) && _debugger._typeof(value) === "function") {
          dart.fn(value, sig[name]);
        }
        properties.add(new _debugger.NameValuePair.new({name: name, value: value}));
      }
      if (!dart.test(walkPrototypeChain)) break;
      sig = dart.getPrototypeOf(sig);
    }
  };
  _debugger.sortProperties = function sortProperties(properties) {
    if (properties == null) dart.nullFailed(I[11], 115, 60, "properties");
    let sortedProperties = properties[$toList]();
    sortedProperties[$sort](dart.fn((a, b) => {
      if (a == null) dart.nullFailed(I[11], 118, 26, "a");
      if (b == null) dart.nullFailed(I[11], 118, 29, "b");
      let aPrivate = a.name[$startsWith]("_");
      let bPrivate = b.name[$startsWith]("_");
      if (aPrivate !== bPrivate) return aPrivate ? 1 : -1;
      return a.name[$compareTo](b.name);
    }, T$.NameValuePairAndNameValuePairToint()));
    return sortedProperties;
  };
  _debugger.getObjectTypeName = function getObjectTypeName(object) {
    let reifiedType = dart.getReifiedType(object);
    if (reifiedType == null) {
      if (_debugger._typeof(object) === "function") {
        return "[[Raw JavaScript Function]]";
      }
      return "<Error getting type name>";
    }
    return _debugger.getTypeName(reifiedType);
  };
  _debugger.getTypeName = function getTypeName(type) {
    return dart.typeName(type);
  };
  _debugger.safePreview = function safePreview(object, config) {
    try {
      let preview = _debugger._devtoolsFormatter[_simpleFormatter$].preview(object, config);
      if (preview != null) return preview;
      return dart.toString(object);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return "<Exception thrown> " + dart.str(e);
      } else
        throw e$;
    }
  };
  _debugger.symbolName = function symbolName(symbol) {
    let name = dart.toString(symbol);
    if (!name[$startsWith]("Symbol(")) dart.assertFailed(null, I[11], 157, 10, "name.startsWith('Symbol(')");
    return name[$substring]("Symbol(".length, name.length - 1);
  };
  _debugger.hasMethod = function hasMethod$(object, name) {
    if (name == null) dart.nullFailed(I[11], 161, 31, "name");
    try {
      return dart.hasMethod(object, name);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return false;
      } else
        throw e$;
    }
  };
  _debugger.safeGetProperty = function safeGetProperty(protoChain, name) {
    if (protoChain == null) dart.nullFailed(I[11], 267, 32, "protoChain");
    if (name == null) dart.nullFailed(I[11], 267, 51, "name");
    try {
      return _debugger.JSNative.getProperty(protoChain, name);
    } catch (e$) {
      let e = dart.getThrown(e$);
      if (core.Object.is(e)) {
        return "<Exception thrown> " + dart.str(e);
      } else
        throw e$;
    }
  };
  _debugger.safeProperties = function safeProperties(object) {
    return T$.LinkedHashMapOfdynamic$ObjectN().fromIterable(_debugger.getOwnPropertyNames(object)[$where](dart.fn(each => {
      if (each == null) dart.nullFailed(I[11], 277, 17, "each");
      return _debugger.safeGetProperty(core.Object.as(object), each) != null;
    }, T$.StringTobool())), {key: dart.fn(name => name, T$.dynamicTodynamic()), value: dart.fn(name => _debugger.safeGetProperty(core.Object.as(object), core.Object.as(name)), T$.dynamicToObjectN())});
  };
  _debugger.isNativeJavaScriptObject = function isNativeJavaScriptObject(object) {
    let type = _debugger._typeof(object);
    if (type !== "object" && type !== "function") return true;
    if (dart.test(dart.isJsInterop(object)) && dart.getModuleName(core.Object.as(object)) == null) {
      return true;
    }
    return object instanceof Node;
  };
  _debugger.registerDevtoolsFormatter = function registerDevtoolsFormatter() {
    dart.global.devtoolsFormatters = [_debugger._devtoolsFormatter];
  };
  _debugger.getModuleNames = function getModuleNames$() {
    return dart.getModuleNames();
  };
  _debugger.getModuleLibraries = function getModuleLibraries$(name) {
    if (name == null) dart.nullFailed(I[11], 1015, 27, "name");
    return dart.getModuleLibraries(name);
  };
  _debugger.getDynamicStats = function getDynamicStats() {
    let t20;
    let callMethodStats = new (T$.IdentityMapOfString$_MethodStats()).new();
    if (dart.notNull(_debugger._callMethodRecords[$length]) > 0) {
      let recordRatio = dart.notNull(_debugger._totalCallRecords) / dart.notNull(_debugger._callMethodRecords[$length]);
      for (let record of _debugger._callMethodRecords) {
        let stackStr = record.jsError.stack;
        let frames = stackStr[$split]("\n");
        let src = frames[$skip](2)[$map](core.String, dart.fn(f => {
          if (f == null) dart.nullFailed(I[13], 66, 17, "f");
          return _debugger._frameMappingCache[$putIfAbsent](f, dart.fn(() => dart.nullCheck(_debugger.stackTraceMapper)("\n" + dart.str(f)), T$.VoidToString()));
        }, T$.StringToString()))[$firstWhere](dart.fn(f => {
          if (f == null) dart.nullFailed(I[13], 68, 24, "f");
          return !f[$startsWith]("dart:");
        }, T$.StringTobool()), {orElse: dart.fn(() => "", T$.VoidToString())});
        let actualTypeName = dart.typeName(record.type);
        t20 = callMethodStats[$putIfAbsent](actualTypeName + " <" + dart.str(src) + ">", dart.fn(() => new _debugger._MethodStats.new(actualTypeName, src), T$.VoidTo_MethodStats()));
        t20.count = dart.notNull(t20.count) + recordRatio;
      }
      if (_debugger._totalCallRecords != _debugger._callMethodRecords[$length]) {
        for (let k of callMethodStats[$keys][$toList]()) {
          let stats = dart.nullCheck(callMethodStats[$_get](k));
          let threshold = dart.notNull(_debugger._minCount) * recordRatio;
          if (dart.notNull(stats.count) + 0.001 < threshold) {
            callMethodStats[$remove](k);
          }
        }
      }
    }
    _debugger._callMethodRecords[$clear]();
    _debugger._totalCallRecords = 0;
    let keys = callMethodStats[$keys][$toList]();
    keys[$sort](dart.fn((a, b) => {
      if (a == null) dart.nullFailed(I[13], 94, 8, "a");
      if (b == null) dart.nullFailed(I[13], 94, 11, "b");
      return dart.nullCheck(callMethodStats[$_get](b)).count[$compareTo](dart.nullCheck(callMethodStats[$_get](a)).count);
    }, T$.StringAndStringToint()));
    let ret = T$.JSArrayOfListOfObject().of([]);
    for (let key of keys) {
      let stats = dart.nullCheck(callMethodStats[$_get](key));
      ret[$add](T$.JSArrayOfObject().of([stats.typeName, stats.frame, stats.count[$round]()]));
    }
    return ret;
  };
  _debugger.clearDynamicStats = function clearDynamicStats() {
    _debugger._callMethodRecords[$clear]();
  };
  _debugger.trackCall = function trackCall(obj) {
    if (!_debugger._trackProfile) return;
    let index = -1;
    _debugger._totalCallRecords = dart.notNull(_debugger._totalCallRecords) + 1;
    if (_debugger._callMethodRecords[$length] == _debugger._callRecordSampleSize) {
      index = Math.floor(Math.random() * _debugger._totalCallRecords);
      if (index >= dart.notNull(_debugger._callMethodRecords[$length])) return;
    }
    let record = new _debugger._CallMethodRecord.new(new Error(), dart.getReifiedType(obj));
    if (index === -1) {
      _debugger._callMethodRecords[$add](record);
    } else {
      _debugger._callMethodRecords[$_set](index, record);
    }
  };
  dart.copyProperties(_debugger, {
    get stackTraceMapper() {
      let _util = dart.global.$dartStackTraceUtility;
      return _util != null ? _util.mapper : null;
    },
    get _trackProfile() {
      return dart.__trackProfile;
    }
  });
  dart.defineLazy(_debugger, {
    /*_debugger._maxSpanLength*/get _maxSpanLength() {
      return 100;
    },
    set _maxSpanLength(_) {},
    /*_debugger._devtoolsFormatter*/get _devtoolsFormatter() {
      return new _debugger.JsonMLFormatter.new(new _debugger.DartFormatter.new());
    },
    set _devtoolsFormatter(_) {},
    /*_debugger.maxFormatterStringLength*/get maxFormatterStringLength() {
      return 100;
    },
    set maxFormatterStringLength(_) {},
    /*_debugger._callRecordSampleSize*/get _callRecordSampleSize() {
      return 5000;
    },
    set _callRecordSampleSize(_) {},
    /*_debugger._callMethodRecords*/get _callMethodRecords() {
      return T$.JSArrayOf_CallMethodRecord().of([]);
    },
    set _callMethodRecords(_) {},
    /*_debugger._totalCallRecords*/get _totalCallRecords() {
      return 0;
    },
    set _totalCallRecords(_) {},
    /*_debugger._minCount*/get _minCount() {
      return 2;
    },
    set _minCount(_) {},
    /*_debugger._frameMappingCache*/get _frameMappingCache() {
      return new (T$.IdentityMapOfString$String()).new();
    },
    set _frameMappingCache(_) {}
  }, false);
  var name$4 = dart.privateName(_foreign_helper, "JSExportName.name");
  _foreign_helper.JSExportName = class JSExportName extends core.Object {
    get name() {
      return this[name$4];
    }
    set name(value) {
      super.name = value;
    }
  };
  (_foreign_helper.JSExportName.new = function(name) {
    if (name == null) dart.nullFailed(I[14], 139, 27, "name");
    this[name$4] = name;
    ;
  }).prototype = _foreign_helper.JSExportName.prototype;
  dart.addTypeTests(_foreign_helper.JSExportName);
  dart.addTypeCaches(_foreign_helper.JSExportName);
  dart.setLibraryUri(_foreign_helper.JSExportName, I[15]);
  dart.setFieldSignature(_foreign_helper.JSExportName, () => ({
    __proto__: dart.getFields(_foreign_helper.JSExportName.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  var code$ = dart.privateName(_foreign_helper, "JS_CONST.code");
  _foreign_helper.JS_CONST = class JS_CONST extends core.Object {
    get code() {
      return this[code$];
    }
    set code(value) {
      super.code = value;
    }
  };
  (_foreign_helper.JS_CONST.new = function(code) {
    if (code == null) dart.nullFailed(I[14], 259, 23, "code");
    this[code$] = code;
    ;
  }).prototype = _foreign_helper.JS_CONST.prototype;
  dart.addTypeTests(_foreign_helper.JS_CONST);
  dart.addTypeCaches(_foreign_helper.JS_CONST);
  dart.setLibraryUri(_foreign_helper.JS_CONST, I[15]);
  dart.setFieldSignature(_foreign_helper.JS_CONST, () => ({
    __proto__: dart.getFields(_foreign_helper.JS_CONST.__proto__),
    code: dart.finalFieldType(core.String)
  }));
  _foreign_helper._Rest = class _Rest extends core.Object {};
  (_foreign_helper._Rest.new = function() {
    ;
  }).prototype = _foreign_helper._Rest.prototype;
  dart.addTypeTests(_foreign_helper._Rest);
  dart.addTypeCaches(_foreign_helper._Rest);
  dart.setLibraryUri(_foreign_helper._Rest, I[15]);
  _foreign_helper.JS_DART_OBJECT_CONSTRUCTOR = function JS_DART_OBJECT_CONSTRUCTOR() {
  };
  _foreign_helper.JS_INTERCEPTOR_CONSTANT = function JS_INTERCEPTOR_CONSTANT(type) {
    if (type == null) dart.nullFailed(I[14], 157, 30, "type");
  };
  _foreign_helper.JS_EFFECT = function JS_EFFECT(code) {
    if (code == null) dart.nullFailed(I[14], 244, 25, "code");
    dart.dcall(code, [null]);
  };
  _foreign_helper.spread = function spread(args) {
    dart.throw(new core.StateError.new("The spread function cannot be called, " + "it should be compiled away."));
  };
  dart.defineLazy(_foreign_helper, {
    /*_foreign_helper.rest*/get rest() {
      return C[8] || CT.C8;
    }
  }, false);
  _interceptors.Interceptor = class Interceptor extends core.Object {
    toString() {
      return this.toString();
    }
  };
  (_interceptors.Interceptor.new = function() {
    ;
  }).prototype = _interceptors.Interceptor.prototype;
  dart.addTypeTests(_interceptors.Interceptor);
  dart.addTypeCaches(_interceptors.Interceptor);
  dart.setLibraryUri(_interceptors.Interceptor, I[16]);
  dart.defineExtensionMethods(_interceptors.Interceptor, ['toString']);
  _interceptors.JSBool = class JSBool extends _interceptors.Interceptor {
    [$toString]() {
      return String(this);
    }
    get [$hashCode]() {
      return this ? 2 * 3 * 23 * 3761 : 269 * 811;
    }
    [$bitAnd](other) {
      if (other == null) dart.argumentError(other);
      return other && this;
    }
    [$bitOr](other) {
      if (other == null) dart.argumentError(other);
      return other || this;
    }
    [$bitXor](other) {
      if (other == null) dart.argumentError(other);
      return this !== other;
    }
    get [$runtimeType]() {
      return dart.wrapType(core.bool);
    }
  };
  (_interceptors.JSBool.new = function() {
    _interceptors.JSBool.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSBool.prototype;
  dart.addTypeTests(_interceptors.JSBool);
  dart.addTypeCaches(_interceptors.JSBool);
  _interceptors.JSBool[dart.implements] = () => [core.bool];
  dart.setMethodSignature(_interceptors.JSBool, () => ({
    __proto__: dart.getMethods(_interceptors.JSBool.__proto__),
    [$bitAnd]: dart.fnType(core.bool, [core.bool]),
    [$bitOr]: dart.fnType(core.bool, [core.bool]),
    [$bitXor]: dart.fnType(core.bool, [core.bool])
  }));
  dart.setLibraryUri(_interceptors.JSBool, I[16]);
  dart.definePrimitiveHashCode(_interceptors.JSBool.prototype);
  dart.registerExtension("Boolean", _interceptors.JSBool);
  const _is_JSIndexable_default = Symbol('_is_JSIndexable_default');
  _interceptors.JSIndexable$ = dart.generic(E => {
    class JSIndexable extends core.Object {}
    (JSIndexable.new = function() {
      ;
    }).prototype = JSIndexable.prototype;
    dart.addTypeTests(JSIndexable);
    JSIndexable.prototype[_is_JSIndexable_default] = true;
    dart.addTypeCaches(JSIndexable);
    dart.setLibraryUri(JSIndexable, I[16]);
    return JSIndexable;
  });
  _interceptors.JSIndexable = _interceptors.JSIndexable$();
  dart.addTypeTests(_interceptors.JSIndexable, _is_JSIndexable_default);
  const _is_JSMutableIndexable_default = Symbol('_is_JSMutableIndexable_default');
  _interceptors.JSMutableIndexable$ = dart.generic(E => {
    class JSMutableIndexable extends _interceptors.JSIndexable$(E) {}
    (JSMutableIndexable.new = function() {
      ;
    }).prototype = JSMutableIndexable.prototype;
    dart.addTypeTests(JSMutableIndexable);
    JSMutableIndexable.prototype[_is_JSMutableIndexable_default] = true;
    dart.addTypeCaches(JSMutableIndexable);
    dart.setLibraryUri(JSMutableIndexable, I[16]);
    return JSMutableIndexable;
  });
  _interceptors.JSMutableIndexable = _interceptors.JSMutableIndexable$();
  dart.addTypeTests(_interceptors.JSMutableIndexable, _is_JSMutableIndexable_default);
  _interceptors.JSObject = class JSObject extends core.Object {};
  (_interceptors.JSObject.new = function() {
    ;
  }).prototype = _interceptors.JSObject.prototype;
  dart.addTypeTests(_interceptors.JSObject);
  dart.addTypeCaches(_interceptors.JSObject);
  dart.setLibraryUri(_interceptors.JSObject, I[16]);
  _interceptors.JavaScriptObject = class JavaScriptObject extends _interceptors.Interceptor {
    get hashCode() {
      return 0;
    }
    get runtimeType() {
      return dart.wrapType(_interceptors.JSObject);
    }
  };
  (_interceptors.JavaScriptObject.new = function() {
    _interceptors.JavaScriptObject.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JavaScriptObject.prototype;
  dart.addTypeTests(_interceptors.JavaScriptObject);
  dart.addTypeCaches(_interceptors.JavaScriptObject);
  _interceptors.JavaScriptObject[dart.implements] = () => [_interceptors.JSObject];
  dart.setLibraryUri(_interceptors.JavaScriptObject, I[16]);
  dart.defineExtensionAccessors(_interceptors.JavaScriptObject, ['hashCode', 'runtimeType']);
  _interceptors.PlainJavaScriptObject = class PlainJavaScriptObject extends _interceptors.JavaScriptObject {};
  (_interceptors.PlainJavaScriptObject.new = function() {
    _interceptors.PlainJavaScriptObject.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.PlainJavaScriptObject.prototype;
  dart.addTypeTests(_interceptors.PlainJavaScriptObject);
  dart.addTypeCaches(_interceptors.PlainJavaScriptObject);
  dart.setLibraryUri(_interceptors.PlainJavaScriptObject, I[16]);
  _interceptors.UnknownJavaScriptObject = class UnknownJavaScriptObject extends _interceptors.JavaScriptObject {
    toString() {
      return String(this);
    }
  };
  (_interceptors.UnknownJavaScriptObject.new = function() {
    _interceptors.UnknownJavaScriptObject.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.UnknownJavaScriptObject.prototype;
  dart.addTypeTests(_interceptors.UnknownJavaScriptObject);
  dart.addTypeCaches(_interceptors.UnknownJavaScriptObject);
  dart.setLibraryUri(_interceptors.UnknownJavaScriptObject, I[16]);
  dart.defineExtensionMethods(_interceptors.UnknownJavaScriptObject, ['toString']);
  _interceptors.NativeError = class NativeError extends _interceptors.Interceptor {
    dartStack() {
      return this.stack;
    }
  };
  (_interceptors.NativeError.new = function() {
    _interceptors.NativeError.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.NativeError.prototype;
  dart.addTypeTests(_interceptors.NativeError);
  dart.addTypeCaches(_interceptors.NativeError);
  dart.setMethodSignature(_interceptors.NativeError, () => ({
    __proto__: dart.getMethods(_interceptors.NativeError.__proto__),
    dartStack: dart.fnType(core.String, []),
    [$dartStack]: dart.fnType(core.String, [])
  }));
  dart.setLibraryUri(_interceptors.NativeError, I[16]);
  dart.defineExtensionMethods(_interceptors.NativeError, ['dartStack']);
  var _fieldName = dart.privateName(_interceptors, "_fieldName");
  var _functionCallTarget = dart.privateName(_interceptors, "_functionCallTarget");
  var _receiver = dart.privateName(_interceptors, "_receiver");
  var _receiver$ = dart.privateName(core, "_receiver");
  var _arguments = dart.privateName(_interceptors, "_arguments");
  var _arguments$ = dart.privateName(core, "_arguments");
  var _memberName = dart.privateName(_interceptors, "_memberName");
  var _memberName$ = dart.privateName(core, "_memberName");
  var _invocation = dart.privateName(_interceptors, "_invocation");
  var _invocation$ = dart.privateName(core, "_invocation");
  var _namedArguments = dart.privateName(_interceptors, "_namedArguments");
  var _namedArguments$ = dart.privateName(core, "_namedArguments");
  _interceptors.JSNoSuchMethodError = class JSNoSuchMethodError extends _interceptors.NativeError {
    [_fieldName](message) {
      let t20;
      if (message == null) dart.nullFailed(I[17], 131, 29, "message");
      let match = _interceptors.JSNoSuchMethodError._nullError.firstMatch(message);
      if (match == null) return null;
      let name = dart.nullCheck(match._get(1));
      match = (t20 = _interceptors.JSNoSuchMethodError._extensionName.firstMatch(name), t20 == null ? _interceptors.JSNoSuchMethodError._privateName.firstMatch(name) : t20);
      return match != null ? match._get(1) : name;
    }
    [_functionCallTarget](message) {
      if (message == null) dart.nullFailed(I[17], 139, 38, "message");
      let match = _interceptors.JSNoSuchMethodError._notAFunction.firstMatch(message);
      return match != null ? match._get(1) : null;
    }
    [$dartStack]() {
      let stack = super[$dartStack]();
      stack = dart.notNull(this[$toString]()) + "\n" + dart.notNull(stack[$split]("\n")[$sublist](1)[$join]("\n"));
      return stack;
    }
    get [$stackTrace]() {
      return dart.stackTrace(this);
    }
    [$toString]() {
      let message = this.message;
      let callTarget = this[_functionCallTarget](message);
      if (callTarget != null) {
        return "NoSuchMethodError: tried to call a non-function, such as null: " + "'" + dart.str(callTarget) + "'";
      }
      let name = this[_fieldName](message);
      if (name == null) {
        return this.toString();
      }
      return "NoSuchMethodError: invalid member on null: '" + dart.str(name) + "'";
    }
    get [_receiver$]() {
      return this[$noSuchMethod](new core._Invocation.getter(C[9] || CT.C9));
    }
    get [_arguments$]() {
      return T$.ListN().as(this[$noSuchMethod](new core._Invocation.getter(C[10] || CT.C10)));
    }
    get [_memberName$]() {
      return core.Symbol.as(this[$noSuchMethod](new core._Invocation.getter(C[11] || CT.C11)));
    }
    get [_invocation$]() {
      return T$.InvocationN().as(this[$noSuchMethod](new core._Invocation.getter(C[12] || CT.C12)));
    }
    get [_namedArguments$]() {
      return T$.MapNOfSymbol$dynamic().as(this[$noSuchMethod](new core._Invocation.getter(C[13] || CT.C13)));
    }
  };
  (_interceptors.JSNoSuchMethodError.new = function() {
    _interceptors.JSNoSuchMethodError.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSNoSuchMethodError.prototype;
  dart.addTypeTests(_interceptors.JSNoSuchMethodError);
  dart.addTypeCaches(_interceptors.JSNoSuchMethodError);
  _interceptors.JSNoSuchMethodError[dart.implements] = () => [core.NoSuchMethodError];
  dart.setMethodSignature(_interceptors.JSNoSuchMethodError, () => ({
    __proto__: dart.getMethods(_interceptors.JSNoSuchMethodError.__proto__),
    [_fieldName]: dart.fnType(dart.nullable(core.String), [core.String]),
    [_functionCallTarget]: dart.fnType(dart.nullable(core.String), [core.String])
  }));
  dart.setGetterSignature(_interceptors.JSNoSuchMethodError, () => ({
    __proto__: dart.getGetters(_interceptors.JSNoSuchMethodError.__proto__),
    [$stackTrace]: core.StackTrace,
    [_receiver$]: dart.nullable(core.Object),
    [_arguments$]: dart.nullable(core.List),
    [_memberName$]: core.Symbol,
    [_invocation$]: dart.nullable(core.Invocation),
    [_namedArguments$]: dart.nullable(core.Map$(core.Symbol, dart.dynamic))
  }));
  dart.setLibraryUri(_interceptors.JSNoSuchMethodError, I[16]);
  dart.defineLazy(_interceptors.JSNoSuchMethodError, {
    /*_interceptors.JSNoSuchMethodError._nullError*/get _nullError() {
      return core.RegExp.new("^Cannot read property '(.+)' of null$");
    },
    /*_interceptors.JSNoSuchMethodError._notAFunction*/get _notAFunction() {
      return core.RegExp.new("^(.+) is not a function$");
    },
    /*_interceptors.JSNoSuchMethodError._extensionName*/get _extensionName() {
      return core.RegExp.new("^Symbol\\(dartx\\.(.+)\\)$");
    },
    /*_interceptors.JSNoSuchMethodError._privateName*/get _privateName() {
      return core.RegExp.new("^Symbol\\((_.+)\\)$");
    }
  }, false);
  dart.registerExtension("TypeError", _interceptors.JSNoSuchMethodError);
  _interceptors.JSFunction = class JSFunction extends _interceptors.Interceptor {
    [$toString]() {
      if (dart.isType(this)) return dart.typeName(this);
      return "Closure: " + dart.typeName(dart.getReifiedType(this)) + " from: " + this;
    }
    [$_equals](other) {
      if (other == null) return false;
      if (other == null) return false;
      let boundObj = this._boundObject;
      if (boundObj == null) return this === other;
      return boundObj === other._boundObject && this._boundMethod === other._boundMethod;
    }
    get [$hashCode]() {
      let boundObj = this._boundObject;
      if (boundObj == null) return core.identityHashCode(this);
      let boundMethod = this._boundMethod;
      let hash = 17 * 31 + dart.notNull(dart.hashCode(boundObj)) & 536870911;
      return hash * 31 + dart.notNull(core.identityHashCode(boundMethod)) & 536870911;
    }
    get [$runtimeType]() {
      return dart.wrapType(dart.getReifiedType(this));
    }
  };
  (_interceptors.JSFunction.new = function() {
    _interceptors.JSFunction.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSFunction.prototype;
  dart.addTypeTests(_interceptors.JSFunction);
  dart.addTypeCaches(_interceptors.JSFunction);
  dart.setLibraryUri(_interceptors.JSFunction, I[16]);
  dart.registerExtension("Function", _interceptors.JSFunction);
  _interceptors.JSNull = class JSNull extends core.Object {
    toString() {
      return "null";
    }
    noSuchMethod(i) {
      if (i == null) dart.nullFailed(I[17], 215, 27, "i");
      return dart.defaultNoSuchMethod(null, i);
    }
  };
  (_interceptors.JSNull.new = function() {
    ;
  }).prototype = _interceptors.JSNull.prototype;
  dart.addTypeTests(_interceptors.JSNull);
  dart.addTypeCaches(_interceptors.JSNull);
  dart.setLibraryUri(_interceptors.JSNull, I[16]);
  dart.defineExtensionMethods(_interceptors.JSNull, ['toString', 'noSuchMethod']);
  var _hasValue = dart.privateName(_interceptors, "_hasValue");
  var _hasValue$ = dart.privateName(core, "_hasValue");
  var _errorExplanation = dart.privateName(_interceptors, "_errorExplanation");
  var _errorExplanation$ = dart.privateName(core, "_errorExplanation");
  var _errorName = dart.privateName(_interceptors, "_errorName");
  var _errorName$ = dart.privateName(core, "_errorName");
  _interceptors.JSRangeError = class JSRangeError extends _interceptors.Interceptor {
    get [$stackTrace]() {
      return dart.stackTrace(this);
    }
    get [$invalidValue]() {
      return null;
    }
    get [$name]() {
      return null;
    }
    get [$message]() {
      return this.message;
    }
    [$toString]() {
      return "Invalid argument: " + dart.str(this[$message]);
    }
    get [_hasValue$]() {
      return core.bool.as(this[$noSuchMethod](new core._Invocation.getter(C[14] || CT.C14)));
    }
    get [_errorExplanation$]() {
      return core.String.as(this[$noSuchMethod](new core._Invocation.getter(C[15] || CT.C15)));
    }
    get [_errorName$]() {
      return core.String.as(this[$noSuchMethod](new core._Invocation.getter(C[16] || CT.C16)));
    }
  };
  (_interceptors.JSRangeError.new = function() {
    _interceptors.JSRangeError.__proto__.new.call(this);
    ;
  }).prototype = _interceptors.JSRangeError.prototype;
  dart.addTypeTests(_interceptors.JSRangeError);
  dart.addTypeCaches(_interceptors.JSRangeError);
  _interceptors.JSRangeError[dart.implements] = () => [core.ArgumentError];
  dart.setGetterSignature(_interceptors.JSRangeError, () => ({
    __proto__: dart.getGetters(_interceptors.JSRangeError.__proto__),
    [$stackTrace]: core.StackTrace,
    [$invalidValue]: dart.dynamic,
    [$name]: dart.nullable(core.String),
    [$message]: dart.dynamic,
    [_hasValue$]: core.bool,
    [_errorExplanation$]: core.String,
    [_errorName$]: core.String
  }));
  dart.setLibraryUri(_interceptors.JSRangeError, I[16]);
  dart.registerExtension("RangeError", _interceptors.JSRangeError);
  var _setLengthUnsafe = dart.privateName(_interceptors, "_setLengthUnsafe");
  var _removeWhere = dart.privateName(_interceptors, "_removeWhere");
  const _is_JSArray_default = Symbol('_is_JSArray_default');
  _interceptors.JSArray$ = dart.generic(E => {
    var IterableOfE = () => (IterableOfE = dart.constFn(core.Iterable$(E)))();
    var WhereIterableOfE = () => (WhereIterableOfE = dart.constFn(_internal.WhereIterable$(E)))();
    var SubListIterableOfE = () => (SubListIterableOfE = dart.constFn(_internal.SubListIterable$(E)))();
    var TakeWhileIterableOfE = () => (TakeWhileIterableOfE = dart.constFn(_internal.TakeWhileIterable$(E)))();
    var SkipWhileIterableOfE = () => (SkipWhileIterableOfE = dart.constFn(_internal.SkipWhileIterable$(E)))();
    var EAndEToE = () => (EAndEToE = dart.constFn(dart.fnType(E, [E, E])))();
    var VoidToE = () => (VoidToE = dart.constFn(dart.fnType(E, [])))();
    var VoidToNE = () => (VoidToNE = dart.constFn(dart.nullable(VoidToE())))();
    var JSArrayOfE = () => (JSArrayOfE = dart.constFn(_interceptors.JSArray$(E)))();
    var ListOfE = () => (ListOfE = dart.constFn(core.List$(E)))();
    var EN = () => (EN = dart.constFn(dart.nullable(E)))();
    var ReversedListIterableOfE = () => (ReversedListIterableOfE = dart.constFn(_internal.ReversedListIterable$(E)))();
    var LinkedHashSetOfE = () => (LinkedHashSetOfE = dart.constFn(collection.LinkedHashSet$(E)))();
    var ArrayIteratorOfE = () => (ArrayIteratorOfE = dart.constFn(_interceptors.ArrayIterator$(E)))();
    var ListMapViewOfE = () => (ListMapViewOfE = dart.constFn(_internal.ListMapView$(E)))();
    var FollowedByIterableOfE = () => (FollowedByIterableOfE = dart.constFn(_internal.FollowedByIterable$(E)))();
    class JSArray extends core.Object {
      constructor() {
        return [];
      }
      static of(list) {
        list.__proto__ = JSArray.prototype;
        return list;
      }
      static fixed(list) {
        list.__proto__ = JSArray.prototype;
        list.fixed$length = Array;
        return list;
      }
      static unmodifiable(list) {
        list.__proto__ = JSArray.prototype;
        list.fixed$length = Array;
        list.immutable$list = Array;
        return list;
      }
      static markFixedList(list) {
        list.fixed$length = Array;
      }
      static markUnmodifiableList(list) {
        list.fixed$length = Array;
        list.immutable$list = Array;
      }
      [$checkMutable](reason) {
        if (this.immutable$list) {
          dart.throw(new core.UnsupportedError.new(core.String.as(reason)));
        }
      }
      [$checkGrowable](reason) {
        if (this.fixed$length) {
          dart.throw(new core.UnsupportedError.new(core.String.as(reason)));
        }
      }
      [$cast](R) {
        return core.List.castFrom(E, R, this);
      }
      [$add](value) {
        E.as(value);
        this[$checkGrowable]("add");
        this.push(value);
      }
      [$removeAt](index) {
        if (index == null) dart.argumentError(index);
        this[$checkGrowable]("removeAt");
        if (index < 0 || index >= this[$length]) {
          dart.throw(new core.RangeError.value(index));
        }
        return this.splice(index, 1)[0];
      }
      [$insert](index, value) {
        if (index == null) dart.argumentError(index);
        E.as(value);
        this[$checkGrowable]("insert");
        if (index < 0 || index > this[$length]) {
          dart.throw(new core.RangeError.value(index));
        }
        this.splice(index, 0, value);
      }
      [$insertAll](index, iterable) {
        if (index == null) dart.argumentError(index);
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[18], 93, 52, "iterable");
        this[$checkGrowable]("insertAll");
        core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
        if (!_internal.EfficientLengthIterable.is(iterable)) {
          iterable = iterable[$toList]();
        }
        let insertionLength = dart.notNull(iterable[$length]);
        this[_setLengthUnsafe](this[$length] + insertionLength);
        let end = index + insertionLength;
        this[$setRange](end, this[$length], this, index);
        this[$setRange](index, end, iterable);
      }
      [$setAll](index, iterable) {
        let t20;
        if (index == null) dart.argumentError(index);
        IterableOfE().as(iterable);
        if (iterable == null) dart.nullFailed(I[18], 107, 49, "iterable");
        this[$checkMutable]("setAll");
        core.RangeError.checkValueInInterval(index, 0, this[$length], "index");
        for (let element of iterable) {
          this[$_set]((t20 = index, index = t20 + 1, t20), element);
        }
      }
      [$removeLast]() {
        this[$checkGrowable]("removeLast");
        if (this[$length] === 0) dart.throw(_js_helper.diagnoseIndexError(this, -1));
        return this.pop();
      }
      [$remove](element) {
        this[$checkGrowable]("remove");
        let length = this[$length];
        for (let i = 0; i < length; i = i + 1) {
          if (dart.equals(this[$_get](i), element)) {
            this.splice(i, 1);
            return true;
          }
        }
        return false;
      }
      [$removeWhere](test) {
        if (test == null) dart.nullFailed(I[18], 136, 37, "test");
        this[$checkGrowable]("removeWhere");
        this[_removeWhere](test, true);
      }
      [$retainWhere](test) {
        if (test == null) dart.nullFailed(I[18], 141, 37, "test");
        this[$checkGrowable]("retainWhere");
        this[_removeWhere](test, false);
      }
      [_removeWhere](test, removeMatching) {
        if (test == null) dart.nullFailed(I[18], 146, 38, "test");
        if (removeMatching == null) dart.nullFailed(I[18], 146, 49, "removeMatching");
        let retained = [];
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          if (!dart.test(test(element)) === removeMatching) {
            retained.push(element);
          }
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (retained[$length] === end) return;
        this[$length] = retained[$length];
        let length = dart.notNull(retained[$length]);
        for (let i = 0; i < length; i = i + 1) {
          this[i] = retained[i];
        }
      }
      [$where](f) {
        if (f == null) dart.nullFailed(I[18], 175, 38, "f");
        return new (WhereIterableOfE()).new(this, f);
      }
      [$expand](T, f) {
        if (f == null) dart.nullFailed(I[18], 179, 49, "f");
        return new (_internal.ExpandIterable$(E, T)).new(this, f);
      }
      [$addAll](collection) {
        IterableOfE().as(collection);
        if (collection == null) dart.nullFailed(I[18], 183, 27, "collection");
        let i = this[$length];
        this[$checkGrowable]("addAll");
        for (let e of collection) {
          if (!(i === this[$length] || dart.throw(new core.ConcurrentModificationError.new(this)))) dart.assertFailed(null, I[18], 187, 14, "i == this.length || (throw ConcurrentModificationError(this))");
          i = i + 1;
          this.push(e);
        }
      }
      [$clear]() {
        this[$length] = 0;
      }
      [$forEach](f) {
        if (f == null) dart.nullFailed(I[18], 197, 33, "f");
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          f(element);
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
      }
      [$map](T, f) {
        if (f == null) dart.nullFailed(I[18], 206, 36, "f");
        return new (_internal.MappedListIterable$(E, T)).new(this, f);
      }
      [$join](separator = "") {
        if (separator == null) dart.nullFailed(I[18], 210, 23, "separator");
        let length = this[$length];
        let list = T$.ListOfString().filled(length, "");
        for (let i = 0; i < length; i = i + 1) {
          list[$_set](i, dart.str(this[$_get](i)));
        }
        return list.join(separator);
      }
      [$take](n) {
        if (n == null) dart.nullFailed(I[18], 219, 24, "n");
        return new (SubListIterableOfE()).new(this, 0, n);
      }
      [$takeWhile](test) {
        if (test == null) dart.nullFailed(I[18], 223, 30, "test");
        return new (TakeWhileIterableOfE()).new(this, test);
      }
      [$skip](n) {
        if (n == null) dart.nullFailed(I[18], 227, 24, "n");
        return new (SubListIterableOfE()).new(this, n, null);
      }
      [$skipWhile](test) {
        if (test == null) dart.nullFailed(I[18], 231, 42, "test");
        return new (SkipWhileIterableOfE()).new(this, test);
      }
      [$reduce](combine) {
        EAndEToE().as(combine);
        if (combine == null) dart.nullFailed(I[18], 235, 14, "combine");
        let length = this[$length];
        if (length === 0) dart.throw(_internal.IterableElementError.noElement());
        let value = this[$_get](0);
        for (let i = 1; i < length; i = i + 1) {
          let element = this[i];
          value = combine(value, element);
          if (length !== this[$length]) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        return value;
      }
      [$fold](T, initialValue, combine) {
        if (combine == null) dart.nullFailed(I[18], 247, 68, "combine");
        let value = initialValue;
        let length = this[$length];
        for (let i = 0; i < length; i = i + 1) {
          let element = this[i];
          value = combine(value, element);
          if (this[$length] !== length) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        return value;
      }
      [$firstWhere](test, opts) {
        if (test == null) dart.nullFailed(I[18], 258, 33, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let end = this[$length];
        for (let i = 0; i < end; i = i + 1) {
          let element = this[i];
          if (dart.test(test(element))) return element;
          if (this[$length] !== end) dart.throw(new core.ConcurrentModificationError.new(this));
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      [$lastWhere](test, opts) {
        if (test == null) dart.nullFailed(I[18], 269, 32, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this[$length];
        for (let i = length - 1; i >= 0; i = i - 1) {
          let element = this[i];
          if (dart.test(test(element))) return element;
          if (length !== this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      [$singleWhere](test, opts) {
        if (test == null) dart.nullFailed(I[18], 282, 34, "test");
        let orElse = opts && 'orElse' in opts ? opts.orElse : null;
        VoidToNE().as(orElse);
        let length = this[$length];
        let match = null;
        let matchFound = false;
        for (let i = 0; i < length; i = i + 1) {
          let element = this[i];
          if (dart.test(test(element))) {
            if (matchFound) {
              dart.throw(_internal.IterableElementError.tooMany());
            }
            matchFound = true;
            match = element;
          }
          if (length !== this[$length]) {
            dart.throw(new core.ConcurrentModificationError.new(this));
          }
        }
        if (matchFound) return E.as(match);
        if (orElse != null) return orElse();
        dart.throw(_internal.IterableElementError.noElement());
      }
      [$elementAt](index) {
        if (index == null) dart.nullFailed(I[18], 304, 19, "index");
        return this[$_get](index);
      }
      [$sublist](start, end = null) {
        if (start == null) dart.argumentError(start);
        if (start < 0 || start > this[$length]) {
          dart.throw(new core.RangeError.range(start, 0, this[$length], "start"));
        }
        if (end == null) {
          end = this[$length];
        } else {
          let _end = end;
          if (_end < start || _end > this[$length]) {
            dart.throw(new core.RangeError.range(end, start, this[$length], "end"));
          }
        }
        if (start === end) return JSArrayOfE().of([]);
        return JSArrayOfE().of(this.slice(start, end));
      }
      [$getRange](start, end) {
        if (start == null) dart.nullFailed(I[18], 325, 28, "start");
        if (end == null) dart.nullFailed(I[18], 325, 39, "end");
        core.RangeError.checkValidRange(start, end, this[$length]);
        return new (SubListIterableOfE()).new(this, start, end);
      }
      get [$first]() {
        if (this[$length] > 0) return this[$_get](0);
        dart.throw(_internal.IterableElementError.noElement());
      }
      get [$last]() {
        if (this[$length] > 0) return this[$_get](this[$length] - 1);
        dart.throw(_internal.IterableElementError.noElement());
      }
      get [$single]() {
        if (this[$length] === 1) return this[$_get](0);
        if (this[$length] === 0) dart.throw(_internal.IterableElementError.noElement());
        dart.throw(_internal.IterableElementError.tooMany());
      }
      [$removeRange](start, end) {
        if (start == null) dart.argumentError(start);
        if (end == null) dart.argumentError(end);
        this[$checkGrowable]("removeRange");
        core.RangeError.